/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 8      Example: 5      Name: Two-dimensional average dynamic
 * MaxFile name: TwoDAverageDynamic
 * Summary:
 *       Kernel that averages within an 8-point window.
 */

package twodaveragedynamic;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class TwoDAverageDynamicKernel extends Kernel {

	TwoDAverageDynamicKernel(KernelParameters parameters, int nxMax) {
		super(parameters);

		// Input
		DFEVar inStream = io.input("inStream", dfeFloat(8, 24));
		DFEVar nx = io.scalarInput("nx", dfeInt(32));

		// Extract 8 point window around current point
		DFEVar window[] = new DFEVar[9];
		int i = 0;
		for (int x=-1; x<=1; x++)
			for (int y=-1; y<=1; y++) {
				// Create a dynamic offset for y*nx + x. Need to specify min and max offsets which
				// we specify as min(0, maxOffset) and max(0, maxOffset)
				int maxOffset = y * nxMax + x;
				window[i++] = stream.offset(inStream, y * nx + x, Math.min(0, maxOffset), Math.max(0, maxOffset));
			}

		// Sum points in window and divide by 9 to average
		DFEVar sum = constant.var(dfeFloat(8, 24), 0);
		for (DFEVar dfeVar : window) {
			sum = sum + dfeVar;
		}

		DFEVar result = sum / 9;

		//Output
		io.output("outStream", result, dfeFloat(8, 24));
		io.output("counter", control.count.simpleCounter(32, 32), dfeUInt(32));
	}
}
