#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2013
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          35689
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "CpuMain"
#define MAXFILE_BUILD_DIR  "/home/emanuele.delsozzo/repo/MaxelerRTM/RTMFinalOptimized/RunRules/Simulation/maxfiles/CpuMain_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20130620
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(MemCtrlPro_TotalNumStreams, 3)
PARAM(MemCtrlPro_NumRdStreams, 2)
PARAM(MemCtrlPro_NumWrStreams, 1)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 384)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_Parity_Mode, 0)
PARAM(MemCtrlPro_ECC_Mode, 0)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 0)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 2)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 169)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif


#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "RTMKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(RTMKernel, Kernel)
MANAGER_NODE(cpu_to_lmem, PCIe_From_Host_fwd)
MANAGER_NODE(lmem_to_cpu, PCIe_To_Host_fwd)
MANAGER_NODE(addrgen_cmd_write_lmem, AddrGen)
MANAGER_NODE(cmd_write_lmem_0, Memory_Cmd)
MANAGER_NODE(write_lmem, To_Memory)
MANAGER_NODE(addrgen_cmd_read_lmem, AddrGen)
MANAGER_NODE(cmd_read_lmem_0, Memory_Cmd)
MANAGER_NODE(read_lmem, From_Memory)
MANAGER_NODE(addrgen_cmd_controller, AddrGen)
MANAGER_NODE(cmd_controller_0, Memory_Cmd)
MANAGER_NODE(controller, From_Memory)
MANAGER_NODE(dvv, PCIe_From_Host_fwd)
MANAGER_NODE(p, PCIe_From_Host_fwd)
MANAGER_NODE(pp, PCIe_From_Host_fwd)
MANAGER_NODE(px, PCIe_From_Host_fwd)
MANAGER_NODE(py, PCIe_From_Host_fwd)
MANAGER_NODE(scale, PCIe_From_Host_fwd)
MANAGER_NODE(source_container, PCIe_From_Host_fwd)
MANAGER_NODE(ppresult, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_10, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_17, DualAspectMux)
MANAGER_NODE(Stream_27, DualAspectMux)
MANAGER_NODE(Stream_30, DualAspectMux)
MANAGER_NODE(Stream_24, DualAspectMux)
MANAGER_NODE(Stream_42, DualAspectMux)
MANAGER_NODE(Stream_33, DualAspectMux)
MANAGER_NODE(Stream_36, DualAspectMux)
MANAGER_NODE(Stream_39, DualAspectMux)
MANAGER_NODE(Stream_47, DualAspectReg)
MANAGER_NODE(Stream_51, StreamPullPushAdapter)
MANAGER_NODE(Stream_91, StreamPullPushAdapter)
MANAGER_NODE(Stream_59, Fifo)
MANAGER_NODE(Stream_63, Fifo)
MANAGER_NODE(Stream_67, Fifo)
MANAGER_NODE(Stream_71, Fifo)
MANAGER_NODE(Stream_75, Fifo)
MANAGER_NODE(Stream_79, Fifo)
MANAGER_NODE(Stream_83, Fifo)
MANAGER_NODE(Stream_87, Fifo)
MANAGER_NODE(Stream_89, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(RTMKernel, controller, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, p, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, pp, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, dvv, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, source_container, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, px, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, py, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, scale, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(RTMKernel, ppresult, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(cpu_to_lmem, cpu_to_lmem, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(lmem_to_cpu, lmem_to_cpu, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_write_lmem_0, cmd_write_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(write_lmem, write_lmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_read_lmem_0, cmd_read_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(read_lmem, read_lmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_controller, addrgen_cmd_controller_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_controller_0, cmd_controller_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(controller, controller, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(dvv, dvv, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(p, p, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(pp, pp, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(px, px, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(py, py, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(scale, scale, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(source_container, source_container, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(ppresult, ppresult, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_17, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_17, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_27, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_27, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_30, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_30, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_24, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_24, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_42, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_42, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_33, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_33, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_36, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_36, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_39, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_39, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_47, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_47, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_51, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_51, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_91, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_91, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_59, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_59, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_63, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_63, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_67, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_67, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_71, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_71, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_75, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_75, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_79, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_79, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_83, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_83, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_87, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_87, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_89, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_89, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(cpu_to_lmem, cpu_to_lmem, Stream_10, input, 128)
MANAGER_STREAM(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, cmd_write_lmem_0, cmd_write_lmem_0, 64)
MANAGER_STREAM(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, cmd_read_lmem_0, cmd_read_lmem_0, 64)
MANAGER_STREAM(read_lmem, read_lmem, Stream_4, input, 1536)
MANAGER_STREAM(addrgen_cmd_controller, addrgen_cmd_controller_0, cmd_controller_0, cmd_controller_0, 64)
MANAGER_STREAM(controller, controller, Stream_17, input, 1536)
MANAGER_STREAM(dvv, dvv, Stream_24, input, 128)
MANAGER_STREAM(p, p, Stream_27, input, 128)
MANAGER_STREAM(pp, pp, Stream_30, input, 128)
MANAGER_STREAM(px, px, Stream_33, input, 128)
MANAGER_STREAM(py, py, Stream_36, input, 128)
MANAGER_STREAM(scale, scale, Stream_39, input, 128)
MANAGER_STREAM(source_container, source_container, Stream_42, input, 128)
MANAGER_STREAM(RTMKernel, ppresult, Stream_89, input, 32)
MANAGER_STREAM(Stream_10, output, Stream_51, input, 1536)
MANAGER_STREAM(Stream_4, output, lmem_to_cpu, lmem_to_cpu, 128)
MANAGER_STREAM(Stream_17, output, Stream_59, input, 32)
MANAGER_STREAM(Stream_27, output, Stream_63, input, 32)
MANAGER_STREAM(Stream_30, output, Stream_67, input, 32)
MANAGER_STREAM(Stream_24, output, Stream_71, input, 32)
MANAGER_STREAM(Stream_42, output, Stream_75, input, 32)
MANAGER_STREAM(Stream_33, output, Stream_79, input, 32)
MANAGER_STREAM(Stream_36, output, Stream_83, input, 32)
MANAGER_STREAM(Stream_39, output, Stream_87, input, 32)
MANAGER_STREAM(Stream_47, output, Stream_91, input, 128)
MANAGER_STREAM(Stream_51, output, write_lmem, write_lmem, 1536)
MANAGER_STREAM(Stream_91, output, ppresult, ppresult, 128)
MANAGER_STREAM(Stream_59, output, RTMKernel, controller, 32)
MANAGER_STREAM(Stream_63, output, RTMKernel, p, 32)
MANAGER_STREAM(Stream_67, output, RTMKernel, pp, 32)
MANAGER_STREAM(Stream_71, output, RTMKernel, dvv, 32)
MANAGER_STREAM(Stream_75, output, RTMKernel, source_container, 32)
MANAGER_STREAM(Stream_79, output, RTMKernel, px, 32)
MANAGER_STREAM(Stream_83, output, RTMKernel, py, 32)
MANAGER_STREAM(Stream_87, output, RTMKernel, scale, 32)
MANAGER_STREAM(Stream_89, output, Stream_47, input, 32)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(RTMKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(RTMKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(RTMKernel, RTMKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(RTMKernel, controller, 0)
DEBUG_INPUT_BITS(RTMKernel, p, 1)
DEBUG_INPUT_BITS(RTMKernel, pp, 2)
DEBUG_INPUT_BITS(RTMKernel, dvv, 3)
DEBUG_INPUT_BITS(RTMKernel, source_container, 4)
DEBUG_INPUT_BITS(RTMKernel, px, 5)
DEBUG_INPUT_BITS(RTMKernel, py, 6)
DEBUG_INPUT_BITS(RTMKernel, scale, 7)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(RTMKernel, ppresult, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cpu_to_lmem, PCIePullSourceSyncMax3, "cpu_to_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_write_lmem, AddressGeneratorSync, "addrgen_cmd_write_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_read_lmem, AddressGeneratorSync, "addrgen_cmd_read_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_controller, AddressGeneratorSync, "addrgen_cmd_controller", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(dvv, PCIePullSourceSyncMax3, "dvv")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(p, PCIePullSourceSyncMax3, "p")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pp, PCIePullSourceSyncMax3, "pp")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(px, PCIePullSourceSyncMax3, "px")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(py, PCIePullSourceSyncMax3, "py")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(scale, PCIePullSourceSyncMax3, "scale")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(source_container, PCIePullSourceSyncMax3, "source_container")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, DualAspectRegSync, "Stream_10", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, DualAspectMuxSync, "Stream_17", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, DualAspectMuxSync, "Stream_24", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_27, DualAspectMuxSync, "Stream_27", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_30, DualAspectMuxSync, "Stream_30", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_33, DualAspectMuxSync, "Stream_33", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_36, DualAspectMuxSync, "Stream_36", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_39, DualAspectMuxSync, "Stream_39", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_42, DualAspectMuxSync, "Stream_42", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_51, PullToPushAdapterSync, "Stream_51")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(lmem_to_cpu, PCIePushSinkSyncMax3, "lmem_to_cpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_59, FifoPushToPullSync, "Stream_59", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_71, FifoPushToPullSync, "Stream_71", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_63, FifoPushToPullSync, "Stream_63", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_67, FifoPushToPullSync, "Stream_67", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_79, FifoPushToPullSync, "Stream_79", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_83, FifoPushToPullSync, "Stream_83", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_87, FifoPushToPullSync, "Stream_87", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_75, FifoPushToPullSync, "Stream_75", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(RTMKernel, RTMKernel, "RTMKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_89, FifoPushToPullSync, "Stream_89", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_47, DualAspectRegSync, "Stream_47", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_91, PullToPushAdapterSync, "Stream_91")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ppresult, PCIePushSinkSyncMax3, "ppresult")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_write_lmem_0, MemoryProxyCommandSinkSync, "cmd_write_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(read_lmem, MemoryProxyPullSourceSync, "read_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_read_lmem_0, MemoryProxyCommandSinkSync, "cmd_read_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(controller, MemoryProxyPullSourceSync, "controller")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_controller_0, MemoryProxyCommandSinkSync, "cmd_controller_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(write_lmem, MemoryProxyPushSinkSync, "write_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax3Config(8,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 8, 2, 0, 0, 0, 0, 0, 169)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "01fd7b7693b6d1750b03c59221a589451106f6ca3f9b33b032eaaf8aec794a90")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_done, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_empty, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_read, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 24, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_ctld_request, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_fill_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_flush_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_flush_start_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_full_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(RTMKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_write_lmem_0, setup, "cmd_write_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(read_lmem, setup, "read_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_read_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_read_lmem_0, setup, "cmd_read_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(controller, setup, "controller", MemoryControllerPro::getDefaultMemoryController(), "cmd_controller_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_controller_0, setup, "cmd_controller_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(write_lmem, setup, "write_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_write_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(cpu_to_lmem, STREAM_FROM_HOST, 0)
PCIE_STREAM(dvv, STREAM_FROM_HOST, 1)
PCIE_STREAM(p, STREAM_FROM_HOST, 2)
PCIE_STREAM(pp, STREAM_FROM_HOST, 3)
PCIE_STREAM(px, STREAM_FROM_HOST, 4)
PCIE_STREAM(py, STREAM_FROM_HOST, 5)
PCIE_STREAM(scale, STREAM_FROM_HOST, 6)
PCIE_STREAM(source_container, STREAM_FROM_HOST, 7)
PCIE_STREAM(lmem_to_cpu, STREAM_TO_HOST, 0)
PCIE_STREAM(ppresult, STREAM_TO_HOST, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_write_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_read_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_controller, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(read_lmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(controller, 1, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(write_lmem, 2, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1))
REG(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8))
REG(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33))
REG(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1))
REG(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8))
REG(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33))
REG(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32))
REG(addrgen_cmd_controller._Addr_En, 0x26, 1, hwBits(1))
REG(addrgen_cmd_controller._CmdSize, 0x27, 1, hwBits(8))
REG(addrgen_cmd_controller._BlockSize_X, 0x28, 5, hwBits(33))
REG(addrgen_cmd_controller._Wrap_X, 0x2d, 4, hwBits(32))
REG(addrgen_cmd_controller._Start_X_Addr, 0x31, 4, hwBits(32))
REG(addrgen_cmd_controller._Offset_0, 0x35, 4, hwBits(32))
REG(RTMKernel.io_controller_force_disabled, 0x39, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_p_force_disabled, 0x3a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_pp_force_disabled, 0x3b, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_dvv_force_disabled, 0x3c, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_source_container_force_disabled, 0x3d, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_px_force_disabled, 0x3e, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_py_force_disabled, 0x3f, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.io_scale_force_disabled, 0x40, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.c_0, 0x41, 4, hwFloat(8, 24))
REG(RTMKernel.c_1_0, 0x45, 4, hwFloat(8, 24))
REG(RTMKernel.c_1_1, 0x49, 4, hwFloat(8, 24))
REG(RTMKernel.c_1_2, 0x4d, 4, hwFloat(8, 24))
REG(RTMKernel.c_1_3, 0x51, 4, hwFloat(8, 24))
REG(RTMKernel.c_1_4, 0x55, 4, hwFloat(8, 24))
REG(RTMKernel.c_2_0, 0x59, 4, hwFloat(8, 24))
REG(RTMKernel.c_2_1, 0x5d, 4, hwFloat(8, 24))
REG(RTMKernel.c_2_2, 0x61, 4, hwFloat(8, 24))
REG(RTMKernel.c_2_3, 0x65, 4, hwFloat(8, 24))
REG(RTMKernel.c_2_4, 0x69, 4, hwFloat(8, 24))
REG(RTMKernel.c_3_0, 0x6d, 4, hwFloat(8, 24))
REG(RTMKernel.c_3_1, 0x71, 4, hwFloat(8, 24))
REG(RTMKernel.c_3_2, 0x75, 4, hwFloat(8, 24))
REG(RTMKernel.c_3_3, 0x79, 4, hwFloat(8, 24))
REG(RTMKernel.c_3_4, 0x7d, 4, hwFloat(8, 24))
REG(RTMKernel.io_ppresult_force_disabled, 0x81, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(RTMKernel.run_cycle_count, 0x82, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(RTMKernel.current_run_cycle_count, 0x88, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(RTMKernel.dbg_ctld_almost_empty, 0x8e, 1, hwBits(8))
REG(RTMKernel.dbg_ctld_done, 0x8f, 1, hwBits(8))
REG(RTMKernel.dbg_ctld_empty, 0x90, 1, hwBits(8))
REG(RTMKernel.dbg_ctld_read, 0x91, 1, hwBits(8))
REG(RTMKernel.dbg_ctld_read_pipe_dbg, 0x92, 3, hwBits(24))
REG(RTMKernel.dbg_ctld_request, 0x95, 1, hwBits(8))
REG(RTMKernel.dbg_done_out, 0x96, 1, hwBits(1))
REG(RTMKernel.dbg_fill_level, 0x97, 1, hwBits(8))
REG(RTMKernel.dbg_flush_level, 0x98, 1, hwBits(8))
REG(RTMKernel.dbg_flush_start, 0x99, 1, hwBits(1))
REG(RTMKernel.dbg_flush_start_level, 0x9a, 1, hwBits(8))
REG(RTMKernel.dbg_flushing, 0x9b, 1, hwBits(1))
REG(RTMKernel.dbg_full_level, 0x9c, 1, hwBits(8))
REG(RTMKernel.dbg_out_stall, 0x9d, 1, hwBits(1))
REG(RTMKernel.dbg_out_valid, 0x9e, 1, hwBits(1))
REG(RTMKernel.dbg_stall_vector, 0x9f, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xa0, 1, hwBits(3))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xa1, 1, hwBits(3))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0xa2, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0xa3, 1, hwBits(8))
REG(ifpga.ifpga_ctrl, 0xa4, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0xa5, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._Addr_En, 0x26, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._CmdSize, 0x27, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._BlockSize_X, 0x28, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._Wrap_X, 0x2d, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._Start_X_Addr, 0x31, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_controller._Offset_0, 0x35, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.io_controller_force_disabled, 0x39, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_p_force_disabled, 0x3a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_pp_force_disabled, 0x3b, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_dvv_force_disabled, 0x3c, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_source_container_force_disabled, 0x3d, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_px_force_disabled, 0x3e, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_py_force_disabled, 0x3f, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.io_scale_force_disabled, 0x40, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.c_0, 0x41, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_1_0, 0x45, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_1_1, 0x49, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_1_2, 0x4d, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_1_3, 0x51, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_1_4, 0x55, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_2_0, 0x59, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_2_1, 0x5d, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_2_2, 0x61, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_2_3, 0x65, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_2_4, 0x69, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_3_0, 0x6d, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_3_1, 0x71, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_3_2, 0x75, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_3_3, 0x79, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.c_3_4, 0x7d, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.io_ppresult_force_disabled, 0x81, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(RTMKernel.run_cycle_count, 0x82, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(RTMKernel.current_run_cycle_count, 0x88, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_almost_empty, 0x8e, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_done, 0x8f, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_empty, 0x90, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_read, 0x91, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_read_pipe_dbg, 0x92, 3, hwBits(24), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_ctld_request, 0x95, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_done_out, 0x96, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_fill_level, 0x97, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_flush_level, 0x98, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_flush_start, 0x99, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_flush_start_level, 0x9a, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_flushing, 0x9b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_full_level, 0x9c, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_out_stall, 0x9d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_out_valid, 0x9e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(RTMKernel.dbg_stall_vector, 0x9f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xa0, 1, hwBits(3), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xa1, 1, hwBits(3), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0xa2, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0xa3, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(ifpga.ifpga_ctrl, 0xa4, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0xa5, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("01fd7b7693b6d1750b03c59221a589451106f6ca3f9b33b032eaaf8aec794a90")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(max3_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_write_lmem, addrgen_cmd_write_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_read_lmem, addrgen_cmd_read_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_controller, addrgen_cmd_controller., LINEAR_1D)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_read_lmem, read_lmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_controller, controller, 0, 1, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_write_lmem, write_lmem, 0, 2, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME CpuMain
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_CpuMain_H
#define SLIC_DECLARATIONS_CpuMain_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 */
void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	const void *instream_cpu_to_lmem; /**<  [in] The stream should be of size param_nbytes bytes. */
} CpuMain_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 */
void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	void *outstream_lmem_to_cpu; /**<  [out] The stream should be of size param_nbytes bytes. */
} CpuMain_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_controllerSize Interface Parameter "controllerSize".
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_sizepxy Interface Parameter "sizepxy".
 * \param [in] param_stencilSize Interface Parameter "stencilSize".
 * \param [in] instream_dvv The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_p The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_pp The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_px The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 * \param [in] instream_py The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 * \param [in] instream_scale The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_source_container The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_ppresult The stream should be of size (param_size * 4) bytes.
 */
void CpuMain(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_controllerSize,
	int64_t param_size,
	int64_t param_sizepxy,
	int64_t param_stencilSize,
	const float *instream_dvv,
	const float *instream_p,
	const float *instream_pp,
	const float *instream_px,
	const float *instream_py,
	const int32_t *instream_scale,
	const float *instream_source_container,
	float *outstream_ppresult);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_controllerSize Interface Parameter "controllerSize".
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_sizepxy Interface Parameter "sizepxy".
 * \param [in] param_stencilSize Interface Parameter "stencilSize".
 * \param [in] instream_dvv The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_p The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_pp The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_px The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 * \param [in] instream_py The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 * \param [in] instream_scale The stream should be of size (param_size * 4) bytes.
 * \param [in] instream_source_container The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_ppresult The stream should be of size (param_size * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_nonblock(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_controllerSize,
	int64_t param_size,
	int64_t param_sizepxy,
	int64_t param_stencilSize,
	const float *instream_dvv,
	const float *instream_p,
	const float *instream_pp,
	const float *instream_px,
	const float *instream_py,
	const int32_t *instream_scale,
	const float *instream_source_container,
	float *outstream_ppresult);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	double param_c_0; /**<  [in] Interface Parameter "c_0". */
	double param_c_1_0; /**<  [in] Interface Parameter "c_1_0". */
	double param_c_1_1; /**<  [in] Interface Parameter "c_1_1". */
	double param_c_1_2; /**<  [in] Interface Parameter "c_1_2". */
	double param_c_1_3; /**<  [in] Interface Parameter "c_1_3". */
	double param_c_1_4; /**<  [in] Interface Parameter "c_1_4". */
	double param_c_2_0; /**<  [in] Interface Parameter "c_2_0". */
	double param_c_2_1; /**<  [in] Interface Parameter "c_2_1". */
	double param_c_2_2; /**<  [in] Interface Parameter "c_2_2". */
	double param_c_2_3; /**<  [in] Interface Parameter "c_2_3". */
	double param_c_2_4; /**<  [in] Interface Parameter "c_2_4". */
	double param_c_3_0; /**<  [in] Interface Parameter "c_3_0". */
	double param_c_3_1; /**<  [in] Interface Parameter "c_3_1". */
	double param_c_3_2; /**<  [in] Interface Parameter "c_3_2". */
	double param_c_3_3; /**<  [in] Interface Parameter "c_3_3". */
	double param_c_3_4; /**<  [in] Interface Parameter "c_3_4". */
	int64_t param_controllerSize; /**<  [in] Interface Parameter "controllerSize". */
	int64_t param_size; /**<  [in] Interface Parameter "size". */
	int64_t param_sizepxy; /**<  [in] Interface Parameter "sizepxy". */
	int64_t param_stencilSize; /**<  [in] Interface Parameter "stencilSize". */
	const float *instream_dvv; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	const float *instream_p; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	const float *instream_pp; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	const float *instream_px; /**<  [in] The stream should be of size ((param_size * param_stencilSize) * 4) bytes. */
	const float *instream_py; /**<  [in] The stream should be of size ((param_size * param_stencilSize) * 4) bytes. */
	const int32_t *instream_scale; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	const float *instream_source_container; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	float *outstream_ppresult; /**<  [out] The stream should be of size (param_size * 4) bytes. */
} CpuMain_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* CpuMain_init(void);

/* Error handling functions */
int CpuMain_has_errors(void);
const char* CpuMain_get_errors(void);
void CpuMain_clear_errors(void);
/* Free statically allocated maxfile data */
void CpuMain_free(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_CpuMain_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(RTMKernel, 0, NodeInputMappedReg, "Scalar input (io_controller_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 2, NodeInput, "Input(controller)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 147, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 164, NodeFIFO, "FIFO(158)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 151, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 148, NodeInputMappedReg, "Scalar input (io_ppresult_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 149, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 152, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 150, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 153, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 206, NodeFIFO, "FIFO(88)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 3, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 7, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 4, NodeInputMappedReg, "Scalar input (io_p_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 5, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 8, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 6, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 9, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 10, NodeInput, "Input(p)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 174, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 208, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 209, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 210, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 211, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 212, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 213, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 214, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 215, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 216, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 163, NodePO2FPMult, "PO2FPMult_N1", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:869)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 170, NodeFIFO, "FIFO(142)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 11, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 166, NodeFIFO, "FIFO(158)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 15, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 167, NodeFIFO, "FIFO(31)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 12, NodeInputMappedReg, "Scalar input (io_pp_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 13, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 16, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 14, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 17, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 18, NodeInput, "Input(pp)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 41, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 168, NodeFIFO, "FIFO(158)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 45, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 42, NodeInputMappedReg, "Scalar input (io_scale_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 43, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 46, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 44, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 47, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 169, NodeFIFO, "FIFO(31)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 48, NodeInput, "Input(scale)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 65, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:50)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 68, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:812)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 19, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 171, NodeFIFO, "FIFO(158)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 23, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 20, NodeInputMappedReg, "Scalar input (io_dvv_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 21, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 24, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 22, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 172, NodeFIFO, "FIFO(43)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 25, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 26, NodeInput, "Input(dvv)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 49, NodeInputMappedReg, "Scalar input (c_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:30)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 69, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 50, NodeInputMappedReg, "Scalar input (c_1_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:32)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 70, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:54)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 71, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:54)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 72, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:54)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 73, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:54)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 74, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 51, NodeInputMappedReg, "Scalar input (c_1_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:33)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 75, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:55)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 76, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:55)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 77, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:55)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 78, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:55)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 79, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 52, NodeInputMappedReg, "Scalar input (c_1_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:34)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 80, NodeStreamOffset, "stream offset: 3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:56)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 81, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:56)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 82, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:56)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 83, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:56)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 84, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 53, NodeInputMappedReg, "Scalar input (c_1_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:35)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 85, NodeStreamOffset, "stream offset: 4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:57)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 86, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:57)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 87, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:57)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 88, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:57)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 89, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 54, NodeInputMappedReg, "Scalar input (c_1_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:36)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 90, NodeStreamOffset, "stream offset: 5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:58)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 91, NodeStreamOffset, "stream offset: -5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:58)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 92, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:58)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 93, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:58)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 94, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 55, NodeInputMappedReg, "Scalar input (c_2_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:38)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 38, NodeInputMappedReg, "Scalar input (io_py_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 39, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 40, NodeInput, "Input(py)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 95, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 183, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 96, NodeStreamOffset, "stream offset: -6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 97, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 98, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 99, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 56, NodeInputMappedReg, "Scalar input (c_2_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:39)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 217, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 100, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:60)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 218, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 101, NodeStreamOffset, "stream offset: -7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:60)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 102, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:60)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 103, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:60)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 104, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 57, NodeInputMappedReg, "Scalar input (c_2_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:40)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 219, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 105, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:61)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 220, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 106, NodeStreamOffset, "stream offset: -8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:61)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 107, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:61)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 108, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:61)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 109, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 58, NodeInputMappedReg, "Scalar input (c_2_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:41)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 221, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 222, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 110, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:62)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 223, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 111, NodeStreamOffset, "stream offset: -9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:62)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 112, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:62)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 113, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:62)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 114, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 59, NodeInputMappedReg, "Scalar input (c_2_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:42)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 115, NodeStreamOffset, "stream offset: -10", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:63)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 116, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:63)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 117, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:63)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 192, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 118, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 60, NodeInputMappedReg, "Scalar input (c_3_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:44)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 35, NodeInputMappedReg, "Scalar input (io_px_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 36, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 37, NodeInput, "Input(px)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 119, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:64)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 193, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 120, NodeStreamOffset, "stream offset: -6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:64)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 121, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:64)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 122, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:64)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 123, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 61, NodeInputMappedReg, "Scalar input (c_3_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:45)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 224, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 124, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 225, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 125, NodeStreamOffset, "stream offset: -7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 126, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 127, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 128, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 62, NodeInputMappedReg, "Scalar input (c_3_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:46)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 226, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 129, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 227, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 130, NodeStreamOffset, "stream offset: -8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 131, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 132, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 133, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 63, NodeInputMappedReg, "Scalar input (c_3_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 228, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 229, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 134, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 230, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 135, NodeStreamOffset, "stream offset: -9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 136, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 137, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 138, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 64, NodeInputMappedReg, "Scalar input (c_3_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:48)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 139, NodeStreamOffset, "stream offset: -10", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:68)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 140, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:68)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 141, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:68)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 202, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 142, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 143, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 144, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 27, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 203, NodeFIFO, "FIFO(158)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 31, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 28, NodeInputMappedReg, "Scalar input (io_source_container_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 29, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 32, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 30, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 33, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 204, NodeFIFO, "FIFO(63)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 34, NodeInput, "Input(source_container)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 145, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 205, NodeFIFO, "FIFO(44)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 146, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:71)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 154, NodeOutput, "Output(ppresult)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(RTMKernel, 158, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 231, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 156, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 157, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 207, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 159, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 161, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 162, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
PHOTON_NODE_DATA(RTMKernel, 160, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:38)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int CpuMain_has_errors(void)
{	return stored_has_error; }
const char* CpuMain_get_errors(void)
{	return stored_error; }
void CpuMain_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static void CpuMain_static_init(void) 
{
	stored_maxfile = CpuMain_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void CpuMain_free(void)
{
	if(stored_engine != NULL)
		max_unload(stored_engine);
	if(stored_maxfile != NULL)
		max_file_free(stored_maxfile);
	if(stored_error != NULL)
		free(stored_error);
}



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_writeLMem_nonblock(param_address, param_nbytes, instream_cpu_to_lmem);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	CpuMain_writeLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.instream_cpu_to_lmem = instream_cpu_to_lmem;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_writeLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_writeLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_writeLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "RTMKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream cpu_to_lmem */
	size_t instream_size_cpu_to_lmem = param_nbytes;
	if (instream_size_cpu_to_lmem > 0) {
		max_queue_input(actions, "cpu_to_lmem", interface_actions->instream_cpu_to_lmem,instream_size_cpu_to_lmem);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream cpu_to_lmem */
	
	max_ignore_stream(actions, "dvv" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "p" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "pp" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "ppresult" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "px" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "py" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "scale" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "source_container" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_lmem(actions, "controller" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "write_lmem" */
	size_t lmem_address_write_lmem = param_address;
	size_t lmem_arr_size_write_lmem = param_nbytes;
	int lmem_burst_size_write_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_address_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_write_lmem, lmem_burst_size_write_lmem );
	}
	if ( (lmem_arr_size_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_arr_size_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_write_lmem, lmem_burst_size_write_lmem );
	}
	if (lmem_arr_size_write_lmem > 0) {
		max_lmem_linear(actions, "write_lmem", lmem_address_write_lmem, lmem_arr_size_write_lmem);
	} else {
		max_ignore_lmem(actions, "write_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "write_lmem" */
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_readLMem_nonblock(param_address, param_nbytes, outstream_lmem_to_cpu);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	CpuMain_readLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.outstream_lmem_to_cpu = outstream_lmem_to_cpu;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_readLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_readLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_readLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "RTMKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "RTMKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "dvv" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream lmem_to_cpu */
	size_t outstream_size_lmem_to_cpu = param_nbytes;
	if (outstream_size_lmem_to_cpu > 0) {
		max_queue_output(actions, "lmem_to_cpu", interface_actions->outstream_lmem_to_cpu,outstream_size_lmem_to_cpu);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream lmem_to_cpu */
	
	max_ignore_stream(actions, "p" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "pp" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "ppresult" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "px" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "py" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "scale" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "source_container" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_lmem(actions, "controller" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "read_lmem" */
	size_t lmem_address_read_lmem = param_address;
	size_t lmem_arr_size_read_lmem = param_nbytes;
	int lmem_burst_size_read_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_address_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_read_lmem, lmem_burst_size_read_lmem );
	}
	if ( (lmem_arr_size_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_arr_size_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_read_lmem, lmem_burst_size_read_lmem );
	}
	if (lmem_arr_size_read_lmem > 0) {
		max_lmem_linear(actions, "read_lmem", lmem_address_read_lmem, lmem_arr_size_read_lmem);
	} else {
		max_ignore_lmem(actions, "read_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "read_lmem" */
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_controllerSize,
	int64_t param_size,
	int64_t param_sizepxy,
	int64_t param_stencilSize,
	const float *instream_dvv,
	const float *instream_p,
	const float *instream_pp,
	const float *instream_px,
	const float *instream_py,
	const int32_t *instream_scale,
	const float *instream_source_container,
	float *outstream_ppresult)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_nonblock(param_c_0, param_c_1_0, param_c_1_1, param_c_1_2, param_c_1_3, param_c_1_4, param_c_2_0, param_c_2_1, param_c_2_2, param_c_2_3, param_c_2_4, param_c_3_0, param_c_3_1, param_c_3_2, param_c_3_3, param_c_3_4, param_controllerSize, param_size, param_sizepxy, param_stencilSize, instream_dvv, instream_p, instream_pp, instream_px, instream_py, instream_scale, instream_source_container, outstream_ppresult);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_nonblock(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_controllerSize,
	int64_t param_size,
	int64_t param_sizepxy,
	int64_t param_stencilSize,
	const float *instream_dvv,
	const float *instream_p,
	const float *instream_pp,
	const float *instream_px,
	const float *instream_py,
	const int32_t *instream_scale,
	const float *instream_source_container,
	float *outstream_ppresult)
{
	CpuMain_actions_t interface_actions;
	interface_actions.param_c_0 = param_c_0;
	interface_actions.param_c_1_0 = param_c_1_0;
	interface_actions.param_c_1_1 = param_c_1_1;
	interface_actions.param_c_1_2 = param_c_1_2;
	interface_actions.param_c_1_3 = param_c_1_3;
	interface_actions.param_c_1_4 = param_c_1_4;
	interface_actions.param_c_2_0 = param_c_2_0;
	interface_actions.param_c_2_1 = param_c_2_1;
	interface_actions.param_c_2_2 = param_c_2_2;
	interface_actions.param_c_2_3 = param_c_2_3;
	interface_actions.param_c_2_4 = param_c_2_4;
	interface_actions.param_c_3_0 = param_c_3_0;
	interface_actions.param_c_3_1 = param_c_3_1;
	interface_actions.param_c_3_2 = param_c_3_2;
	interface_actions.param_c_3_3 = param_c_3_3;
	interface_actions.param_c_3_4 = param_c_3_4;
	interface_actions.param_controllerSize = param_controllerSize;
	interface_actions.param_size = param_size;
	interface_actions.param_sizepxy = param_sizepxy;
	interface_actions.param_stencilSize = param_stencilSize;
	interface_actions.instream_dvv = instream_dvv;
	interface_actions.instream_p = instream_p;
	interface_actions.instream_pp = instream_pp;
	interface_actions.instream_px = instream_px;
	interface_actions.instream_py = instream_py;
	interface_actions.instream_scale = instream_scale;
	interface_actions.instream_source_container = instream_source_container;
	interface_actions.outstream_ppresult = outstream_ppresult;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	double param_c_0 = interface_actions->param_c_0;
	
	double param_c_1_0 = interface_actions->param_c_1_0;
	
	double param_c_1_1 = interface_actions->param_c_1_1;
	
	double param_c_1_2 = interface_actions->param_c_1_2;
	
	double param_c_1_3 = interface_actions->param_c_1_3;
	
	double param_c_1_4 = interface_actions->param_c_1_4;
	
	double param_c_2_0 = interface_actions->param_c_2_0;
	
	double param_c_2_1 = interface_actions->param_c_2_1;
	
	double param_c_2_2 = interface_actions->param_c_2_2;
	
	double param_c_2_3 = interface_actions->param_c_2_3;
	
	double param_c_2_4 = interface_actions->param_c_2_4;
	
	double param_c_3_0 = interface_actions->param_c_3_0;
	
	double param_c_3_1 = interface_actions->param_c_3_1;
	
	double param_c_3_2 = interface_actions->param_c_3_2;
	
	double param_c_3_3 = interface_actions->param_c_3_3;
	
	double param_c_3_4 = interface_actions->param_c_3_4;
	
	int64_t param_controllerSize = interface_actions->param_controllerSize;
	
	int64_t param_size = interface_actions->param_size;
	
	int64_t param_sizepxy = interface_actions->param_sizepxy;
	
	int64_t param_stencilSize = interface_actions->param_stencilSize;
	

	/* temporary variables */
	int64_t tmp_0 = (param_size * 4);
	int64_t tmp_1 = (param_size * 4);
	int64_t tmp_2 = (param_size * 4);
	int64_t tmp_3 = (param_size * 4);
	int64_t tmp_4 = ((param_size * param_stencilSize) * 4);
	int64_t tmp_5 = ((param_size * param_stencilSize) * 4);
	int64_t tmp_6 = (param_size * 4);
	int64_t tmp_7 = (param_size * 4);
	int64_t tmp_8 = (param_controllerSize * 4);

	/* code for scalar RTMKernel.run_cycle_count */
	uint64_t ticks_RTMKernel = param_sizepxy;
	max_set_ticks(actions, "RTMKernel", param_sizepxy);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.run_cycle_count*/
	
	/* code for scalar RTMKernel.c_0 */
	double inscalar_RTMKernel_c_0 = param_c_0;
	max_set_double(actions, "RTMKernel", "c_0", inscalar_RTMKernel_c_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_0*/
	
	/* code for scalar RTMKernel.c_1_0 */
	double inscalar_RTMKernel_c_1_0 = param_c_1_0;
	max_set_double(actions, "RTMKernel", "c_1_0", inscalar_RTMKernel_c_1_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_1_0*/
	
	/* code for scalar RTMKernel.c_1_1 */
	double inscalar_RTMKernel_c_1_1 = param_c_1_1;
	max_set_double(actions, "RTMKernel", "c_1_1", inscalar_RTMKernel_c_1_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_1_1*/
	
	/* code for scalar RTMKernel.c_1_2 */
	double inscalar_RTMKernel_c_1_2 = param_c_1_2;
	max_set_double(actions, "RTMKernel", "c_1_2", inscalar_RTMKernel_c_1_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_1_2*/
	
	/* code for scalar RTMKernel.c_1_3 */
	double inscalar_RTMKernel_c_1_3 = param_c_1_3;
	max_set_double(actions, "RTMKernel", "c_1_3", inscalar_RTMKernel_c_1_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_1_3*/
	
	/* code for scalar RTMKernel.c_1_4 */
	double inscalar_RTMKernel_c_1_4 = param_c_1_4;
	max_set_double(actions, "RTMKernel", "c_1_4", inscalar_RTMKernel_c_1_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_1_4*/
	
	/* code for scalar RTMKernel.c_2_0 */
	double inscalar_RTMKernel_c_2_0 = param_c_2_0;
	max_set_double(actions, "RTMKernel", "c_2_0", inscalar_RTMKernel_c_2_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_2_0*/
	
	/* code for scalar RTMKernel.c_2_1 */
	double inscalar_RTMKernel_c_2_1 = param_c_2_1;
	max_set_double(actions, "RTMKernel", "c_2_1", inscalar_RTMKernel_c_2_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_2_1*/
	
	/* code for scalar RTMKernel.c_2_2 */
	double inscalar_RTMKernel_c_2_2 = param_c_2_2;
	max_set_double(actions, "RTMKernel", "c_2_2", inscalar_RTMKernel_c_2_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_2_2*/
	
	/* code for scalar RTMKernel.c_2_3 */
	double inscalar_RTMKernel_c_2_3 = param_c_2_3;
	max_set_double(actions, "RTMKernel", "c_2_3", inscalar_RTMKernel_c_2_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_2_3*/
	
	/* code for scalar RTMKernel.c_2_4 */
	double inscalar_RTMKernel_c_2_4 = param_c_2_4;
	max_set_double(actions, "RTMKernel", "c_2_4", inscalar_RTMKernel_c_2_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_2_4*/
	
	/* code for scalar RTMKernel.c_3_0 */
	double inscalar_RTMKernel_c_3_0 = param_c_3_0;
	max_set_double(actions, "RTMKernel", "c_3_0", inscalar_RTMKernel_c_3_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_3_0*/
	
	/* code for scalar RTMKernel.c_3_1 */
	double inscalar_RTMKernel_c_3_1 = param_c_3_1;
	max_set_double(actions, "RTMKernel", "c_3_1", inscalar_RTMKernel_c_3_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_3_1*/
	
	/* code for scalar RTMKernel.c_3_2 */
	double inscalar_RTMKernel_c_3_2 = param_c_3_2;
	max_set_double(actions, "RTMKernel", "c_3_2", inscalar_RTMKernel_c_3_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_3_2*/
	
	/* code for scalar RTMKernel.c_3_3 */
	double inscalar_RTMKernel_c_3_3 = param_c_3_3;
	max_set_double(actions, "RTMKernel", "c_3_3", inscalar_RTMKernel_c_3_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_3_3*/
	
	/* code for scalar RTMKernel.c_3_4 */
	double inscalar_RTMKernel_c_3_4 = param_c_3_4;
	max_set_double(actions, "RTMKernel", "c_3_4", inscalar_RTMKernel_c_3_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar RTMKernel.c_3_4*/
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream dvv */
	size_t instream_size_dvv = tmp_2;
	if (instream_size_dvv > 0) {
		max_queue_input(actions, "dvv", interface_actions->instream_dvv,instream_size_dvv);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream dvv */
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream p */
	size_t instream_size_p = tmp_0;
	if (instream_size_p > 0) {
		max_queue_input(actions, "p", interface_actions->instream_p,instream_size_p);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream p */
	
	/* code for stream pp */
	size_t instream_size_pp = tmp_1;
	if (instream_size_pp > 0) {
		max_queue_input(actions, "pp", interface_actions->instream_pp,instream_size_pp);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream pp */
	
	/* code for stream px */
	size_t instream_size_px = tmp_4;
	if (instream_size_px > 0) {
		max_queue_input(actions, "px", interface_actions->instream_px,instream_size_px);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream px */
	
	/* code for stream py */
	size_t instream_size_py = tmp_5;
	if (instream_size_py > 0) {
		max_queue_input(actions, "py", interface_actions->instream_py,instream_size_py);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream py */
	
	/* code for stream scale */
	size_t instream_size_scale = tmp_6;
	if (instream_size_scale > 0) {
		max_queue_input(actions, "scale", interface_actions->instream_scale,instream_size_scale);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream scale */
	
	/* code for stream source_container */
	size_t instream_size_source_container = tmp_3;
	if (instream_size_source_container > 0) {
		max_queue_input(actions, "source_container", interface_actions->instream_source_container,instream_size_source_container);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream source_container */
	
	/* code for stream ppresult */
	size_t outstream_size_ppresult = tmp_7;
	if (outstream_size_ppresult > 0) {
		max_queue_output(actions, "ppresult", interface_actions->outstream_ppresult,outstream_size_ppresult);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream ppresult */
	
	/* code for linear memory-stream "controller" */
	size_t lmem_address_controller = 0;
	size_t lmem_arr_size_controller = tmp_8;
	int lmem_burst_size_controller = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_controller % lmem_burst_size_controller) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem controller parameter 'lmem_address_controller' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_controller, lmem_burst_size_controller );
	}
	if ( (lmem_arr_size_controller % lmem_burst_size_controller) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem controller parameter 'lmem_arr_size_controller' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_controller, lmem_burst_size_controller );
	}
	if (lmem_arr_size_controller > 0) {
		max_lmem_linear(actions, "controller", lmem_address_controller, lmem_arr_size_controller);
	} else {
		max_ignore_lmem(actions, "controller");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "controller" */
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4Kc3RhdGljIG1heF9maWxlX3QgKnN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKc3RhdGljIG1heF9lbmdpbmVfdCAqc3RvcmVkX2VuZ2luZSA9IE5VTEw7CnN0YXRpYyBj
aGFyICpzdG9yZWRfZXJyb3IgPSBOVUxMOwpzdGF0aWMgaW50IHN0b3JlZF9oYXNfZXJyb3IgPSAw
OwpzdGF0aWMgcHRocmVhZF9vbmNlX3Qgc2xpY19ic19pc19pbml0aWFsaXNlZCA9IFBUSFJFQURf
T05DRV9JTklUOwoKc3RhdGljIHZvaWQgc2V0X2Vycm9yKGNvbnN0IGNoYXIgKmVycm9yX3N0cikK
ewoJc3RvcmVkX2hhc19lcnJvciA9IDE7IAoJaWYoc3RvcmVkX2Vycm9yID09IE5VTEwpIHsKCQlz
dG9yZWRfZXJyb3IgPSBzdHJkdXAoZXJyb3Jfc3RyKTsKCX0gZWxzZSB7CgkJY2hhciAqbmVyciA9
IG1hbGxvYyhzdHJsZW4oc3RvcmVkX2Vycm9yKSArIHN0cmxlbihlcnJvcl9zdHIpICsgMik7CgkJ
c3ByaW50ZihuZXJyLCAiJXNcbiVzIiwgc3RvcmVkX2Vycm9yLCBlcnJvcl9zdHIpOwoJCWZyZWUo
c3RvcmVkX2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBuZXJyOwoJfQp9CnN0YXRpYyB2b2lkIHNl
dF9lcnJvcl9hbmRfZnJlZShjaGFyICplcnJvcl9zdHIpewoJc2V0X2Vycm9yKGVycm9yX3N0cik7
CglmcmVlKGVycm9yX3N0cik7Cn0KaW50IENwdU1haW5faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVy
biBzdG9yZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIENwdU1haW5fZ2V0X2Vycm9ycyh2b2lk
KQp7CXJldHVybiBzdG9yZWRfZXJyb3I7IH0Kdm9pZCBDcHVNYWluX2NsZWFyX2Vycm9ycyh2b2lk
KQp7CglmcmVlKHN0b3JlZF9lcnJvcik7CglzdG9yZWRfZXJyb3IgPSBOVUxMOwoJc3RvcmVkX2hh
c19lcnJvciA9IDA7Cn0KCnN0YXRpYyB2b2lkIENwdU1haW5fc3RhdGljX2luaXQodm9pZCkgCnsK
CXN0b3JlZF9tYXhmaWxlID0gQ3B1TWFpbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0g
TlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZp
bGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFi
bGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFs
X2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9n
bG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChN
QVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNf
bW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3Vz
ID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJc3RvcmVkX2VuZ2luZSA9
IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZp
bGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElD
X0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJs
ZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7
CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNf
dHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCglt
YXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lk
IENwdU1haW5fZnJlZSh2b2lkKQp7CglpZihzdG9yZWRfZW5naW5lICE9IE5VTEwpCgkJbWF4X3Vu
bG9hZChzdG9yZWRfZW5naW5lKTsKCWlmKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpCgkJbWF4X2Zp
bGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CglpZihzdG9yZWRfZXJyb3IgIT0gTlVMTCkKCQlmcmVl
KHN0b3JlZF9lcnJvcik7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIHdyaXRlTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgp2b2lkIENwdU1haW5fd3JpdGVM
TWVtKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNzLAoJaW50NjRfdCBwYXJhbV9uYnl0ZXMsCgljb25z
dCB2b2lkICppbnN0cmVhbV9jcHVfdG9fbG1lbSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4
ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
Ik1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybjsgfQoJfQoJbWF4X3J1bl90ICpydW4g
PSBDcHVNYWluX3dyaXRlTE1lbV9ub25ibG9jayhwYXJhbV9hZGRyZXNzLCBwYXJhbV9uYnl0ZXMs
IGluc3RyZWFtX2NwdV90b19sbWVtKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3Jl
dHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1l
bV9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fYWRkcmVzcywKCWludDY0X3QgcGFyYW1fbmJ5dGVz
LAoJY29uc3Qgdm9pZCAqaW5zdHJlYW1fY3B1X3RvX2xtZW0pCnsKCUNwdU1haW5fd3JpdGVMTWVt
X2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2Fk
ZHJlc3MgPSBwYXJhbV9hZGRyZXNzOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbmJ5dGVzID0g
cGFyYW1fbmJ5dGVzOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fY3B1X3RvX2xtZW0gPSBp
bnN0cmVhbV9jcHVfdG9fbG1lbTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5p
dGlhbGlzZWQsIENwdU1haW5fc3RhdGljX2luaXQpOwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVM
TCkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNF
X0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdh
cyBub3QgbG9hZGVkLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
c1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoYWN0aW9uc1swXSA9PSBOVUxMKSB7IAoJCWlm
KG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09O
X0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gYnVpbGQgYWN0
aW9ucyIpO3JldHVybiBOVUxMOyB9Cgl9CgltYXhfdmFsaWRhdGUoYWN0aW9uc1swXSk7CglpZigh
bWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxz
ZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9y
cykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9u
YmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlp
ZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRf
T05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0
aW9ucy4iKTtyZXR1cm4gTlVMTDsgfQoJfQoJaWYoIW1heF9vayhzdG9yZWRfZW5naW5lLT5lcnJv
cnMpICB8fCAhbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0
KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNb
MF0tPmVycm9ycykpOyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRf
ZW5naW5lLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zWzBdKTsKCXJldHVybiBydW47Cn0KCnZvaWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuKAoJbWF4
X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5fd3JpdGVMTWVtX3J1bl9ub25i
bG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlm
IChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rp
b25zLiIpO3JldHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWlu
X3dyaXRlTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5f
d3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1h
eGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnNbMV07CglhY3Rpb25zWzBdID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykp
IHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhf
cnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zLCAxKTsK
CWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2Fj
dGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdy
b3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRl
TE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBh
Y3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZv
aWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgQ3B1TWFp
bl93cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJLyogTm90IHN0cmlj
dGx5IGNvcnJlY3QsIGJlY2F1c2UgZXhwbGljaXRseSBsb2NraW5nIGFuIGVuZ2luZSBoZXJlLiAq
LwoJbWF4X2VuZ2luZV90ICplbmdpbmUgPSBtYXhfbG9ja19hbnkoZ3JvdXApOwoJaWYoZW5naW5l
ID09IE5VTEwpIHJldHVybjsKCUNwdU1haW5fd3JpdGVMTWVtX3J1bihlbmdpbmUsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCW1heF91bmxvY2soZW5naW5lKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ3dyaXRlTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24g
dGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRp
YXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1h
eF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3
aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5f
Z3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICog
XHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2Vf
YWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1lbV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3Vw
X3QgKmdyb3VwLCBDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxM
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0
ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91
cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoK
Ci8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnd3JpdGVMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBh
cnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rp
b25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBh
Y3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2Vf
YWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBDcHVN
YWluX3dyaXRlTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVNYWlu
X3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAq
cnVuID0gQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgp
OwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0K
CX0KCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICd3cml0ZUxNZW0n
LgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBh
cnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9m
IGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRo
ZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBv
ciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxl
ZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJh
bSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0
dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fd3JpdGVMTWVtX3J1
bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fd3JpdGVM
TWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4Zmls
ZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXkpOwoJaW50IGk7CgltYXhfYWN0
YXJyYXlfdCAqYXJyX2FjdGFycmF5WzFdOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zWzFd
OwoJYXJyX2FjdGFycmF5WzBdID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXkt
PnNpemUpOwoJaWYoYXJyX2FjdGFycmF5WzBdID09IE5VTEwpIHJldHVybiBOVUxMOwoJYXJyX2Fj
dGlvbnNbMF0gPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCop
KTsKCWZvcihpPTA7IGkgPCBhcnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykgewoJCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zW2ldKTsKCQlpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFy
cl9hY3Rpb25zWzBdW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhcnJfYWN0YXJyYXlb
MF0sIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X211bHRp
X25vbmJsb2NrKGVuZ2FycmF5LCBhcnJfYWN0YXJyYXksIDEgKTsKCWZvciAoaT0wOyBpIDwgYXJy
X2FjdGFycmF5WzBdLT5zaXplOyBpKyspIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1sw
XVtpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFycl9hY3RhcnJheVswXSk7CglmcmVlKGFycl9h
Y3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3Rh
dGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhf
YWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRp
bGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVy
ZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxw
YXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9u
cyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVu
LCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBDcHVNYWluX3dy
aXRlTE1lbV9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIENwdU1haW5fd3JpdGVMTWVtX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBt
YXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMIHx8ICFt
YXhfb2sobWF4ZmlsZS0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgoJaW50NjRfdCBwYXJhbV9hZGRy
ZXNzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2FkZHJlc3M7CgkKCWludDY0X3QgcGFyYW1f
bmJ5dGVzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX25ieXRlczsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJydW5fY3ljbGVfY291bnQiICk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3Jz
KSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJSVE1LZXJuZWwi
LCAiY18xXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMV8xIiApOwoJaWYo
IW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2Fs
YXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzFfMiIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+
ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJSVE1L
ZXJuZWwiLCAiY18xXzMiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBO
VUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMV80IiAp
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9y
ZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzJfMCIgKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJSVE1LZXJuZWwiLCAiY18yXzEiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNf
Ml8yIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzJfMyIgKTsKCWlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJSVE1LZXJuZWwiLCAiY18yXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVs
IiwgImNfM18wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzNfMSIgKTsKCWlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2Nh
bGFyKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18zXzIiICk7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRN
S2VybmVsIiwgImNfM18zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4g
TlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzNfNCIg
KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCS8qIGNvZGUg
Zm9yIHN0cmVhbSBjcHVfdG9fbG1lbSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfY3B1X3RvX2xt
ZW0gPSBwYXJhbV9uYnl0ZXM7CglpZiAoaW5zdHJlYW1fc2l6ZV9jcHVfdG9fbG1lbSA+IDApIHsK
CQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImNwdV90b19sbWVtIiwgaW50ZXJmYWNlX2FjdGlv
bnMtPmluc3RyZWFtX2NwdV90b19sbWVtLGluc3RyZWFtX3NpemVfY3B1X3RvX2xtZW0pOwoJCWlm
ICghbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJLyogZW5kIG9mIGNv
ZGUgZm9yIHN0cmVhbSBjcHVfdG9fbG1lbSAqLwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25z
LCAiZHZ2IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJ
bWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImxtZW1fdG9fY3B1IiApOwoJaWYoIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9u
cywgInAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHByZXN1
bHQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhf
aWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHgiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHkiICk7Cglp
ZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0
cmVhbShhY3Rpb25zLCAic2NhbGUiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAic291cmNlX2NvbnRhaW5l
ciIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9p
Z25vcmVfbG1lbShhY3Rpb25zLCAiY29udHJvbGxlciIgKTsKCWlmICggIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicmVh
ZF9sbWVtIiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsK
CQoJLyogY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gIndyaXRlX2xtZW0iICovCglzaXpl
X3QgbG1lbV9hZGRyZXNzX3dyaXRlX2xtZW0gPSBwYXJhbV9hZGRyZXNzOwoJc2l6ZV90IGxtZW1f
YXJyX3NpemVfd3JpdGVfbG1lbSA9IHBhcmFtX25ieXRlczsKCWludCBsbWVtX2J1cnN0X3NpemVf
d3JpdGVfbG1lbSA9IG1heF9nZXRfYnVyc3Rfc2l6ZShtYXhmaWxlLCBOVUxMKTsKCWlmICggKGxt
ZW1fYWRkcmVzc193cml0ZV9sbWVtICUgbG1lbV9idXJzdF9zaXplX3dyaXRlX2xtZW0pICE9IDAg
KSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSB3cml0ZV9s
bWVtIHBhcmFtZXRlciAnbG1lbV9hZGRyZXNzX3dyaXRlX2xtZW0nIGlzIHNldCB0byAlemQgYnl0
ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElO
RV9fLCBsbWVtX2FkZHJlc3Nfd3JpdGVfbG1lbSwgbG1lbV9idXJzdF9zaXplX3dyaXRlX2xtZW0g
KTsKCX0KCWlmICggKGxtZW1fYXJyX3NpemVfd3JpdGVfbG1lbSAlIGxtZW1fYnVyc3Rfc2l6ZV93
cml0ZV9sbWVtKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczol
ZCA6IExNZW0gd3JpdGVfbG1lbSBwYXJhbWV0ZXIgJ2xtZW1fYXJyX3NpemVfd3JpdGVfbG1lbScg
aXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4i
LCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYXJyX3NpemVfd3JpdGVfbG1lbSwgbG1lbV9idXJz
dF9zaXplX3dyaXRlX2xtZW0gKTsKCX0KCWlmIChsbWVtX2Fycl9zaXplX3dyaXRlX2xtZW0gPiAw
KSB7CgkJbWF4X2xtZW1fbGluZWFyKGFjdGlvbnMsICJ3cml0ZV9sbWVtIiwgbG1lbV9hZGRyZXNz
X3dyaXRlX2xtZW0sIGxtZW1fYXJyX3NpemVfd3JpdGVfbG1lbSk7Cgl9IGVsc2UgewoJCW1heF9p
Z25vcmVfbG1lbShhY3Rpb25zLCAid3JpdGVfbG1lbSIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlv
bnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVt
b3J5LXN0cmVhbSAid3JpdGVfbG1lbSIgKi8KCQoJcmV0dXJuIGFjdGlvbnM7Cn0KCgoKCi8qLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZh
Y2UgcmVhZExNZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLSovCgoKdm9pZCBDcHVNYWluX3JlYWRMTWVtKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNz
LAoJaW50NjRfdCBwYXJhbV9uYnl0ZXMsCgl2b2lkICpvdXRzdHJlYW1fbG1lbV90b19jcHUpCnsK
CSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIENwdU1haW5fc3Rh
dGljX2luaXQpOwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVMTCkgewoJCWlmKG1heF9jb25maWdf
Z2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJv
cnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdhcyBub3QgbG9hZGVkLiIpOyByZXR1
cm47IH0KCX0KCW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9yZWFkTE1lbV9ub25ibG9jayhwYXJh
bV9hZGRyZXNzLCBwYXJhbV9uYnl0ZXMsIG91dHN0cmVhbV9sbWVtX3RvX2NwdSk7CglpZihydW4g
PT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVu
YWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCm1h
eF9ydW5fdCAqQ3B1TWFpbl9yZWFkTE1lbV9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fYWRkcmVz
cywKCWludDY0X3QgcGFyYW1fbmJ5dGVzLAoJdm9pZCAqb3V0c3RyZWFtX2xtZW1fdG9fY3B1KQp7
CglDcHVNYWluX3JlYWRMTWVtX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFj
ZV9hY3Rpb25zLnBhcmFtX2FkZHJlc3MgPSBwYXJhbV9hZGRyZXNzOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fbmJ5dGVzID0gcGFyYW1fbmJ5dGVzOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3Ry
ZWFtX2xtZW1fdG9fY3B1ID0gb3V0c3RyZWFtX2xtZW1fdG9fY3B1OwoJKHZvaWQpIHB0aHJlYWRf
b25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihz
dG9yZWRfbWF4ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09O
RklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBz
ZXRfZXJyb3IoIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybiBOVUxMOyB9Cgl9Cglt
YXhfYWN0aW9uc190ICphY3Rpb25zWzFdOwoJYWN0aW9uc1swXSA9IENwdU1haW5fcmVhZExNZW1f
Y29udmVydChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnNb
MF0gPT0gTlVMTCkgeyAKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElD
X0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigi
VW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiKTtyZXR1cm4gTlVMTDsgfQoJfQoJbWF4X3ZhbGlkYXRl
KGFjdGlvbnNbMF0pOwoJaWYoIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4
X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJS
T1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X3J1bl90ICpydW4g
PSBtYXhfcnVuX211bHRpX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIDEpOwoJaWYo
cnVuID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFU
SUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9y
KCJVbmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuIE5VTEw7IH0KCX0KCWlmKCFtYXhfb2so
c3RvcmVkX2VuZ2luZS0+ZXJyb3JzKSAgfHwgIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7
CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJP
UlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9l
cnJvcnNfdHJhY2Uoc3RvcmVkX2VuZ2luZS0+ZXJyb3JzKSk7IHJldHVybiBOVUxMO30KCX0KCW1h
eF9hY3Rpb25zX2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIENwdU1haW5f
cmVhZExNZW1fcnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX3JlYWRMTWVtX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9y
ZWFkTE1lbV9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihydW4g
PT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVu
YWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCm1h
eF9ydW5fdCAqQ3B1TWFpbl9yZWFkTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVu
Z2luZSwKCUNwdU1haW5fcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJ
bWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJ
bWF4X2FjdGlvbnNfdCAqYWN0aW9uc1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVNYWluX3JlYWRMTWVt
X2NvbnZlcnQobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoIW1heF9vayhhY3Rpb25z
WzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Jf
YW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgcmV0dXJuIE5V
TEw7fQoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX211bHRpX25vbmJsb2NrKGVuZ2luZSwg
YWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJ
CWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTsgcmV0dXJuIE5VTEw7
IH0KCX0KCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9CgoKLyoq
CiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2Uu
CiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoK
ICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBn
cm91cC4KICovCnZvaWQgQ3B1TWFpbl9yZWFkTE1lbV9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdy
b3VwLCBDcHVNYWluX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCS8q
IE5vdCBzdHJpY3RseSBjb3JyZWN0LCBiZWNhdXNlIGV4cGxpY2l0bHkgbG9ja2luZyBhbiBlbmdp
bmUgaGVyZS4gKi8KCW1heF9lbmdpbmVfdCAqZW5naW5lID0gbWF4X2xvY2tfYW55KGdyb3VwKTsK
CWlmKGVuZ2luZSA9PSBOVUxMKSByZXR1cm47CglDcHVNYWluX3JlYWRMTWVtX3J1bihlbmdpbmUs
IGludGVyZmFjZV9hY3Rpb25zKTsKCW1heF91bmxvY2soZW5naW5lKTsKfQoKCi8qKgogKiBcYnJp
ZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRo
ZSBpbnRlcmZhY2UgJ3JlYWRMTWVtJy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRv
IHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVy
biBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3
aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9o
aWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6
bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9u
LgogKgogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRo
ZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJy
b3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fcmVhZExNZW1fcnVuX2dyb3VwX25vbmJsb2NrKG1h
eF9ncm91cF90ICpncm91cCwgQ3B1TWFpbl9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShn
cm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl9yZWFkTE1lbV9jb252ZXJ0
KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJu
IE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3Zh
bGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2Nr
KGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVu
Owp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZv
ciB0aGUgaW50ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBU
aGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2Vf
YWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkg
b2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJm
YWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQg
Q3B1TWFpbl9yZWFkTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVN
YWluX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90
ICpydW4gPSBDcHVNYWluX3JlYWRMTWVtX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50
ZXJmYWNlX2FjdGlvbnMpOwoJaWYocnVuID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0
X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQo
KTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuOyB9
Cgl9CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQg
c3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0n
LgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBh
cnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9m
IGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRo
ZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBv
ciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxl
ZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJh
bSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0
dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fcmVhZExNZW1fcnVu
X2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgQ3B1TWFpbl9yZWFkTE1l
bV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUg
PSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5KTsKCWludCBpOwoJbWF4X2FjdGFy
cmF5X3QgKmFycl9hY3RhcnJheVsxXTsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9uc1sxXTsK
CWFycl9hY3RhcnJheVswXSA9IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5z
aXplKTsKCWlmKGFycl9hY3RhcnJheVswXSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWFycl9hY3Rp
b25zWzBdID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7
Cglmb3IoaT0wOyBpIDwgYXJyX2FjdGFycmF5WzBdLT5zaXplOyBpKyspIHsKCQltYXhfYWN0aW9u
c190ICphY3Rpb25zID0gQ3B1TWFpbl9yZWFkTE1lbV9jb252ZXJ0KG1heGZpbGUsIGludGVyZmFj
ZV9hY3Rpb25zW2ldKTsKCQlpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9h
Y3Rpb25zWzBdW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhcnJfYWN0YXJyYXlbMF0s
IGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X211bHRpX25v
bmJsb2NrKGVuZ2FycmF5LCBhcnJfYWN0YXJyYXksIDEgKTsKCWZvciAoaT0wOyBpIDwgYXJyX2Fj
dGFycmF5WzBdLT5zaXplOyBpKyspIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1swXVtp
XSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFycl9hY3RhcnJheVswXSk7CglmcmVlKGFycl9hY3Rp
b25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGlj
LWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0
aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0
eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFj
ZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJh
bSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0
byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBv
ciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBDcHVNYWluX3JlYWRM
TWVtX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgQ3B1TWFpbl9yZWFkTE1lbV9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gbWF4X2Fj
dGlvbnNfaW5pdChtYXhmaWxlLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCB8fCAhbWF4X29r
KG1heGZpbGUtPmVycm9ycykpIHJldHVybiBOVUxMOwoKCWludDY0X3QgcGFyYW1fYWRkcmVzcyA9
IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9hZGRyZXNzOwoJCglpbnQ2NF90IHBhcmFtX25ieXRl
cyA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9uYnl0ZXM7CgkKCW1heF9pZ25vcmVfc2NhbGFy
KGFjdGlvbnMsICJSVE1LZXJuZWwiLCAicnVuX2N5Y2xlX2NvdW50IiApOwoJaWYoIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9u
cywgIlJUTUtlcm5lbCIsICJjXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNf
MV8wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzFfMSIgKTsKCWlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJSVE1LZXJuZWwiLCAiY18xXzIiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRNS2VybmVs
IiwgImNfMV8zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzFfNCIgKTsKCWlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2Nh
bGFyKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18yXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiUlRN
S2VybmVsIiwgImNfMl8xIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4g
TlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzJfMiIg
KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25v
cmVfc2NhbGFyKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18yXzMiICk7CglpZighbWF4X29rKGFj
dGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25z
LCAiUlRNS2VybmVsIiwgImNfMl80IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJj
XzNfMCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1h
eF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18zXzEiICk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAiUlRNS2VybmVsIiwgImNfM18yIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJv
cnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIlJUTUtlcm5l
bCIsICJjXzNfMyIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7
CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18zXzQiICk7Cglp
ZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0
cmVhbShhY3Rpb25zLCAiY3B1X3RvX2xtZW0iICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAiZHZ2IiApOwoJ
aWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3Ig
c3RyZWFtIGxtZW1fdG9fY3B1ICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfbG1lbV90b19jcHUg
PSBwYXJhbV9uYnl0ZXM7CglpZiAob3V0c3RyZWFtX3NpemVfbG1lbV90b19jcHUgPiAwKSB7CgkJ
bWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAibG1lbV90b19jcHUiLCBpbnRlcmZhY2VfYWN0aW9u
cy0+b3V0c3RyZWFtX2xtZW1fdG9fY3B1LG91dHN0cmVhbV9zaXplX2xtZW1fdG9fY3B1KTsKCQlp
ZiAoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCX0KCS8qIGVuZCBvZiBj
b2RlIGZvciBzdHJlYW0gbG1lbV90b19jcHUgKi8KCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9u
cywgInAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHByZXN1
bHQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhf
aWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHgiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAicHkiICk7Cglp
ZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0
cmVhbShhY3Rpb25zLCAic2NhbGUiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAic291cmNlX2NvbnRhaW5l
ciIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9p
Z25vcmVfbG1lbShhY3Rpb25zLCAiY29udHJvbGxlciIgKTsKCWlmICggIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkKCS8qIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3Ry
ZWFtICJyZWFkX2xtZW0iICovCglzaXplX3QgbG1lbV9hZGRyZXNzX3JlYWRfbG1lbSA9IHBhcmFt
X2FkZHJlc3M7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0gPSBwYXJhbV9uYnl0ZXM7
CglpbnQgbG1lbV9idXJzdF9zaXplX3JlYWRfbG1lbSA9IG1heF9nZXRfYnVyc3Rfc2l6ZShtYXhm
aWxlLCBOVUxMKTsKCWlmICggKGxtZW1fYWRkcmVzc19yZWFkX2xtZW0gJSBsbWVtX2J1cnN0X3Np
emVfcmVhZF9sbWVtKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAl
czolZCA6IExNZW0gcmVhZF9sbWVtIHBhcmFtZXRlciAnbG1lbV9hZGRyZXNzX3JlYWRfbG1lbScg
aXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4i
LCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc19yZWFkX2xtZW0sIGxtZW1fYnVyc3Rf
c2l6ZV9yZWFkX2xtZW0gKTsKCX0KCWlmICggKGxtZW1fYXJyX3NpemVfcmVhZF9sbWVtICUgbG1l
bV9idXJzdF9zaXplX3JlYWRfbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xp
QyBFcnJvcjogJXM6JWQgOiBMTWVtIHJlYWRfbG1lbSBwYXJhbWV0ZXIgJ2xtZW1fYXJyX3NpemVf
cmVhZF9sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2Yg
JWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0s
IGxtZW1fYnVyc3Rfc2l6ZV9yZWFkX2xtZW0gKTsKCX0KCWlmIChsbWVtX2Fycl9zaXplX3JlYWRf
bG1lbSA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgInJlYWRfbG1lbSIsIGxtZW1f
YWRkcmVzc19yZWFkX2xtZW0sIGxtZW1fYXJyX3NpemVfcmVhZF9sbWVtKTsKCX0gZWxzZSB7CgkJ
bWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJyZWFkX2xtZW0iKTsKCX0KCWlmICggIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3IgbGluZWFy
IG1lbW9yeS1zdHJlYW0gInJlYWRfbG1lbSIgKi8KCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMs
ICJ3cml0ZV9sbWVtIiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4g
TlVMTDsKCQoJcmV0dXJuIGFjdGlvbnM7Cn0KCgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8q
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKdm9pZCBDcHVN
YWluKAoJZG91YmxlIHBhcmFtX2NfMCwKCWRvdWJsZSBwYXJhbV9jXzFfMCwKCWRvdWJsZSBwYXJh
bV9jXzFfMSwKCWRvdWJsZSBwYXJhbV9jXzFfMiwKCWRvdWJsZSBwYXJhbV9jXzFfMywKCWRvdWJs
ZSBwYXJhbV9jXzFfNCwKCWRvdWJsZSBwYXJhbV9jXzJfMCwKCWRvdWJsZSBwYXJhbV9jXzJfMSwK
CWRvdWJsZSBwYXJhbV9jXzJfMiwKCWRvdWJsZSBwYXJhbV9jXzJfMywKCWRvdWJsZSBwYXJhbV9j
XzJfNCwKCWRvdWJsZSBwYXJhbV9jXzNfMCwKCWRvdWJsZSBwYXJhbV9jXzNfMSwKCWRvdWJsZSBw
YXJhbV9jXzNfMiwKCWRvdWJsZSBwYXJhbV9jXzNfMywKCWRvdWJsZSBwYXJhbV9jXzNfNCwKCWlu
dDY0X3QgcGFyYW1fY29udHJvbGxlclNpemUsCglpbnQ2NF90IHBhcmFtX3NpemUsCglpbnQ2NF90
IHBhcmFtX3NpemVweHksCglpbnQ2NF90IHBhcmFtX3N0ZW5jaWxTaXplLAoJY29uc3QgZmxvYXQg
Kmluc3RyZWFtX2R2diwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV9wLAoJY29uc3QgZmxvYXQgKmlu
c3RyZWFtX3BwLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX3B4LAoJY29uc3QgZmxvYXQgKmluc3Ry
ZWFtX3B5LAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1fc2NhbGUsCgljb25zdCBmbG9hdCAqaW5z
dHJlYW1fc291cmNlX2NvbnRhaW5lciwKCWZsb2F0ICpvdXRzdHJlYW1fcHByZXN1bHQpCnsKCSh2
b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIENwdU1haW5fc3RhdGlj
X2luaXQpOwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVMTCkgewoJCWlmKG1heF9jb25maWdfZ2V0
X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQo
KTsKCQllbHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdhcyBub3QgbG9hZGVkLiIpOyByZXR1cm47
IH0KCX0KCW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9ub25ibG9jayhwYXJhbV9jXzAsIHBhcmFt
X2NfMV8wLCBwYXJhbV9jXzFfMSwgcGFyYW1fY18xXzIsIHBhcmFtX2NfMV8zLCBwYXJhbV9jXzFf
NCwgcGFyYW1fY18yXzAsIHBhcmFtX2NfMl8xLCBwYXJhbV9jXzJfMiwgcGFyYW1fY18yXzMsIHBh
cmFtX2NfMl80LCBwYXJhbV9jXzNfMCwgcGFyYW1fY18zXzEsIHBhcmFtX2NfM18yLCBwYXJhbV9j
XzNfMywgcGFyYW1fY18zXzQsIHBhcmFtX2NvbnRyb2xsZXJTaXplLCBwYXJhbV9zaXplLCBwYXJh
bV9zaXplcHh5LCBwYXJhbV9zdGVuY2lsU2l6ZSwgaW5zdHJlYW1fZHZ2LCBpbnN0cmVhbV9wLCBp
bnN0cmVhbV9wcCwgaW5zdHJlYW1fcHgsIGluc3RyZWFtX3B5LCBpbnN0cmVhbV9zY2FsZSwgaW5z
dHJlYW1fc291cmNlX2NvbnRhaW5lciwgb3V0c3RyZWFtX3BwcmVzdWx0KTsKCWlmKHJ1biA9PSBO
VUxMKSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVS
RkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxl
IHRvIHJ1biBhY3Rpb25zLiIpO3JldHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1
bl90ICpDcHVNYWluX25vbmJsb2NrKAoJZG91YmxlIHBhcmFtX2NfMCwKCWRvdWJsZSBwYXJhbV9j
XzFfMCwKCWRvdWJsZSBwYXJhbV9jXzFfMSwKCWRvdWJsZSBwYXJhbV9jXzFfMiwKCWRvdWJsZSBw
YXJhbV9jXzFfMywKCWRvdWJsZSBwYXJhbV9jXzFfNCwKCWRvdWJsZSBwYXJhbV9jXzJfMCwKCWRv
dWJsZSBwYXJhbV9jXzJfMSwKCWRvdWJsZSBwYXJhbV9jXzJfMiwKCWRvdWJsZSBwYXJhbV9jXzJf
MywKCWRvdWJsZSBwYXJhbV9jXzJfNCwKCWRvdWJsZSBwYXJhbV9jXzNfMCwKCWRvdWJsZSBwYXJh
bV9jXzNfMSwKCWRvdWJsZSBwYXJhbV9jXzNfMiwKCWRvdWJsZSBwYXJhbV9jXzNfMywKCWRvdWJs
ZSBwYXJhbV9jXzNfNCwKCWludDY0X3QgcGFyYW1fY29udHJvbGxlclNpemUsCglpbnQ2NF90IHBh
cmFtX3NpemUsCglpbnQ2NF90IHBhcmFtX3NpemVweHksCglpbnQ2NF90IHBhcmFtX3N0ZW5jaWxT
aXplLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX2R2diwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV9w
LAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX3BwLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX3B4LAoJ
Y29uc3QgZmxvYXQgKmluc3RyZWFtX3B5LAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1fc2NhbGUs
Cgljb25zdCBmbG9hdCAqaW5zdHJlYW1fc291cmNlX2NvbnRhaW5lciwKCWZsb2F0ICpvdXRzdHJl
YW1fcHByZXN1bHQpCnsKCUNwdU1haW5fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50
ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18wID0gcGFyYW1fY18wOwoJaW50ZXJmYWNlX2FjdGlvbnMu
cGFyYW1fY18xXzAgPSBwYXJhbV9jXzFfMDsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMV8x
ID0gcGFyYW1fY18xXzE7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzFfMiA9IHBhcmFtX2Nf
MV8yOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18xXzMgPSBwYXJhbV9jXzFfMzsKCWludGVy
ZmFjZV9hY3Rpb25zLnBhcmFtX2NfMV80ID0gcGFyYW1fY18xXzQ7CglpbnRlcmZhY2VfYWN0aW9u
cy5wYXJhbV9jXzJfMCA9IHBhcmFtX2NfMl8wOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18y
XzEgPSBwYXJhbV9jXzJfMTsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMl8yID0gcGFyYW1f
Y18yXzI7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzJfMyA9IHBhcmFtX2NfMl8zOwoJaW50
ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18yXzQgPSBwYXJhbV9jXzJfNDsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX2NfM18wID0gcGFyYW1fY18zXzA7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9j
XzNfMSA9IHBhcmFtX2NfM18xOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18zXzIgPSBwYXJh
bV9jXzNfMjsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfM18zID0gcGFyYW1fY18zXzM7Cglp
bnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzNfNCA9IHBhcmFtX2NfM180OwoJaW50ZXJmYWNlX2Fj
dGlvbnMucGFyYW1fY29udHJvbGxlclNpemUgPSBwYXJhbV9jb250cm9sbGVyU2l6ZTsKCWludGVy
ZmFjZV9hY3Rpb25zLnBhcmFtX3NpemUgPSBwYXJhbV9zaXplOwoJaW50ZXJmYWNlX2FjdGlvbnMu
cGFyYW1fc2l6ZXB4eSA9IHBhcmFtX3NpemVweHk7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9z
dGVuY2lsU2l6ZSA9IHBhcmFtX3N0ZW5jaWxTaXplOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJl
YW1fZHZ2ID0gaW5zdHJlYW1fZHZ2OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fcCA9IGlu
c3RyZWFtX3A7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9wcCA9IGluc3RyZWFtX3BwOwoJ
aW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fcHggPSBpbnN0cmVhbV9weDsKCWludGVyZmFjZV9h
Y3Rpb25zLmluc3RyZWFtX3B5ID0gaW5zdHJlYW1fcHk7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0
cmVhbV9zY2FsZSA9IGluc3RyZWFtX3NjYWxlOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1f
c291cmNlX2NvbnRhaW5lciA9IGluc3RyZWFtX3NvdXJjZV9jb250YWluZXI7CglpbnRlcmZhY2Vf
YWN0aW9ucy5vdXRzdHJlYW1fcHByZXN1bHQgPSBvdXRzdHJlYW1fcHByZXN1bHQ7Cgkodm9pZCkg
cHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBDcHVNYWluX3N0YXRpY19pbml0
KTsKCWlmKHN0b3JlZF9tYXhmaWxlID09IE5VTEwpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29s
KE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJ
ZWxzZSB7IHNldF9lcnJvcigiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZC4iKTsgcmV0dXJuIE5VTEw7
IH0KCX0KCW1heF9hY3Rpb25zX3QgKmFjdGlvbnNbMV07CglhY3Rpb25zWzBdID0gQ3B1TWFpbl9j
b252ZXJ0KHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoYWN0aW9uc1sw
XSA9PSBOVUxMKSB7IAoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNf
SU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJV
bmFibGUgdG8gYnVpbGQgYWN0aW9ucyIpO3JldHVybiBOVUxMOyB9Cgl9CgltYXhfdmFsaWRhdGUo
YWN0aW9uc1swXSk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhf
Y29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJP
UikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNl
KGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgMSk7CglpZihy
dW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
IlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm4gTlVMTDsgfQoJfQoJaWYoIW1heF9vayhz
dG9yZWRfZW5naW5lLT5lcnJvcnMpICB8fCAhbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsK
CQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJy
b3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShzdG9yZWRfZW5naW5lLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4
X2FjdGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCnZvaWQgQ3B1TWFpbl9y
dW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBDcHVNYWluX3J1bl9ub25ibG9jayhlbmdpbmUs
IGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFi
b3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3JldHVy
bjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3J1bl9ub25ibG9j
aygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJQ3B1TWFpbl9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUo
ZW5naW5lKTsgCgltYXhfYWN0aW9uc190ICphY3Rpb25zWzFdOwoJYWN0aW9uc1swXSA9IENwdU1h
aW5fY29udmVydChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZighbWF4X29rKGFjdGlv
bnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RB
VElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJv
cl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4g
TlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soZW5naW5l
LCBhY3Rpb25zLCAxKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9i
b29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7
CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpOyByZXR1cm4gTlVM
TDsgfQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgov
KioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBp
bnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNl
LgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAq
CiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUg
Z3JvdXAuCiAqLwp2b2lkIENwdU1haW5fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgQ3B1
TWFpbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgkvKiBOb3Qgc3RyaWN0bHkgY29y
cmVjdCwgYmVjYXVzZSBleHBsaWNpdGx5IGxvY2tpbmcgYW4gZW5naW5lIGhlcmUuICovCgltYXhf
ZW5naW5lX3QgKmVuZ2luZSA9IG1heF9sb2NrX2FueShncm91cCk7CglpZihlbmdpbmUgPT0gTlVM
TCkgcmV0dXJuOwoJQ3B1TWFpbl9ydW4oZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CgltYXhf
dW5sb2NrKGVuZ2luZSk7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0
aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICog
CiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2
YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1
cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRo
YXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1
bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1
bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBH
cm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8g
cnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBh
Y3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5f
cnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgQ3B1TWFpbl9hY3Rpb25zX3Qg
KmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dl
dF9tYXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl9jb252
ZXJ0KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0
dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4
X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJs
b2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4g
cnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9u
IGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5
IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFj
ZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJh
eSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRl
cmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9p
ZCBDcHVNYWluX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5f
cnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihydW4g
PT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVu
YWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCgov
KioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0
aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1
biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVy
biBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1h
dGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJl
IGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRo
YXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1v
cnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkg
b2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBh
cnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpDcHVNYWluX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5n
YXJyYXksIENwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfZmls
ZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSk7CglpbnQg
aTsKCW1heF9hY3RhcnJheV90ICphcnJfYWN0YXJyYXlbMV07CgltYXhfYWN0aW9uc190ICoqYXJy
X2FjdGlvbnNbMV07CglhcnJfYWN0YXJyYXlbMF0gPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxl
LCBlbmdhcnJheS0+c2l6ZSk7CglpZihhcnJfYWN0YXJyYXlbMF0gPT0gTlVMTCkgcmV0dXJuIE5V
TEw7CglhcnJfYWN0aW9uc1swXSA9IG1hbGxvYyhlbmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhf
YWN0aW9uc190KikpOwoJZm9yKGk9MDsgaSA8IGFycl9hY3RhcnJheVswXS0+c2l6ZTsgaSsrKSB7
CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IENwdU1haW5fY29udmVydChtYXhmaWxlLCBpbnRl
cmZhY2VfYWN0aW9uc1tpXSk7CgkJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlh
cnJfYWN0aW9uc1swXVtpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYXJyX2FjdGFycmF5
WzBdLCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9tdWx0
aV9ub25ibG9jayhlbmdhcnJheSwgYXJyX2FjdGFycmF5LCAxICk7Cglmb3IgKGk9MDsgaSA8IGFy
cl9hY3RhcnJheVswXS0+c2l6ZTsgaSsrKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNb
MF1baV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhcnJfYWN0YXJyYXlbMF0pOwoJZnJlZShhcnJf
YWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0
YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4
X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0
aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRl
cmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBc
cGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlv
bnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1
biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogQ3B1TWFpbl9j
b252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIENwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4
ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwgfHwgIW1heF9vayhtYXhmaWxlLT5lcnJv
cnMpKSByZXR1cm4gTlVMTDsKCglkb3VibGUgcGFyYW1fY18wID0gaW50ZXJmYWNlX2FjdGlvbnMt
PnBhcmFtX2NfMDsKCQoJZG91YmxlIHBhcmFtX2NfMV8wID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBh
cmFtX2NfMV8wOwoJCglkb3VibGUgcGFyYW1fY18xXzEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFy
YW1fY18xXzE7CgkKCWRvdWJsZSBwYXJhbV9jXzFfMiA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJh
bV9jXzFfMjsKCQoJZG91YmxlIHBhcmFtX2NfMV8zID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFt
X2NfMV8zOwoJCglkb3VibGUgcGFyYW1fY18xXzQgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1f
Y18xXzQ7CgkKCWRvdWJsZSBwYXJhbV9jXzJfMCA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9j
XzJfMDsKCQoJZG91YmxlIHBhcmFtX2NfMl8xID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2Nf
Ml8xOwoJCglkb3VibGUgcGFyYW1fY18yXzIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18y
XzI7CgkKCWRvdWJsZSBwYXJhbV9jXzJfMyA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzJf
MzsKCQoJZG91YmxlIHBhcmFtX2NfMl80ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfMl80
OwoJCglkb3VibGUgcGFyYW1fY18zXzAgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18zXzA7
CgkKCWRvdWJsZSBwYXJhbV9jXzNfMSA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzNfMTsK
CQoJZG91YmxlIHBhcmFtX2NfM18yID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfM18yOwoJ
Cglkb3VibGUgcGFyYW1fY18zXzMgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18zXzM7CgkK
CWRvdWJsZSBwYXJhbV9jXzNfNCA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzNfNDsKCQoJ
aW50NjRfdCBwYXJhbV9jb250cm9sbGVyU2l6ZSA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9j
b250cm9sbGVyU2l6ZTsKCQoJaW50NjRfdCBwYXJhbV9zaXplID0gaW50ZXJmYWNlX2FjdGlvbnMt
PnBhcmFtX3NpemU7CgkKCWludDY0X3QgcGFyYW1fc2l6ZXB4eSA9IGludGVyZmFjZV9hY3Rpb25z
LT5wYXJhbV9zaXplcHh5OwoJCglpbnQ2NF90IHBhcmFtX3N0ZW5jaWxTaXplID0gaW50ZXJmYWNl
X2FjdGlvbnMtPnBhcmFtX3N0ZW5jaWxTaXplOwoJCgoJLyogdGVtcG9yYXJ5IHZhcmlhYmxlcyAq
LwoJaW50NjRfdCB0bXBfMCA9IChwYXJhbV9zaXplICogNCk7CglpbnQ2NF90IHRtcF8xID0gKHBh
cmFtX3NpemUgKiA0KTsKCWludDY0X3QgdG1wXzIgPSAocGFyYW1fc2l6ZSAqIDQpOwoJaW50NjRf
dCB0bXBfMyA9IChwYXJhbV9zaXplICogNCk7CglpbnQ2NF90IHRtcF80ID0gKChwYXJhbV9zaXpl
ICogcGFyYW1fc3RlbmNpbFNpemUpICogNCk7CglpbnQ2NF90IHRtcF81ID0gKChwYXJhbV9zaXpl
ICogcGFyYW1fc3RlbmNpbFNpemUpICogNCk7CglpbnQ2NF90IHRtcF82ID0gKHBhcmFtX3NpemUg
KiA0KTsKCWludDY0X3QgdG1wXzcgPSAocGFyYW1fc2l6ZSAqIDQpOwoJaW50NjRfdCB0bXBfOCA9
IChwYXJhbV9jb250cm9sbGVyU2l6ZSAqIDQpOwoKCS8qIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJu
ZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19SVE1LZXJuZWwgPSBwYXJhbV9z
aXplcHh5OwoJbWF4X3NldF90aWNrcyhhY3Rpb25zLCAiUlRNS2VybmVsIiwgcGFyYW1fc2l6ZXB4
eSk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29kZSBm
b3Igc2NhbGFyIFJUTUtlcm5lbC5jXzAgKi8KCWRvdWJsZSBpbnNjYWxhcl9SVE1LZXJuZWxfY18w
ID0gcGFyYW1fY18wOwoJbWF4X3NldF9kb3VibGUoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzAi
LCBpbnNjYWxhcl9SVE1LZXJuZWxfY18wKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
cmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzAqLwoJ
CgkvKiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNfMV8wICovCglkb3VibGUgaW5zY2FsYXJf
UlRNS2VybmVsX2NfMV8wID0gcGFyYW1fY18xXzA7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAi
UlRNS2VybmVsIiwgImNfMV8wIiwgaW5zY2FsYXJfUlRNS2VybmVsX2NfMV8wKTsKCWlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2Nh
bGFyIFJUTUtlcm5lbC5jXzFfMCovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18x
XzEgKi8KCWRvdWJsZSBpbnNjYWxhcl9SVE1LZXJuZWxfY18xXzEgPSBwYXJhbV9jXzFfMTsKCW1h
eF9zZXRfZG91YmxlKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18xXzEiLCBpbnNjYWxhcl9SVE1L
ZXJuZWxfY18xXzEpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNfMV8xKi8KCQoJLyogY29kZSBm
b3Igc2NhbGFyIFJUTUtlcm5lbC5jXzFfMiAqLwoJZG91YmxlIGluc2NhbGFyX1JUTUtlcm5lbF9j
XzFfMiA9IHBhcmFtX2NfMV8yOwoJbWF4X3NldF9kb3VibGUoYWN0aW9ucywgIlJUTUtlcm5lbCIs
ICJjXzFfMiIsIGluc2NhbGFyX1JUTUtlcm5lbF9jXzFfMik7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJu
ZWwuY18xXzIqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNfMV8zICovCglkb3Vi
bGUgaW5zY2FsYXJfUlRNS2VybmVsX2NfMV8zID0gcGFyYW1fY18xXzM7CgltYXhfc2V0X2RvdWJs
ZShhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMV8zIiwgaW5zY2FsYXJfUlRNS2VybmVsX2NfMV8z
KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2Yg
Y29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzFfMyovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBS
VE1LZXJuZWwuY18xXzQgKi8KCWRvdWJsZSBpbnNjYWxhcl9SVE1LZXJuZWxfY18xXzQgPSBwYXJh
bV9jXzFfNDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18xXzQiLCBp
bnNjYWxhcl9SVE1LZXJuZWxfY18xXzQpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNfMV80Ki8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzJfMCAqLwoJZG91YmxlIGluc2NhbGFy
X1JUTUtlcm5lbF9jXzJfMCA9IHBhcmFtX2NfMl8wOwoJbWF4X3NldF9kb3VibGUoYWN0aW9ucywg
IlJUTUtlcm5lbCIsICJjXzJfMCIsIGluc2NhbGFyX1JUTUtlcm5lbF9jXzJfMCk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNj
YWxhciBSVE1LZXJuZWwuY18yXzAqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNf
Ml8xICovCglkb3VibGUgaW5zY2FsYXJfUlRNS2VybmVsX2NfMl8xID0gcGFyYW1fY18yXzE7Cglt
YXhfc2V0X2RvdWJsZShhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMl8xIiwgaW5zY2FsYXJfUlRN
S2VybmVsX2NfMl8xKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7
CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzJfMSovCgkKCS8qIGNvZGUg
Zm9yIHNjYWxhciBSVE1LZXJuZWwuY18yXzIgKi8KCWRvdWJsZSBpbnNjYWxhcl9SVE1LZXJuZWxf
Y18yXzIgPSBwYXJhbV9jXzJfMjsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJSVE1LZXJuZWwi
LCAiY18yXzIiLCBpbnNjYWxhcl9SVE1LZXJuZWxfY18yXzIpOwoJaWYoIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgUlRNS2Vy
bmVsLmNfMl8yKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzJfMyAqLwoJZG91
YmxlIGluc2NhbGFyX1JUTUtlcm5lbF9jXzJfMyA9IHBhcmFtX2NfMl8zOwoJbWF4X3NldF9kb3Vi
bGUoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzJfMyIsIGluc2NhbGFyX1JUTUtlcm5lbF9jXzJf
Myk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18yXzMqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIg
UlRNS2VybmVsLmNfMl80ICovCglkb3VibGUgaW5zY2FsYXJfUlRNS2VybmVsX2NfMl80ID0gcGFy
YW1fY18yXzQ7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAiUlRNS2VybmVsIiwgImNfMl80Iiwg
aW5zY2FsYXJfUlRNS2VybmVsX2NfMl80KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
cmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5jXzJfNCov
CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18zXzAgKi8KCWRvdWJsZSBpbnNjYWxh
cl9SVE1LZXJuZWxfY18zXzAgPSBwYXJhbV9jXzNfMDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMs
ICJSVE1LZXJuZWwiLCAiY18zXzAiLCBpbnNjYWxhcl9SVE1LZXJuZWxfY18zXzApOwoJaWYoIW1h
eF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBz
Y2FsYXIgUlRNS2VybmVsLmNfM18wKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFJUTUtlcm5lbC5j
XzNfMSAqLwoJZG91YmxlIGluc2NhbGFyX1JUTUtlcm5lbF9jXzNfMSA9IHBhcmFtX2NfM18xOwoJ
bWF4X3NldF9kb3VibGUoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzNfMSIsIGluc2NhbGFyX1JU
TUtlcm5lbF9jXzNfMSk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxM
OwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18zXzEqLwoJCgkvKiBjb2Rl
IGZvciBzY2FsYXIgUlRNS2VybmVsLmNfM18yICovCglkb3VibGUgaW5zY2FsYXJfUlRNS2VybmVs
X2NfM18yID0gcGFyYW1fY18zXzI7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAiUlRNS2VybmVs
IiwgImNfM18yIiwgaW5zY2FsYXJfUlRNS2VybmVsX2NfM18yKTsKCWlmKCFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFJUTUtl
cm5lbC5jXzNfMiovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18zXzMgKi8KCWRv
dWJsZSBpbnNjYWxhcl9SVE1LZXJuZWxfY18zXzMgPSBwYXJhbV9jXzNfMzsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJSVE1LZXJuZWwiLCAiY18zXzMiLCBpbnNjYWxhcl9SVE1LZXJuZWxfY18z
XzMpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBv
ZiBjb2RlIGZvciBzY2FsYXIgUlRNS2VybmVsLmNfM18zKi8KCQoJLyogY29kZSBmb3Igc2NhbGFy
IFJUTUtlcm5lbC5jXzNfNCAqLwoJZG91YmxlIGluc2NhbGFyX1JUTUtlcm5lbF9jXzNfNCA9IHBh
cmFtX2NfM180OwoJbWF4X3NldF9kb3VibGUoYWN0aW9ucywgIlJUTUtlcm5lbCIsICJjXzNfNCIs
IGluc2NhbGFyX1JUTUtlcm5lbF9jXzNfNCk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykp
IHJldHVybiBOVUxMOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBSVE1LZXJuZWwuY18zXzQq
LwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAiY3B1X3RvX2xtZW0iICk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0g
ZHZ2ICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9kdnYgPSB0bXBfMjsKCWlmIChpbnN0cmVhbV9z
aXplX2R2diA+IDApIHsKCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImR2diIsIGludGVyZmFj
ZV9hY3Rpb25zLT5pbnN0cmVhbV9kdnYsaW5zdHJlYW1fc2l6ZV9kdnYpOwoJCWlmICghbWF4X29r
KGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0
cmVhbSBkdnYgKi8KCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImxtZW1fdG9fY3B1IiAp
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBm
b3Igc3RyZWFtIHAgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX3AgPSB0bXBfMDsKCWlmIChpbnN0
cmVhbV9zaXplX3AgPiAwKSB7CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJwIiwgaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX3AsaW5zdHJlYW1fc2l6ZV9wKTsKCQlpZiAoIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJl
YW0gcCAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gcHAgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXpl
X3BwID0gdG1wXzE7CglpZiAoaW5zdHJlYW1fc2l6ZV9wcCA+IDApIHsKCQltYXhfcXVldWVfaW5w
dXQoYWN0aW9ucywgInBwIiwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3BwLGluc3RyZWFt
X3NpemVfcHApOwoJCWlmICghbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJ
fQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBwcCAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0g
cHggKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX3B4ID0gdG1wXzQ7CglpZiAoaW5zdHJlYW1fc2l6
ZV9weCA+IDApIHsKCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgInB4IiwgaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX3B4LGluc3RyZWFtX3NpemVfcHgpOwoJCWlmICghbWF4X29rKGFjdGlv
bnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBw
eCAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gcHkgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX3B5
ID0gdG1wXzU7CglpZiAoaW5zdHJlYW1fc2l6ZV9weSA+IDApIHsKCQltYXhfcXVldWVfaW5wdXQo
YWN0aW9ucywgInB5IiwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3B5LGluc3RyZWFtX3Np
emVfcHkpOwoJCWlmICghbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJ
LyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBweSAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gc2Nh
bGUgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX3NjYWxlID0gdG1wXzY7CglpZiAoaW5zdHJlYW1f
c2l6ZV9zY2FsZSA+IDApIHsKCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgInNjYWxlIiwgaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3NjYWxlLGluc3RyZWFtX3NpemVfc2NhbGUpOwoJCWlm
ICghbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJLyogZW5kIG9mIGNv
ZGUgZm9yIHN0cmVhbSBzY2FsZSAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gc291cmNlX2NvbnRh
aW5lciAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfc291cmNlX2NvbnRhaW5lciA9IHRtcF8zOwoJ
aWYgKGluc3RyZWFtX3NpemVfc291cmNlX2NvbnRhaW5lciA+IDApIHsKCQltYXhfcXVldWVfaW5w
dXQoYWN0aW9ucywgInNvdXJjZV9jb250YWluZXIiLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJl
YW1fc291cmNlX2NvbnRhaW5lcixpbnN0cmVhbV9zaXplX3NvdXJjZV9jb250YWluZXIpOwoJCWlm
ICghbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJfQoJLyogZW5kIG9mIGNv
ZGUgZm9yIHN0cmVhbSBzb3VyY2VfY29udGFpbmVyICovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBw
cHJlc3VsdCAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3BwcmVzdWx0ID0gdG1wXzc7CglpZiAo
b3V0c3RyZWFtX3NpemVfcHByZXN1bHQgPiAwKSB7CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25z
LCAicHByZXN1bHQiLCBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3BwcmVzdWx0LG91dHN0
cmVhbV9zaXplX3BwcmVzdWx0KTsKCQlpZiAoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gcHByZXN1bHQgKi8KCQoJLyog
Y29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gImNvbnRyb2xsZXIiICovCglzaXplX3QgbG1l
bV9hZGRyZXNzX2NvbnRyb2xsZXIgPSAwOwoJc2l6ZV90IGxtZW1fYXJyX3NpemVfY29udHJvbGxl
ciA9IHRtcF84OwoJaW50IGxtZW1fYnVyc3Rfc2l6ZV9jb250cm9sbGVyID0gbWF4X2dldF9idXJz
dF9zaXplKG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1lbV9hZGRyZXNzX2NvbnRyb2xsZXIgJSBs
bWVtX2J1cnN0X3NpemVfY29udHJvbGxlcikgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxu
U0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIGNvbnRyb2xsZXIgcGFyYW1ldGVyICdsbWVtX2FkZHJl
c3NfY29udHJvbGxlcicgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxl
IG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc19jb250cm9s
bGVyLCBsbWVtX2J1cnN0X3NpemVfY29udHJvbGxlciApOwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6
ZV9jb250cm9sbGVyICUgbG1lbV9idXJzdF9zaXplX2NvbnRyb2xsZXIpICE9IDAgKSB7CgkJZnBy
aW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBjb250cm9sbGVyIHBhcmFt
ZXRlciAnbG1lbV9hcnJfc2l6ZV9jb250cm9sbGVyJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBt
dXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1l
bV9hcnJfc2l6ZV9jb250cm9sbGVyLCBsbWVtX2J1cnN0X3NpemVfY29udHJvbGxlciApOwoJfQoJ
aWYgKGxtZW1fYXJyX3NpemVfY29udHJvbGxlciA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0
aW9ucywgImNvbnRyb2xsZXIiLCBsbWVtX2FkZHJlc3NfY29udHJvbGxlciwgbG1lbV9hcnJfc2l6
ZV9jb250cm9sbGVyKTsKCX0gZWxzZSB7CgkJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJjb250
cm9sbGVyIik7Cgl9CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxM
OwoJLyogZW5kIG9mIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJjb250cm9sbGVyIiAq
LwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInJlYWRfbG1lbSIgKTsKCWlmICggIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rp
b25zLCAid3JpdGVfbG1lbSIgKTsKCWlmICggIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0
dXJuIE5VTEw7CgkKCXJldHVybiBhY3Rpb25zOwp9CgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(RTMKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(RTMKernel, c_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_4)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_4)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_4)	
SLIC_STREAM(cpu_to_lmem, param_nbytes)	
SLIC_STREAM_DISABLED(dvv)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM_DISABLED(p)	
SLIC_STREAM_DISABLED(pp)	
SLIC_STREAM_DISABLED(ppresult)	
SLIC_STREAM_DISABLED(px)	
SLIC_STREAM_DISABLED(py)	
SLIC_STREAM_DISABLED(scale)	
SLIC_STREAM_DISABLED(source_container)	
SLIC_LMEM_LINEAR_DISABLED(controller)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR(write_lmem, param_address, param_nbytes)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(RTMKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(RTMKernel, c_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_1_4)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_2_4)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_0)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_1)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_2)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_3)	
SLIC_SCALAR_DISABLED(RTMKernel, c_3_4)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM_DISABLED(dvv)	
SLIC_STREAM(lmem_to_cpu, param_nbytes)	
SLIC_STREAM_DISABLED(p)	
SLIC_STREAM_DISABLED(pp)	
SLIC_STREAM_DISABLED(ppresult)	
SLIC_STREAM_DISABLED(px)	
SLIC_STREAM_DISABLED(py)	
SLIC_STREAM_DISABLED(scale)	
SLIC_STREAM_DISABLED(source_container)	
SLIC_LMEM_LINEAR_DISABLED(controller)	
SLIC_LMEM_LINEAR(read_lmem, param_address, param_nbytes)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(default)	
SLIC_PARAMETER_DOUBLE(double, c_0, param_c_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_0, param_c_1_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_1, param_c_1_1)	
SLIC_PARAMETER_DOUBLE(double, c_1_2, param_c_1_2)	
SLIC_PARAMETER_DOUBLE(double, c_1_3, param_c_1_3)	
SLIC_PARAMETER_DOUBLE(double, c_1_4, param_c_1_4)	
SLIC_PARAMETER_DOUBLE(double, c_2_0, param_c_2_0)	
SLIC_PARAMETER_DOUBLE(double, c_2_1, param_c_2_1)	
SLIC_PARAMETER_DOUBLE(double, c_2_2, param_c_2_2)	
SLIC_PARAMETER_DOUBLE(double, c_2_3, param_c_2_3)	
SLIC_PARAMETER_DOUBLE(double, c_2_4, param_c_2_4)	
SLIC_PARAMETER_DOUBLE(double, c_3_0, param_c_3_0)	
SLIC_PARAMETER_DOUBLE(double, c_3_1, param_c_3_1)	
SLIC_PARAMETER_DOUBLE(double, c_3_2, param_c_3_2)	
SLIC_PARAMETER_DOUBLE(double, c_3_3, param_c_3_3)	
SLIC_PARAMETER_DOUBLE(double, c_3_4, param_c_3_4)	
SLIC_PARAMETER_UINT64(int64_t, controllerSize, param_controllerSize)	
SLIC_PARAMETER_UINT64(int64_t, size, param_size)	
SLIC_PARAMETER_UINT64(int64_t, sizepxy, param_sizepxy)	
SLIC_PARAMETER_UINT64(int64_t, stencilSize, param_stencilSize)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_3 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_4 = ((param_size * param_stencilSize) * 4);)	
SLIC_TEMP_VAR(int64_t tmp_5 = ((param_size * param_stencilSize) * 4);)	
SLIC_TEMP_VAR(int64_t tmp_6 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_7 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_8 = (param_controllerSize * 4);)	
SLIC_SET_TICKS(RTMKernel, param_sizepxy)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_0, param_c_0)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_1_0, param_c_1_0)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_1_1, param_c_1_1)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_1_2, param_c_1_2)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_1_3, param_c_1_3)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_1_4, param_c_1_4)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_2_0, param_c_2_0)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_2_1, param_c_2_1)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_2_2, param_c_2_2)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_2_3, param_c_2_3)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_2_4, param_c_2_4)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_3_0, param_c_3_0)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_3_1, param_c_3_1)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_3_2, param_c_3_2)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_3_3, param_c_3_3)	
SLIC_SCALAR_DOUBLE(RTMKernel, c_3_4, param_c_3_4)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM(dvv, tmp_2)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM(p, tmp_0)	
SLIC_STREAM(pp, tmp_1)	
SLIC_STREAM(px, tmp_4)	
SLIC_STREAM(py, tmp_5)	
SLIC_STREAM(scale, tmp_6)	
SLIC_STREAM(source_container, tmp_3)	
SLIC_STREAM(ppresult, tmp_7)	
SLIC_LMEM_LINEAR(controller, 0, tmp_8)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkNwdU1haW4uaCIgbmFtZT0i
Q3B1TWFpbiI+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1
TWFpbl93cml0ZUxNZW0iIHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZh
Y2UgUGFyYW1ldGVyICZxdW90O2FkZHJlc3MmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1l
PSJwYXJhbV9hZGRyZXNzIiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2Ug
UGFyYW1ldGVyICZxdW90O25ieXRlcyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX25ieXRlcyIgdHlwZT0iaW50NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3Vs
ZCBiZSBvZiBzaXplIHBhcmFtX25ieXRlcyBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
Imluc3RyZWFtX2NwdV90b19sbWVtIiBzaXplPSJwYXJhbV9uYnl0ZXMiIHRyYW5zcG9zZT0idHJ1
ZSIgdHlwZT0idm9pZCIvPjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjxlbmdpbmVtb2RlIG5hbWU9
InJlYWRMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1TWFpbl9yZWFkTE1lbSIgcmV0dXJuLXZhbHVl
PSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7YWRkcmVzcyZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2FkZHJlc3MiIHR5cGU9ImludDY0
X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7bmJ5dGVzJnF1b3Q7
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fbmJ5dGVzIiB0eXBlPSJpbnQ2NF90Ii8+
PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgcGFyYW1fbmJ5dGVzIGJ5
dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9sbWVtX3RvX2NwdSIgc2l6
ZT0icGFyYW1fbmJ5dGVzIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InZvaWQiLz48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
Q3B1TWFpbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7Y18wJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18w
IiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7
Y18xXzAmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzFfMCIgdHlwZT0i
ZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMV8xJnF1
b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18xXzEiIHR5cGU9ImRvdWJsZSIv
PjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzFfMiZxdW90Oy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMV8yIiB0eXBlPSJkb3VibGUiLz48c2NhbGFy
IGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18xXzMmcXVvdDsuIiBkaXJlY3Rpb249
IklucHV0IiBuYW1lPSJwYXJhbV9jXzFfMyIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJ
bnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMV80JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0icGFyYW1fY18xXzQiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNl
IFBhcmFtZXRlciAmcXVvdDtjXzJfMCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX2NfMl8wIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7Y18yXzEmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzJf
MSIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90
O2NfMl8yJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18yXzIiIHR5cGU9
ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzJfMyZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMl8zIiB0eXBlPSJkb3VibGUi
Lz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18yXzQmcXVvdDsuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzJfNCIgdHlwZT0iZG91YmxlIi8+PHNjYWxh
ciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfM18wJnF1b3Q7LiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0icGFyYW1fY18zXzAiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0i
SW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzNfMSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQi
IG5hbWU9InBhcmFtX2NfM18xIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7Y18zXzImcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJw
YXJhbV9jXzNfMiIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1l
dGVyICZxdW90O2NfM18zJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18z
XzMiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVv
dDtjXzNfNCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfM180IiB0eXBl
PSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y29udHJv
bGxlclNpemUmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jb250cm9sbGVy
U2l6ZSIgdHlwZT0iaW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAm
cXVvdDtzaXplJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fc2l6ZSIgdHlw
ZT0iaW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtzaXpl
cHh5JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fc2l6ZXB4eSIgdHlwZT0i
aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtzdGVuY2ls
U2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3N0ZW5jaWxTaXplIiB0
eXBlPSJpbnQ2NF90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUg
KHBhcmFtX3NpemUgKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFt
X2R2diIgc2l6ZT0iKHBhcmFtX3NpemUgKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9h
dCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlP
cGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fc2l6ZSAqIDQpIC8gNCkiPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX3Np
emUgKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fc2l6ZSIvPjxjb25zdGFudFZhbHVlIHZh
bHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1
ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+
PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Yg
c2l6ZSAocGFyYW1fc2l6ZSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5z
dHJlYW1fcCIgc2l6ZT0iKHBhcmFtX3NpemUgKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJm
bG9hdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5h
cnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fc2l6ZSAqIDQpIC8gNCkiPjxm
dW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFt
X3NpemUgKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fc2l6ZSIvPjxjb25zdGFudFZhbHVl
IHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRW
YWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5n
dGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUg
b2Ygc2l6ZSAocGFyYW1fc2l6ZSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0i
aW5zdHJlYW1fcHAiIHNpemU9IihwYXJhbV9zaXplICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlw
ZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVt
QmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQp
Ij48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9Iihw
YXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRW
YWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0
YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwv
bGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxk
IGJlIG9mIHNpemUgKChwYXJhbV9zaXplICogcGFyYW1fc3RlbmNpbFNpemUpICogNCkgYnl0ZXMu
IiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9weCIgc2l6ZT0iKChwYXJhbV9zaXpl
ICogcGFyYW1fc3RlbmNpbFNpemUpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQi
PjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3Bl
cmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChwYXJhbV9zaXplICogcGFyYW1fc3RlbmNpbFNp
emUpICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9
IioiIHZhbHVlPSIoKHBhcmFtX3NpemUgKiBwYXJhbV9zdGVuY2lsU2l6ZSkgKiA0KSI+PGZ1bmN0
aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fc2l6
ZSAqIHBhcmFtX3N0ZW5jaWxTaXplKSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fc2l6ZSIvPjx1
c2VyUGFyYW0gdmFsdWU9InBhcmFtX3N0ZW5jaWxTaXplIi8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0
b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9w
ZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5
IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKChwYXJhbV9zaXplICogcGFyYW1f
c3RlbmNpbFNpemUpICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVh
bV9weSIgc2l6ZT0iKChwYXJhbV9zaXplICogcGFyYW1fc3RlbmNpbFNpemUpICogNCkiIHRyYW5z
cG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1
bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChwYXJh
bV9zaXplICogcGFyYW1fc3RlbmNpbFNpemUpICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVt
QmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIoKHBhcmFtX3NpemUgKiBwYXJhbV9z
dGVuY2lsU2l6ZSkgKiA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9IioiIHZhbHVlPSIocGFyYW1fc2l6ZSAqIHBhcmFtX3N0ZW5jaWxTaXplKSI+PHVzZXJQYXJh
bSB2YWx1ZT0icGFyYW1fc2l6ZSIvPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX3N0ZW5jaWxTaXpl
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1
ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUg
dmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwv
ZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNp
emUgKHBhcmFtX3NpemUgKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3Ry
ZWFtX3NjYWxlIiBzaXplPSIocGFyYW1fc2l6ZSAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9
ImludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVt
QmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQp
Ij48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9Iihw
YXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRW
YWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0
YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwv
bGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxk
IGJlIG9mIHNpemUgKHBhcmFtX3NpemUgKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5h
bWU9Imluc3RyZWFtX3NvdXJjZV9jb250YWluZXIiIHNpemU9IihwYXJhbV9zaXplICogNCkiIHRy
YW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+
PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBh
cmFtX3NpemUgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVy
YXRvcj0iKiIgdmFsdWU9IihwYXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFt
X3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9m
dW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9y
PjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9
IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKHBhcmFtX3NpemUgKiA0KSBieXRlcy4iIGRp
cmVjdGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRzdHJlYW1fcHByZXN1bHQiIHNpemU9IihwYXJhbV9z
aXplICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9
IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8i
IHZhbHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlP
cGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0g
dmFsdWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5
T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJp
bmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+
PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(RTMKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 164, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 151, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 149, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 152, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 150, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 153, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 206, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 5, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 6, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 208, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 209, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 210, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 211, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 212, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 213, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 214, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 215, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 216, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 170, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 166, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 15, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 167, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 13, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 14, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 17, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 168, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 45, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 43, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 46, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 44, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 47, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 171, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 23, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 21, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 24, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 22, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 172, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 25, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 39, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 217, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 218, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 219, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 220, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 221, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 222, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 36, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 224, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 225, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 226, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 227, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 228, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 229, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 230, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 203, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 31, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 29, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 32, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 30, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 33, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 205, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 231, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 207, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(RTMKernel, 160, "SquashFactor", 0.0)
#endif

