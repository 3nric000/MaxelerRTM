#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2013
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          35689
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "CpuMain"
#define MAXFILE_BUILD_DIR  "/home/emanuele.delsozzo/repo/MaxelerRTM/RTM_3/RunRules/Simulation/maxfiles/CpuMain_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20130531
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(MemCtrlPro_TotalNumStreams, 4)
PARAM(MemCtrlPro_NumRdStreams, 2)
PARAM(MemCtrlPro_NumWrStreams, 2)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 384)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_Parity_Mode, 0)
PARAM(MemCtrlPro_ECC_Mode, 0)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 0)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 2)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 215)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif


#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "cpu_mainKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(cpu_mainKernel, Kernel)
MANAGER_NODE(cpu_to_lmem, PCIe_From_Host_fwd)
MANAGER_NODE(lmem_to_cpu, PCIe_To_Host_fwd)
MANAGER_NODE(addrgen_cmd_write_lmem, AddrGen)
MANAGER_NODE(cmd_write_lmem_0, Memory_Cmd)
MANAGER_NODE(write_lmem, To_Memory)
MANAGER_NODE(addrgen_cmd_read_lmem, AddrGen)
MANAGER_NODE(cmd_read_lmem_0, Memory_Cmd)
MANAGER_NODE(read_lmem, From_Memory)
MANAGER_NODE(dvv_value, PCIe_From_Host_fwd)
MANAGER_NODE(addrgen_cmd_p, AddrGen)
MANAGER_NODE(cmd_p_0, Memory_Cmd)
MANAGER_NODE(p, From_Memory)
MANAGER_NODE(pp_value, PCIe_From_Host_fwd)
MANAGER_NODE(source_container_value, PCIe_From_Host_fwd)
MANAGER_NODE(addrgen_cmd_pp, AddrGen)
MANAGER_NODE(cmd_pp_0, Memory_Cmd)
MANAGER_NODE(pp, To_Memory)
MANAGER_NODE(Stream_10, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_20, DualAspectMux)
MANAGER_NODE(Stream_27, DualAspectMux)
MANAGER_NODE(Stream_17, DualAspectMux)
MANAGER_NODE(Stream_30, DualAspectMux)
MANAGER_NODE(Stream_39, DualAspectReg)
MANAGER_NODE(Stream_43, StreamPullPushAdapter)
MANAGER_NODE(Stream_67, StreamPullPushAdapter)
MANAGER_NODE(Stream_51, Fifo)
MANAGER_NODE(Stream_55, Fifo)
MANAGER_NODE(Stream_59, Fifo)
MANAGER_NODE(Stream_63, Fifo)
MANAGER_NODE(Stream_65, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(cpu_mainKernel, p, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(cpu_mainKernel, pp_value, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(cpu_mainKernel, dvv_value, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(cpu_mainKernel, source_container_value, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(cpu_mainKernel, pp, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(cpu_to_lmem, cpu_to_lmem, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(lmem_to_cpu, lmem_to_cpu, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_write_lmem_0, cmd_write_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(write_lmem, write_lmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_read_lmem_0, cmd_read_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(read_lmem, read_lmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(dvv_value, dvv_value, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(addrgen_cmd_p, addrgen_cmd_p_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_p_0, cmd_p_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(p, p, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(pp_value, pp_value, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(source_container_value, source_container_value, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(addrgen_cmd_pp, addrgen_cmd_pp_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_pp_0, cmd_pp_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(pp, pp, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_20, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_20, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_27, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_27, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_17, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_17, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_30, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_30, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_39, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_39, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_43, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_43, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_67, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_67, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_51, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_51, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_55, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_55, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_59, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_59, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_63, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_63, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_65, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_65, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(cpu_to_lmem, cpu_to_lmem, Stream_10, input, 128)
MANAGER_STREAM(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, cmd_write_lmem_0, cmd_write_lmem_0, 64)
MANAGER_STREAM(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, cmd_read_lmem_0, cmd_read_lmem_0, 64)
MANAGER_STREAM(read_lmem, read_lmem, Stream_4, input, 1536)
MANAGER_STREAM(dvv_value, dvv_value, Stream_17, input, 128)
MANAGER_STREAM(addrgen_cmd_p, addrgen_cmd_p_0, cmd_p_0, cmd_p_0, 64)
MANAGER_STREAM(p, p, Stream_20, input, 1536)
MANAGER_STREAM(pp_value, pp_value, Stream_27, input, 128)
MANAGER_STREAM(source_container_value, source_container_value, Stream_30, input, 128)
MANAGER_STREAM(cpu_mainKernel, pp, Stream_65, input, 32)
MANAGER_STREAM(addrgen_cmd_pp, addrgen_cmd_pp_0, cmd_pp_0, cmd_pp_0, 64)
MANAGER_STREAM(Stream_10, output, Stream_43, input, 1536)
MANAGER_STREAM(Stream_4, output, lmem_to_cpu, lmem_to_cpu, 128)
MANAGER_STREAM(Stream_20, output, Stream_51, input, 32)
MANAGER_STREAM(Stream_27, output, Stream_55, input, 32)
MANAGER_STREAM(Stream_17, output, Stream_59, input, 32)
MANAGER_STREAM(Stream_30, output, Stream_63, input, 32)
MANAGER_STREAM(Stream_39, output, Stream_67, input, 1536)
MANAGER_STREAM(Stream_43, output, write_lmem, write_lmem, 1536)
MANAGER_STREAM(Stream_67, output, pp, pp, 1536)
MANAGER_STREAM(Stream_51, output, cpu_mainKernel, p, 32)
MANAGER_STREAM(Stream_55, output, cpu_mainKernel, pp_value, 32)
MANAGER_STREAM(Stream_59, output, cpu_mainKernel, dvv_value, 32)
MANAGER_STREAM(Stream_63, output, cpu_mainKernel, source_container_value, 32)
MANAGER_STREAM(Stream_65, output, Stream_39, input, 32)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(cpu_mainKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(cpu_mainKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(cpu_mainKernel, cpu_mainKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(cpu_mainKernel, p, 0)
DEBUG_INPUT_BITS(cpu_mainKernel, pp_value, 1)
DEBUG_INPUT_BITS(cpu_mainKernel, dvv_value, 2)
DEBUG_INPUT_BITS(cpu_mainKernel, source_container_value, 3)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(cpu_mainKernel, pp, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cpu_to_lmem, PCIePullSourceSyncMax3, "cpu_to_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_write_lmem, AddressGeneratorSync, "addrgen_cmd_write_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_read_lmem, AddressGeneratorSync, "addrgen_cmd_read_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(dvv_value, PCIePullSourceSyncMax3, "dvv_value")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_p, AddressGeneratorSync, "addrgen_cmd_p", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), BLOCK3D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pp_value, PCIePullSourceSyncMax3, "pp_value")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(source_container_value, PCIePullSourceSyncMax3, "source_container_value")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_pp, AddressGeneratorSync, "addrgen_cmd_pp", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), BLOCK3D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, DualAspectRegSync, "Stream_10", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, DualAspectMuxSync, "Stream_17", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, DualAspectMuxSync, "Stream_20", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_27, DualAspectMuxSync, "Stream_27", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_30, DualAspectMuxSync, "Stream_30", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_43, PullToPushAdapterSync, "Stream_43")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(lmem_to_cpu, PCIePushSinkSyncMax3, "lmem_to_cpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_59, FifoPushToPullSync, "Stream_59", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_51, FifoPushToPullSync, "Stream_51", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_55, FifoPushToPullSync, "Stream_55", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_63, FifoPushToPullSync, "Stream_63", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cpu_mainKernel, cpu_mainKernel, "cpu_mainKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_65, FifoPushToPullSync, "Stream_65", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_39, DualAspectRegSync, "Stream_39", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_67, PullToPushAdapterSync, "Stream_67")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_write_lmem_0, MemoryProxyCommandSinkSync, "cmd_write_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(read_lmem, MemoryProxyPullSourceSync, "read_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_read_lmem_0, MemoryProxyCommandSinkSync, "cmd_read_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(p, MemoryProxyPullSourceSync, "p")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_p_0, MemoryProxyCommandSinkSync, "cmd_p_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_pp_0, MemoryProxyCommandSinkSync, "cmd_pp_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(write_lmem, MemoryProxyPushSinkSync, "write_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pp, MemoryProxyPushSinkSync, "pp")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax3Config(8,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 4, 1, 0, 0, 0, 0, 0, 215)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "deac4828113de14e2a9b226e7a6d70b918b22c95d8e90e12a8b97fed50dfd848")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_done, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_empty, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_read, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 12, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_ctld_request, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_fill_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_flush_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_flush_start_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_full_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cpu_mainKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_write_lmem_0, setup, "cmd_write_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(read_lmem, setup, "read_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_read_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_read_lmem_0, setup, "cmd_read_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(p, setup, "p", MemoryControllerPro::getDefaultMemoryController(), "cmd_p_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_p_0, setup, "cmd_p_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_pp_0, setup, "cmd_pp_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(write_lmem, setup, "write_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_write_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pp, setup, "pp", MemoryControllerPro::getDefaultMemoryController(), "cmd_pp_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(cpu_to_lmem, STREAM_FROM_HOST, 0)
PCIE_STREAM(dvv_value, STREAM_FROM_HOST, 1)
PCIE_STREAM(pp_value, STREAM_FROM_HOST, 2)
PCIE_STREAM(source_container_value, STREAM_FROM_HOST, 3)
PCIE_STREAM(lmem_to_cpu, STREAM_TO_HOST, 0)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_write_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_read_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_3DBLOCK
#define MEMCTRLPRO_ADDRGEN_3DBLOCK_PRESENT 1
MEMCTRLPRO_ADDRGEN_3DBLOCK(addrgen_cmd_p, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_3DBLOCK
#define MEMCTRLPRO_ADDRGEN_3DBLOCK_PRESENT 1
MEMCTRLPRO_ADDRGEN_3DBLOCK(addrgen_cmd_pp, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(read_lmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(p, 1, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(write_lmem, 2, WRITE_TO_MEMORY)
MEMCTRLPRO_STREAM(pp, 3, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1))
REG(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8))
REG(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33))
REG(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1))
REG(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8))
REG(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33))
REG(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32))
REG(addrgen_cmd_p._Addr_En, 0x26, 1, hwBits(1))
REG(addrgen_cmd_p._CmdSize, 0x27, 1, hwBits(8))
REG(addrgen_cmd_p._BlockSize_X, 0x28, 2, hwBits(10))
REG(addrgen_cmd_p._BlockSize_Y, 0x2a, 2, hwBits(10))
REG(addrgen_cmd_p._BlockSize_Z, 0x2c, 2, hwBits(12))
REG(addrgen_cmd_p._Wrap_X, 0x2e, 2, hwBits(10))
REG(addrgen_cmd_p._Wrap_Y, 0x30, 2, hwBits(10))
REG(addrgen_cmd_p._Wrap_Z, 0x32, 2, hwBits(12))
REG(addrgen_cmd_p._Start_X_Addr, 0x34, 2, hwBits(10))
REG(addrgen_cmd_p._Start_Y_Addr, 0x36, 4, hwBits(32))
REG(addrgen_cmd_p._Start_Z_Addr, 0x3a, 4, hwBits(32))
REG(addrgen_cmd_p._Stride_Y, 0x3e, 2, hwBits(11))
REG(addrgen_cmd_p._Stride_Z, 0x40, 3, hwBits(21))
REG(addrgen_cmd_p._Offset_0, 0x43, 4, hwBits(32))
REG(addrgen_cmd_pp._Addr_En, 0x47, 1, hwBits(1))
REG(addrgen_cmd_pp._CmdSize, 0x48, 1, hwBits(8))
REG(addrgen_cmd_pp._BlockSize_X, 0x49, 2, hwBits(10))
REG(addrgen_cmd_pp._BlockSize_Y, 0x4b, 2, hwBits(10))
REG(addrgen_cmd_pp._BlockSize_Z, 0x4d, 2, hwBits(12))
REG(addrgen_cmd_pp._Wrap_X, 0x4f, 2, hwBits(10))
REG(addrgen_cmd_pp._Wrap_Y, 0x51, 2, hwBits(10))
REG(addrgen_cmd_pp._Wrap_Z, 0x53, 2, hwBits(12))
REG(addrgen_cmd_pp._Start_X_Addr, 0x55, 2, hwBits(10))
REG(addrgen_cmd_pp._Start_Y_Addr, 0x57, 4, hwBits(32))
REG(addrgen_cmd_pp._Start_Z_Addr, 0x5b, 4, hwBits(32))
REG(addrgen_cmd_pp._Stride_Y, 0x5f, 2, hwBits(11))
REG(addrgen_cmd_pp._Stride_Z, 0x61, 3, hwBits(21))
REG(addrgen_cmd_pp._Offset_0, 0x64, 4, hwBits(32))
REG(cpu_mainKernel.io_p_force_disabled, 0x68, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(cpu_mainKernel.c_0, 0x69, 4, hwFloat(8, 24))
REG(cpu_mainKernel.io_pp_value_force_disabled, 0x6d, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(cpu_mainKernel.io_dvv_value_force_disabled, 0x6e, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(cpu_mainKernel.io_source_container_value_force_disabled, 0x6f, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(cpu_mainKernel.c_1_0, 0x70, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_1_1, 0x74, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_1_2, 0x78, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_1_3, 0x7c, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_1_4, 0x80, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_2_0, 0x84, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_2_1, 0x88, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_2_2, 0x8c, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_2_3, 0x90, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_2_4, 0x94, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_3_0, 0x98, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_3_1, 0x9c, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_3_2, 0xa0, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_3_3, 0xa4, 4, hwFloat(8, 24))
REG(cpu_mainKernel.c_3_4, 0xa8, 4, hwFloat(8, 24))
REG(cpu_mainKernel.io_pp_force_disabled, 0xac, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(cpu_mainKernel.run_cycle_count, 0xad, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(cpu_mainKernel.current_run_cycle_count, 0xb3, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(cpu_mainKernel.dbg_ctld_almost_empty, 0xb9, 1, hwBits(4))
REG(cpu_mainKernel.dbg_ctld_done, 0xba, 1, hwBits(4))
REG(cpu_mainKernel.dbg_ctld_empty, 0xbb, 1, hwBits(4))
REG(cpu_mainKernel.dbg_ctld_read, 0xbc, 1, hwBits(4))
REG(cpu_mainKernel.dbg_ctld_read_pipe_dbg, 0xbd, 2, hwBits(12))
REG(cpu_mainKernel.dbg_ctld_request, 0xbf, 1, hwBits(4))
REG(cpu_mainKernel.dbg_done_out, 0xc0, 1, hwBits(1))
REG(cpu_mainKernel.dbg_fill_level, 0xc1, 2, hwBits(14))
REG(cpu_mainKernel.dbg_flush_level, 0xc3, 2, hwBits(14))
REG(cpu_mainKernel.dbg_flush_start, 0xc5, 1, hwBits(1))
REG(cpu_mainKernel.dbg_flush_start_level, 0xc6, 2, hwBits(14))
REG(cpu_mainKernel.dbg_flushing, 0xc8, 1, hwBits(1))
REG(cpu_mainKernel.dbg_full_level, 0xc9, 2, hwBits(14))
REG(cpu_mainKernel.dbg_out_stall, 0xcb, 1, hwBits(1))
REG(cpu_mainKernel.dbg_out_valid, 0xcc, 1, hwBits(1))
REG(cpu_mainKernel.dbg_stall_vector, 0xcd, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xce, 1, hwBits(4))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xcf, 1, hwBits(4))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0xd0, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0xd1, 1, hwBits(8))
REG(ifpga.ifpga_ctrl, 0xd2, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0xd3, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Addr_En, 0x26, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._CmdSize, 0x27, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._BlockSize_X, 0x28, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._BlockSize_Y, 0x2a, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._BlockSize_Z, 0x2c, 2, hwBits(12), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Wrap_X, 0x2e, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Wrap_Y, 0x30, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Wrap_Z, 0x32, 2, hwBits(12), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Start_X_Addr, 0x34, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Start_Y_Addr, 0x36, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Start_Z_Addr, 0x3a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Stride_Y, 0x3e, 2, hwBits(11), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Stride_Z, 0x40, 3, hwBits(21), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Offset_0, 0x43, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Addr_En, 0x47, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._CmdSize, 0x48, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._BlockSize_X, 0x49, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._BlockSize_Y, 0x4b, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._BlockSize_Z, 0x4d, 2, hwBits(12), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Wrap_X, 0x4f, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Wrap_Y, 0x51, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Wrap_Z, 0x53, 2, hwBits(12), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Start_X_Addr, 0x55, 2, hwBits(10), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Start_Y_Addr, 0x57, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Start_Z_Addr, 0x5b, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Stride_Y, 0x5f, 2, hwBits(11), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Stride_Z, 0x61, 3, hwBits(21), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Offset_0, 0x64, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.io_p_force_disabled, 0x68, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(cpu_mainKernel.c_0, 0x69, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.io_pp_value_force_disabled, 0x6d, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(cpu_mainKernel.io_dvv_value_force_disabled, 0x6e, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(cpu_mainKernel.io_source_container_value_force_disabled, 0x6f, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(cpu_mainKernel.c_1_0, 0x70, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_1_1, 0x74, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_1_2, 0x78, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_1_3, 0x7c, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_1_4, 0x80, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_2_0, 0x84, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_2_1, 0x88, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_2_2, 0x8c, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_2_3, 0x90, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_2_4, 0x94, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_3_0, 0x98, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_3_1, 0x9c, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_3_2, 0xa0, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_3_3, 0xa4, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.c_3_4, 0xa8, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.io_pp_force_disabled, 0xac, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(cpu_mainKernel.run_cycle_count, 0xad, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(cpu_mainKernel.current_run_cycle_count, 0xb3, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_almost_empty, 0xb9, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_done, 0xba, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_empty, 0xbb, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_read, 0xbc, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_read_pipe_dbg, 0xbd, 2, hwBits(12), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_ctld_request, 0xbf, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_done_out, 0xc0, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_fill_level, 0xc1, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_flush_level, 0xc3, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_flush_start, 0xc5, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_flush_start_level, 0xc6, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_flushing, 0xc8, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_full_level, 0xc9, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_out_stall, 0xcb, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_out_valid, 0xcc, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(cpu_mainKernel.dbg_stall_vector, 0xcd, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xce, 1, hwBits(4), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xcf, 1, hwBits(4), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0xd0, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0xd1, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(ifpga.ifpga_ctrl, 0xd2, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0xd3, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("deac4828113de14e2a9b226e7a6d70b918b22c95d8e90e12a8b97fed50dfd848")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(max3_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_write_lmem, addrgen_cmd_write_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_read_lmem, addrgen_cmd_read_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_p, addrgen_cmd_p., BLOCKING_3D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_pp, addrgen_cmd_pp., BLOCKING_3D)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_read_lmem, read_lmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_p, p, 0, 1, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_write_lmem, write_lmem, 0, 2, WRITE_TO_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_pp, pp, 0, 3, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME CpuMain
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_CpuMain_H
#define SLIC_DECLARATIONS_CpuMain_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 */
void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	const void *instream_cpu_to_lmem; /**<  [in] The stream should be of size param_nbytes bytes. */
} CpuMain_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 */
void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	void *outstream_lmem_to_cpu; /**<  [out] The stream should be of size param_nbytes bytes. */
} CpuMain_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_burst Interface Parameter "burst".
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_n1 Interface Parameter "n1".
 * \param [in] param_n2 Interface Parameter "n2".
 * \param [in] param_offF Interface Parameter "offF".
 * \param [in] param_offM Interface Parameter "offM".
 * \param [in] param_offS Interface Parameter "offS".
 * \param [in] param_xzSize Interface Parameter "xzSize".
 * \param [in] instream_dvv_value The stream should be of size 32 bytes.
 * \param [in] instream_pp_value The stream should be of size 32 bytes.
 * \param [in] instream_source_container_value The stream should be of size 32 bytes.
 */
void CpuMain(
	int64_t param_burst,
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_n1,
	int64_t param_n2,
	int64_t param_offF,
	int64_t param_offM,
	int64_t param_offS,
	int64_t param_xzSize,
	const float *instream_dvv_value,
	const float *instream_pp_value,
	const float *instream_source_container_value);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_burst Interface Parameter "burst".
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_n1 Interface Parameter "n1".
 * \param [in] param_n2 Interface Parameter "n2".
 * \param [in] param_offF Interface Parameter "offF".
 * \param [in] param_offM Interface Parameter "offM".
 * \param [in] param_offS Interface Parameter "offS".
 * \param [in] param_xzSize Interface Parameter "xzSize".
 * \param [in] instream_dvv_value The stream should be of size 32 bytes.
 * \param [in] instream_pp_value The stream should be of size 32 bytes.
 * \param [in] instream_source_container_value The stream should be of size 32 bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_nonblock(
	int64_t param_burst,
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_n1,
	int64_t param_n2,
	int64_t param_offF,
	int64_t param_offM,
	int64_t param_offS,
	int64_t param_xzSize,
	const float *instream_dvv_value,
	const float *instream_pp_value,
	const float *instream_source_container_value);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int64_t param_burst; /**<  [in] Interface Parameter "burst". */
	double param_c_0; /**<  [in] Interface Parameter "c_0". */
	double param_c_1_0; /**<  [in] Interface Parameter "c_1_0". */
	double param_c_1_1; /**<  [in] Interface Parameter "c_1_1". */
	double param_c_1_2; /**<  [in] Interface Parameter "c_1_2". */
	double param_c_1_3; /**<  [in] Interface Parameter "c_1_3". */
	double param_c_1_4; /**<  [in] Interface Parameter "c_1_4". */
	double param_c_2_0; /**<  [in] Interface Parameter "c_2_0". */
	double param_c_2_1; /**<  [in] Interface Parameter "c_2_1". */
	double param_c_2_2; /**<  [in] Interface Parameter "c_2_2". */
	double param_c_2_3; /**<  [in] Interface Parameter "c_2_3". */
	double param_c_2_4; /**<  [in] Interface Parameter "c_2_4". */
	double param_c_3_0; /**<  [in] Interface Parameter "c_3_0". */
	double param_c_3_1; /**<  [in] Interface Parameter "c_3_1". */
	double param_c_3_2; /**<  [in] Interface Parameter "c_3_2". */
	double param_c_3_3; /**<  [in] Interface Parameter "c_3_3". */
	double param_c_3_4; /**<  [in] Interface Parameter "c_3_4". */
	int64_t param_n1; /**<  [in] Interface Parameter "n1". */
	int64_t param_n2; /**<  [in] Interface Parameter "n2". */
	int64_t param_offF; /**<  [in] Interface Parameter "offF". */
	int64_t param_offM; /**<  [in] Interface Parameter "offM". */
	int64_t param_offS; /**<  [in] Interface Parameter "offS". */
	int64_t param_xzSize; /**<  [in] Interface Parameter "xzSize". */
	const float *instream_dvv_value; /**<  [in] The stream should be of size 32 bytes. */
	const float *instream_pp_value; /**<  [in] The stream should be of size 32 bytes. */
	const float *instream_source_container_value; /**<  [in] The stream should be of size 32 bytes. */
} CpuMain_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* CpuMain_init(void);

/* Error handling functions */
int CpuMain_has_errors(void);
const char* CpuMain_get_errors(void);
void CpuMain_clear_errors(void);
/* Free statically allocated maxfile data */
void CpuMain_free(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_CpuMain_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(cpu_mainKernel, 111, NodeInputMappedReg, "Scalar input (io_pp_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:764)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 112, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:764)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 115, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:764)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 116, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:764)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 0, NodeInputMappedReg, "Scalar input (io_p_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:15)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:15)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 2, NodeInput, "Input(p)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:15)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 156, NodeFIFO, "FIFO(1044)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 161, NodeFIFO, "FIFO(1044)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 162, NodeFIFO, "FIFO(1044)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 163, NodeFIFO, "FIFO(1044)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 164, NodeFIFO, "FIFO(564)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 165, NodeFIFO, "FIFO(84)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 166, NodeFIFO, "FIFO(84)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 167, NodeFIFO, "FIFO(84)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 168, NodeFIFO, "FIFO(84)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 169, NodeFIFO, "FIFO(35)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 170, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 171, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 172, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 173, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 174, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 175, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 176, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 177, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 178, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 179, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 180, NodeFIFO, "FIFO(103)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 181, NodeFIFO, "FIFO(39)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 127, NodePO2FPMult, "PO2FPMult_N1", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:869)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 4, NodeInputMappedReg, "Scalar input (io_pp_value_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 5, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 6, NodeInput, "Input(pp_value)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 60, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:812)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 7, NodeInputMappedReg, "Scalar input (io_dvv_value_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 8, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 9, NodeInput, "Input(dvv_value)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 3, NodeInputMappedReg, "Scalar input (c_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 61, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 13, NodeInputMappedReg, "Scalar input (c_1_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 33, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 32, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 62, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 63, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:67)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 64, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 14, NodeInputMappedReg, "Scalar input (c_1_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:24)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 34, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 31, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 65, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:68)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 66, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:68)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 67, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 15, NodeInputMappedReg, "Scalar input (c_1_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:25)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 35, NodeStreamOffset, "stream offset: 3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 30, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 68, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:69)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 69, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:69)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 70, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 16, NodeInputMappedReg, "Scalar input (c_1_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:26)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 36, NodeStreamOffset, "stream offset: 4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 29, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 71, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:70)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 72, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:70)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 73, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 17, NodeInputMappedReg, "Scalar input (c_1_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:27)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 37, NodeStreamOffset, "stream offset: 5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 28, NodeStreamOffset, "stream offset: -5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:47)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 74, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:71)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 75, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:71)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 76, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 18, NodeInputMappedReg, "Scalar input (c_2_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:29)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 43, NodeStreamOffset, "stream offset: 96", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 42, NodeStreamOffset, "stream offset: -96", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 77, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:72)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 78, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:72)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 79, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 19, NodeInputMappedReg, "Scalar input (c_2_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:30)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 44, NodeStreamOffset, "stream offset: 192", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 182, NodeFIFO, "FIFO(69)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 41, NodeStreamOffset, "stream offset: -192", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 80, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 81, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:73)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 82, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 20, NodeInputMappedReg, "Scalar input (c_2_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:31)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 45, NodeStreamOffset, "stream offset: 288", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 183, NodeFIFO, "FIFO(108)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 40, NodeStreamOffset, "stream offset: -288", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 83, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:74)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 84, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:74)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 85, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 21, NodeInputMappedReg, "Scalar input (c_2_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:32)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 46, NodeStreamOffset, "stream offset: 384", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 184, NodeFIFO, "FIFO(108)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 39, NodeStreamOffset, "stream offset: -384", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 86, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:75)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 87, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:75)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 88, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 22, NodeInputMappedReg, "Scalar input (c_2_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:33)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 47, NodeStreamOffset, "stream offset: 480", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 185, NodeFIFO, "FIFO(108)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 38, NodeStreamOffset, "stream offset: -480", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:53)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 89, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:76)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 90, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:76)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 91, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 23, NodeInputMappedReg, "Scalar input (c_3_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:35)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 53, NodeStreamOffset, "stream offset: 1056", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 186, NodeFIFO, "FIFO(588)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 52, NodeStreamOffset, "stream offset: -1056", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 92, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:77)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 93, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:77)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 94, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 24, NodeInputMappedReg, "Scalar input (c_3_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:36)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 54, NodeStreamOffset, "stream offset: 2112", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 187, NodeFIFO, "FIFO(1068)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 51, NodeStreamOffset, "stream offset: -2112", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 95, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:78)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 96, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:78)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 97, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 25, NodeInputMappedReg, "Scalar input (c_3_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:37)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 55, NodeStreamOffset, "stream offset: 3168", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 188, NodeFIFO, "FIFO(1068)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 50, NodeStreamOffset, "stream offset: -3168", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 98, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:79)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 99, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:79)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 100, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 26, NodeInputMappedReg, "Scalar input (c_3_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:38)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 56, NodeStreamOffset, "stream offset: 4224", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 189, NodeFIFO, "FIFO(1068)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 49, NodeStreamOffset, "stream offset: -4224", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 101, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 102, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 103, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:66)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 27, NodeInputMappedReg, "Scalar input (c_3_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:39)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 57, NodeStreamOffset, "stream offset: 5280", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 48, NodeStreamOffset, "stream offset: -5280", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:59)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 159, NodeFIFO, "FIFO(1068)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 104, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 105, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 106, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 107, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 108, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 10, NodeInputMappedReg, "Scalar input (io_source_container_value_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 11, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 12, NodeInput, "Input(source_container_value)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 109, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:65)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 117, NodeOutput, "Output(pp)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:764)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:21)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 121, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 190, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 119, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 120, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 160, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 122, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 124, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 125, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
PHOTON_NODE_DATA(cpu_mainKernel, 123, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:34)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int CpuMain_has_errors(void)
{	return stored_has_error; }
const char* CpuMain_get_errors(void)
{	return stored_error; }
void CpuMain_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static void CpuMain_static_init(void) 
{
	stored_maxfile = CpuMain_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void CpuMain_free(void)
{
	if(stored_engine != NULL)
		max_unload(stored_engine);
	if(stored_maxfile != NULL)
		max_file_free(stored_maxfile);
	if(stored_error != NULL)
		free(stored_error);
}



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_writeLMem_nonblock(param_address, param_nbytes, instream_cpu_to_lmem);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	CpuMain_writeLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.instream_cpu_to_lmem = instream_cpu_to_lmem;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_writeLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_writeLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_writeLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream cpu_to_lmem */
	size_t instream_size_cpu_to_lmem = param_nbytes;
	if (instream_size_cpu_to_lmem > 0) {
		max_queue_input(actions, "cpu_to_lmem", interface_actions->instream_cpu_to_lmem,instream_size_cpu_to_lmem);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream cpu_to_lmem */
	
	max_ignore_stream(actions, "dvv_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "pp_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "source_container_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "write_lmem" */
	size_t lmem_address_write_lmem = param_address;
	size_t lmem_arr_size_write_lmem = param_nbytes;
	int lmem_burst_size_write_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_address_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_write_lmem, lmem_burst_size_write_lmem );
	}
	if ( (lmem_arr_size_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_arr_size_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_write_lmem, lmem_burst_size_write_lmem );
	}
	if (lmem_arr_size_write_lmem > 0) {
		max_lmem_linear(actions, "write_lmem", lmem_address_write_lmem, lmem_arr_size_write_lmem);
	} else {
		max_ignore_lmem(actions, "write_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "write_lmem" */
	
	max_ignore_lmem(actions, "p" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "pp" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_readLMem_nonblock(param_address, param_nbytes, outstream_lmem_to_cpu);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	CpuMain_readLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.outstream_lmem_to_cpu = outstream_lmem_to_cpu;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_readLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_readLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_readLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "cpu_mainKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "dvv_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream lmem_to_cpu */
	size_t outstream_size_lmem_to_cpu = param_nbytes;
	if (outstream_size_lmem_to_cpu > 0) {
		max_queue_output(actions, "lmem_to_cpu", interface_actions->outstream_lmem_to_cpu,outstream_size_lmem_to_cpu);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream lmem_to_cpu */
	
	max_ignore_stream(actions, "pp_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "source_container_value" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for linear memory-stream "read_lmem" */
	size_t lmem_address_read_lmem = param_address;
	size_t lmem_arr_size_read_lmem = param_nbytes;
	int lmem_burst_size_read_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_address_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_read_lmem, lmem_burst_size_read_lmem );
	}
	if ( (lmem_arr_size_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_arr_size_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_read_lmem, lmem_burst_size_read_lmem );
	}
	if (lmem_arr_size_read_lmem > 0) {
		max_lmem_linear(actions, "read_lmem", lmem_address_read_lmem, lmem_arr_size_read_lmem);
	} else {
		max_ignore_lmem(actions, "read_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "read_lmem" */
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "p" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "pp" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain(
	int64_t param_burst,
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_n1,
	int64_t param_n2,
	int64_t param_offF,
	int64_t param_offM,
	int64_t param_offS,
	int64_t param_xzSize,
	const float *instream_dvv_value,
	const float *instream_pp_value,
	const float *instream_source_container_value)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_nonblock(param_burst, param_c_0, param_c_1_0, param_c_1_1, param_c_1_2, param_c_1_3, param_c_1_4, param_c_2_0, param_c_2_1, param_c_2_2, param_c_2_3, param_c_2_4, param_c_3_0, param_c_3_1, param_c_3_2, param_c_3_3, param_c_3_4, param_n1, param_n2, param_offF, param_offM, param_offS, param_xzSize, instream_dvv_value, instream_pp_value, instream_source_container_value);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_nonblock(
	int64_t param_burst,
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_n1,
	int64_t param_n2,
	int64_t param_offF,
	int64_t param_offM,
	int64_t param_offS,
	int64_t param_xzSize,
	const float *instream_dvv_value,
	const float *instream_pp_value,
	const float *instream_source_container_value)
{
	CpuMain_actions_t interface_actions;
	interface_actions.param_burst = param_burst;
	interface_actions.param_c_0 = param_c_0;
	interface_actions.param_c_1_0 = param_c_1_0;
	interface_actions.param_c_1_1 = param_c_1_1;
	interface_actions.param_c_1_2 = param_c_1_2;
	interface_actions.param_c_1_3 = param_c_1_3;
	interface_actions.param_c_1_4 = param_c_1_4;
	interface_actions.param_c_2_0 = param_c_2_0;
	interface_actions.param_c_2_1 = param_c_2_1;
	interface_actions.param_c_2_2 = param_c_2_2;
	interface_actions.param_c_2_3 = param_c_2_3;
	interface_actions.param_c_2_4 = param_c_2_4;
	interface_actions.param_c_3_0 = param_c_3_0;
	interface_actions.param_c_3_1 = param_c_3_1;
	interface_actions.param_c_3_2 = param_c_3_2;
	interface_actions.param_c_3_3 = param_c_3_3;
	interface_actions.param_c_3_4 = param_c_3_4;
	interface_actions.param_n1 = param_n1;
	interface_actions.param_n2 = param_n2;
	interface_actions.param_offF = param_offF;
	interface_actions.param_offM = param_offM;
	interface_actions.param_offS = param_offS;
	interface_actions.param_xzSize = param_xzSize;
	interface_actions.instream_dvv_value = instream_dvv_value;
	interface_actions.instream_pp_value = instream_pp_value;
	interface_actions.instream_source_container_value = instream_source_container_value;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_burst = interface_actions->param_burst;
	
	double param_c_0 = interface_actions->param_c_0;
	
	double param_c_1_0 = interface_actions->param_c_1_0;
	
	double param_c_1_1 = interface_actions->param_c_1_1;
	
	double param_c_1_2 = interface_actions->param_c_1_2;
	
	double param_c_1_3 = interface_actions->param_c_1_3;
	
	double param_c_1_4 = interface_actions->param_c_1_4;
	
	double param_c_2_0 = interface_actions->param_c_2_0;
	
	double param_c_2_1 = interface_actions->param_c_2_1;
	
	double param_c_2_2 = interface_actions->param_c_2_2;
	
	double param_c_2_3 = interface_actions->param_c_2_3;
	
	double param_c_2_4 = interface_actions->param_c_2_4;
	
	double param_c_3_0 = interface_actions->param_c_3_0;
	
	double param_c_3_1 = interface_actions->param_c_3_1;
	
	double param_c_3_2 = interface_actions->param_c_3_2;
	
	double param_c_3_3 = interface_actions->param_c_3_3;
	
	double param_c_3_4 = interface_actions->param_c_3_4;
	
	int64_t param_n1 = interface_actions->param_n1;
	
	int64_t param_n2 = interface_actions->param_n2;
	
	int64_t param_offF = interface_actions->param_offF;
	
	int64_t param_offM = interface_actions->param_offM;
	
	int64_t param_offS = interface_actions->param_offS;
	
	int64_t param_xzSize = interface_actions->param_xzSize;
	

	/* temporary variables */
	int64_t tmp_0 = (param_n1 * 8);
	int64_t tmp_1 = (param_burst * 8);

	/* code for scalar cpu_mainKernel.run_cycle_count */
	uint64_t ticks_cpu_mainKernel = 8;
	max_set_ticks(actions, "cpu_mainKernel", 8);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.run_cycle_count*/
	
	/* code for scalar cpu_mainKernel.c_0 */
	double inscalar_cpu_mainKernel_c_0 = param_c_0;
	max_set_double(actions, "cpu_mainKernel", "c_0", inscalar_cpu_mainKernel_c_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_0*/
	
	/* code for scalar cpu_mainKernel.c_1_0 */
	double inscalar_cpu_mainKernel_c_1_0 = param_c_1_0;
	max_set_double(actions, "cpu_mainKernel", "c_1_0", inscalar_cpu_mainKernel_c_1_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_1_0*/
	
	/* code for scalar cpu_mainKernel.c_1_1 */
	double inscalar_cpu_mainKernel_c_1_1 = param_c_1_1;
	max_set_double(actions, "cpu_mainKernel", "c_1_1", inscalar_cpu_mainKernel_c_1_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_1_1*/
	
	/* code for scalar cpu_mainKernel.c_1_2 */
	double inscalar_cpu_mainKernel_c_1_2 = param_c_1_2;
	max_set_double(actions, "cpu_mainKernel", "c_1_2", inscalar_cpu_mainKernel_c_1_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_1_2*/
	
	/* code for scalar cpu_mainKernel.c_1_3 */
	double inscalar_cpu_mainKernel_c_1_3 = param_c_1_3;
	max_set_double(actions, "cpu_mainKernel", "c_1_3", inscalar_cpu_mainKernel_c_1_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_1_3*/
	
	/* code for scalar cpu_mainKernel.c_1_4 */
	double inscalar_cpu_mainKernel_c_1_4 = param_c_1_4;
	max_set_double(actions, "cpu_mainKernel", "c_1_4", inscalar_cpu_mainKernel_c_1_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_1_4*/
	
	/* code for scalar cpu_mainKernel.c_2_0 */
	double inscalar_cpu_mainKernel_c_2_0 = param_c_2_0;
	max_set_double(actions, "cpu_mainKernel", "c_2_0", inscalar_cpu_mainKernel_c_2_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_2_0*/
	
	/* code for scalar cpu_mainKernel.c_2_1 */
	double inscalar_cpu_mainKernel_c_2_1 = param_c_2_1;
	max_set_double(actions, "cpu_mainKernel", "c_2_1", inscalar_cpu_mainKernel_c_2_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_2_1*/
	
	/* code for scalar cpu_mainKernel.c_2_2 */
	double inscalar_cpu_mainKernel_c_2_2 = param_c_2_2;
	max_set_double(actions, "cpu_mainKernel", "c_2_2", inscalar_cpu_mainKernel_c_2_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_2_2*/
	
	/* code for scalar cpu_mainKernel.c_2_3 */
	double inscalar_cpu_mainKernel_c_2_3 = param_c_2_3;
	max_set_double(actions, "cpu_mainKernel", "c_2_3", inscalar_cpu_mainKernel_c_2_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_2_3*/
	
	/* code for scalar cpu_mainKernel.c_2_4 */
	double inscalar_cpu_mainKernel_c_2_4 = param_c_2_4;
	max_set_double(actions, "cpu_mainKernel", "c_2_4", inscalar_cpu_mainKernel_c_2_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_2_4*/
	
	/* code for scalar cpu_mainKernel.c_3_0 */
	double inscalar_cpu_mainKernel_c_3_0 = param_c_3_0;
	max_set_double(actions, "cpu_mainKernel", "c_3_0", inscalar_cpu_mainKernel_c_3_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_3_0*/
	
	/* code for scalar cpu_mainKernel.c_3_1 */
	double inscalar_cpu_mainKernel_c_3_1 = param_c_3_1;
	max_set_double(actions, "cpu_mainKernel", "c_3_1", inscalar_cpu_mainKernel_c_3_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_3_1*/
	
	/* code for scalar cpu_mainKernel.c_3_2 */
	double inscalar_cpu_mainKernel_c_3_2 = param_c_3_2;
	max_set_double(actions, "cpu_mainKernel", "c_3_2", inscalar_cpu_mainKernel_c_3_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_3_2*/
	
	/* code for scalar cpu_mainKernel.c_3_3 */
	double inscalar_cpu_mainKernel_c_3_3 = param_c_3_3;
	max_set_double(actions, "cpu_mainKernel", "c_3_3", inscalar_cpu_mainKernel_c_3_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_3_3*/
	
	/* code for scalar cpu_mainKernel.c_3_4 */
	double inscalar_cpu_mainKernel_c_3_4 = param_c_3_4;
	max_set_double(actions, "cpu_mainKernel", "c_3_4", inscalar_cpu_mainKernel_c_3_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar cpu_mainKernel.c_3_4*/
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream dvv_value */
	size_t instream_size_dvv_value = 32;
	if (instream_size_dvv_value > 0) {
		max_queue_input(actions, "dvv_value", interface_actions->instream_dvv_value,instream_size_dvv_value);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream dvv_value */
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream pp_value */
	size_t instream_size_pp_value = 32;
	if (instream_size_pp_value > 0) {
		max_queue_input(actions, "pp_value", interface_actions->instream_pp_value,instream_size_pp_value);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream pp_value */
	
	/* code for stream source_container_value */
	size_t instream_size_source_container_value = 32;
	if (instream_size_source_container_value > 0) {
		max_queue_input(actions, "source_container_value", interface_actions->instream_source_container_value,instream_size_source_container_value);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream source_container_value */
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for blocked memory-stream "p" */
	size_t lmem_address_p = 0;
	size_t lmem_array_size_fast_p = tmp_0;
	size_t lmem_array_size_med_p = param_n2;
	size_t lmem_array_size_slow_p = param_n2;
	size_t lmem_rw_size_fast_p = tmp_1;
	size_t lmem_rw_size_med_p = param_xzSize;
	size_t lmem_rw_size_slow_p = param_xzSize;
	size_t lmem_offset_fast_p = param_offF;
	size_t lmem_offset_med_p = param_offM;
	size_t lmem_offset_slow_p = param_offS;
	int lmem_burst_size_p = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_address_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_p, lmem_burst_size_p );
	}
	if ( (lmem_array_size_fast_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_array_size_fast_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_array_size_fast_p, lmem_burst_size_p );
	}
	if ( (lmem_rw_size_fast_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_rw_size_fast_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_rw_size_fast_p, lmem_burst_size_p );
	}
	if ( (lmem_offset_fast_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_offset_fast_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_offset_fast_p, lmem_burst_size_p );
	}
	if ( (lmem_rw_size_fast_p > 0) && (lmem_rw_size_med_p > 0) && (lmem_rw_size_slow_p > 0) && (lmem_array_size_fast_p > 0) && (lmem_array_size_med_p > 0) && (lmem_array_size_slow_p > 0) ) {
		max_lmem_blocked(actions, "p", lmem_address_p, lmem_array_size_fast_p, lmem_array_size_med_p, lmem_array_size_slow_p, lmem_rw_size_fast_p, lmem_rw_size_med_p, lmem_rw_size_slow_p, lmem_offset_fast_p, lmem_offset_med_p, lmem_offset_slow_p);
	} else {
		max_ignore_lmem(actions, "p");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for blocked memory-stream "p" */
	
	max_ignore_lmem(actions, "pp" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4Kc3RhdGljIG1heF9maWxlX3QgKnN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKc3RhdGljIG1heF9lbmdpbmVfdCAqc3RvcmVkX2VuZ2luZSA9IE5VTEw7CnN0YXRpYyBj
aGFyICpzdG9yZWRfZXJyb3IgPSBOVUxMOwpzdGF0aWMgaW50IHN0b3JlZF9oYXNfZXJyb3IgPSAw
OwpzdGF0aWMgcHRocmVhZF9vbmNlX3Qgc2xpY19ic19pc19pbml0aWFsaXNlZCA9IFBUSFJFQURf
T05DRV9JTklUOwoKc3RhdGljIHZvaWQgc2V0X2Vycm9yKGNvbnN0IGNoYXIgKmVycm9yX3N0cikK
ewoJc3RvcmVkX2hhc19lcnJvciA9IDE7IAoJaWYoc3RvcmVkX2Vycm9yID09IE5VTEwpIHsKCQlz
dG9yZWRfZXJyb3IgPSBzdHJkdXAoZXJyb3Jfc3RyKTsKCX0gZWxzZSB7CgkJY2hhciAqbmVyciA9
IG1hbGxvYyhzdHJsZW4oc3RvcmVkX2Vycm9yKSArIHN0cmxlbihlcnJvcl9zdHIpICsgMik7CgkJ
c3ByaW50ZihuZXJyLCAiJXNcbiVzIiwgc3RvcmVkX2Vycm9yLCBlcnJvcl9zdHIpOwoJCWZyZWUo
c3RvcmVkX2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBuZXJyOwoJfQp9CnN0YXRpYyB2b2lkIHNl
dF9lcnJvcl9hbmRfZnJlZShjaGFyICplcnJvcl9zdHIpewoJc2V0X2Vycm9yKGVycm9yX3N0cik7
CglmcmVlKGVycm9yX3N0cik7Cn0KaW50IENwdU1haW5faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVy
biBzdG9yZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIENwdU1haW5fZ2V0X2Vycm9ycyh2b2lk
KQp7CXJldHVybiBzdG9yZWRfZXJyb3I7IH0Kdm9pZCBDcHVNYWluX2NsZWFyX2Vycm9ycyh2b2lk
KQp7CglmcmVlKHN0b3JlZF9lcnJvcik7CglzdG9yZWRfZXJyb3IgPSBOVUxMOwoJc3RvcmVkX2hh
c19lcnJvciA9IDA7Cn0KCnN0YXRpYyB2b2lkIENwdU1haW5fc3RhdGljX2luaXQodm9pZCkgCnsK
CXN0b3JlZF9tYXhmaWxlID0gQ3B1TWFpbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0g
TlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZp
bGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFi
bGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFs
X2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9n
bG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChN
QVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNf
bW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3Vz
ID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJc3RvcmVkX2VuZ2luZSA9
IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZp
bGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElD
X0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJs
ZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7
CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNf
dHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCglt
YXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lk
IENwdU1haW5fZnJlZSh2b2lkKQp7CglpZihzdG9yZWRfZW5naW5lICE9IE5VTEwpCgkJbWF4X3Vu
bG9hZChzdG9yZWRfZW5naW5lKTsKCWlmKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpCgkJbWF4X2Zp
bGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CglpZihzdG9yZWRfZXJyb3IgIT0gTlVMTCkKCQlmcmVl
KHN0b3JlZF9lcnJvcik7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIHdyaXRlTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgp2b2lkIENwdU1haW5fd3JpdGVM
TWVtKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNzLAoJaW50NjRfdCBwYXJhbV9uYnl0ZXMsCgljb25z
dCB2b2lkICppbnN0cmVhbV9jcHVfdG9fbG1lbSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4
ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
Ik1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybjsgfQoJfQoJbWF4X3J1bl90ICpydW4g
PSBDcHVNYWluX3dyaXRlTE1lbV9ub25ibG9jayhwYXJhbV9hZGRyZXNzLCBwYXJhbV9uYnl0ZXMs
IGluc3RyZWFtX2NwdV90b19sbWVtKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3Jl
dHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1l
bV9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fYWRkcmVzcywKCWludDY0X3QgcGFyYW1fbmJ5dGVz
LAoJY29uc3Qgdm9pZCAqaW5zdHJlYW1fY3B1X3RvX2xtZW0pCnsKCUNwdU1haW5fd3JpdGVMTWVt
X2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2Fk
ZHJlc3MgPSBwYXJhbV9hZGRyZXNzOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbmJ5dGVzID0g
cGFyYW1fbmJ5dGVzOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fY3B1X3RvX2xtZW0gPSBp
bnN0cmVhbV9jcHVfdG9fbG1lbTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5p
dGlhbGlzZWQsIENwdU1haW5fc3RhdGljX2luaXQpOwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVM
TCkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNF
X0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdh
cyBub3QgbG9hZGVkLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
c1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoYWN0aW9uc1swXSA9PSBOVUxMKSB7IAoJCWlm
KG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09O
X0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gYnVpbGQgYWN0
aW9ucyIpO3JldHVybiBOVUxMOyB9Cgl9CgltYXhfdmFsaWRhdGUoYWN0aW9uc1swXSk7CglpZigh
bWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxz
ZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9y
cykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9u
YmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlp
ZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRf
T05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0
aW9ucy4iKTtyZXR1cm4gTlVMTDsgfQoJfQoJaWYoIW1heF9vayhzdG9yZWRfZW5naW5lLT5lcnJv
cnMpICB8fCAhbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0
KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNb
MF0tPmVycm9ycykpOyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRf
ZW5naW5lLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zWzBdKTsKCXJldHVybiBydW47Cn0KCnZvaWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuKAoJbWF4
X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5fd3JpdGVMTWVtX3J1bl9ub25i
bG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlm
IChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rp
b25zLiIpO3JldHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWlu
X3dyaXRlTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5f
d3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1h
eGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnNbMV07CglhY3Rpb25zWzBdID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykp
IHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhf
cnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zLCAxKTsK
CWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2Fj
dGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdy
b3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRl
TE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBh
Y3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZv
aWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgQ3B1TWFp
bl93cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJLyogTm90IHN0cmlj
dGx5IGNvcnJlY3QsIGJlY2F1c2UgZXhwbGljaXRseSBsb2NraW5nIGFuIGVuZ2luZSBoZXJlLiAq
LwoJbWF4X2VuZ2luZV90ICplbmdpbmUgPSBtYXhfbG9ja19hbnkoZ3JvdXApOwoJaWYoZW5naW5l
ID09IE5VTEwpIHJldHVybjsKCUNwdU1haW5fd3JpdGVMTWVtX3J1bihlbmdpbmUsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCW1heF91bmxvY2soZW5naW5lKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ3dyaXRlTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24g
dGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRp
YXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1h
eF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3
aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5f
Z3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICog
XHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2Vf
YWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1lbV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3Vw
X3QgKmdyb3VwLCBDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxM
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0
ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91
cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoK
Ci8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnd3JpdGVMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBh
cnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rp
b25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBh
Y3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2Vf
YWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBDcHVN
YWluX3dyaXRlTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVNYWlu
X3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAq
cnVuID0gQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgp
OwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0K
CX0KCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICd3cml0ZUxNZW0n
LgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBh
cnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9m
IGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRo
ZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBv
ciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxl
ZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJh
bSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0
dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fd3JpdGVMTWVtX3J1
bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fd3JpdGVM
TWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4Zmls
ZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXkpOwoJaW50IGk7CgltYXhfYWN0
YXJyYXlfdCAqYXJyX2FjdGFycmF5WzFdOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zWzFd
OwoJYXJyX2FjdGFycmF5WzBdID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXkt
PnNpemUpOwoJaWYoYXJyX2FjdGFycmF5WzBdID09IE5VTEwpIHJldHVybiBOVUxMOwoJYXJyX2Fj
dGlvbnNbMF0gPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCop
KTsKCWZvcihpPTA7IGkgPCBhcnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykgewoJCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zW2ldKTsKCQlpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFy
cl9hY3Rpb25zWzBdW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhcnJfYWN0YXJyYXlb
MF0sIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X211bHRp
X25vbmJsb2NrKGVuZ2FycmF5LCBhcnJfYWN0YXJyYXksIDEgKTsKCWZvciAoaT0wOyBpIDwgYXJy
X2FjdGFycmF5WzBdLT5zaXplOyBpKyspIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1sw
XVtpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFycl9hY3RhcnJheVswXSk7CglmcmVlKGFycl9h
Y3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3Rh
dGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhf
YWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRp
bGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVy
ZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxw
YXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9u
cyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVu
LCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBDcHVNYWluX3dy
aXRlTE1lbV9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIENwdU1haW5fd3JpdGVMTWVtX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBt
YXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMIHx8ICFt
YXhfb2sobWF4ZmlsZS0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgoJaW50NjRfdCBwYXJhbV9hZGRy
ZXNzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2FkZHJlc3M7CgkKCWludDY0X3QgcGFyYW1f
bmJ5dGVzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX25ieXRlczsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgInJ1bl9jeWNsZV9jb3VudCIgKTsKCWlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2Nh
bGFyKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzAiICk7CglpZighbWF4X29rKGFjdGlv
bnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
Y3B1X21haW5LZXJuZWwiLCAiY18xXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykp
IHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJu
ZWwiLCAiY18xXzEiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxM
OwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18xXzIi
ICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdu
b3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18xXzMiICk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18xXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1
X21haW5LZXJuZWwiLCAiY18yXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwi
LCAiY18yXzEiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18yXzIiICk7
CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3Jl
X3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18yXzMiICk7CglpZighbWF4X29r
KGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18yXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21h
aW5LZXJuZWwiLCAiY18zXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVy
biBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAi
Y18zXzEiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18zXzIiICk7Cglp
ZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3Nj
YWxhcihhY3Rpb25zLCAiY3B1X21haW5LZXJuZWwiLCAiY18zXzMiICk7CglpZighbWF4X29rKGFj
dGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25z
LCAiY3B1X21haW5LZXJuZWwiLCAiY18zXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gY3B1X3RvX2xtZW0gKi8KCXNp
emVfdCBpbnN0cmVhbV9zaXplX2NwdV90b19sbWVtID0gcGFyYW1fbmJ5dGVzOwoJaWYgKGluc3Ry
ZWFtX3NpemVfY3B1X3RvX2xtZW0gPiAwKSB7CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJj
cHVfdG9fbG1lbSIsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9jcHVfdG9fbG1lbSxpbnN0
cmVhbV9zaXplX2NwdV90b19sbWVtKTsKCQlpZiAoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gY3B1X3RvX2xtZW0gKi8K
CQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImR2dl92YWx1ZSIgKTsKCWlmKCFtYXhfb2so
YWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlv
bnMsICJsbWVtX3RvX2NwdSIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJu
IE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJwcF92YWx1ZSIgKTsKCWlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFt
KGFjdGlvbnMsICJzb3VyY2VfY29udGFpbmVyX3ZhbHVlIiApOwoJaWYoIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJyZWFk
X2xtZW0iICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJ
CgkvKiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAid3JpdGVfbG1lbSIgKi8KCXNpemVf
dCBsbWVtX2FkZHJlc3Nfd3JpdGVfbG1lbSA9IHBhcmFtX2FkZHJlc3M7CglzaXplX3QgbG1lbV9h
cnJfc2l6ZV93cml0ZV9sbWVtID0gcGFyYW1fbmJ5dGVzOwoJaW50IGxtZW1fYnVyc3Rfc2l6ZV93
cml0ZV9sbWVtID0gbWF4X2dldF9idXJzdF9zaXplKG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1l
bV9hZGRyZXNzX3dyaXRlX2xtZW0gJSBsbWVtX2J1cnN0X3NpemVfd3JpdGVfbG1lbSkgIT0gMCAp
IHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHdyaXRlX2xt
ZW0gcGFyYW1ldGVyICdsbWVtX2FkZHJlc3Nfd3JpdGVfbG1lbScgaXMgc2V0IHRvICV6ZCBieXRl
czsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5F
X18sIGxtZW1fYWRkcmVzc193cml0ZV9sbWVtLCBsbWVtX2J1cnN0X3NpemVfd3JpdGVfbG1lbSAp
OwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtICUgbG1lbV9idXJzdF9zaXplX3dy
aXRlX2xtZW0pICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVk
IDogTE1lbSB3cml0ZV9sbWVtIHBhcmFtZXRlciAnbG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtJyBp
cyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIs
IF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtLCBsbWVtX2J1cnN0
X3NpemVfd3JpdGVfbG1lbSApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVfd3JpdGVfbG1lbSA+IDAp
IHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgIndyaXRlX2xtZW0iLCBsbWVtX2FkZHJlc3Nf
d3JpdGVfbG1lbSwgbG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtKTsKCX0gZWxzZSB7CgkJbWF4X2ln
bm9yZV9sbWVtKGFjdGlvbnMsICJ3cml0ZV9sbWVtIik7Cgl9CglpZiAoICFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJLyogZW5kIG9mIGNvZGUgZm9yIGxpbmVhciBtZW1v
cnktc3RyZWFtICJ3cml0ZV9sbWVtIiAqLwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInAi
ICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgltYXhf
aWdub3JlX2xtZW0oYWN0aW9ucywgInBwIiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9y
cykgKSByZXR1cm4gTlVMTDsKCQoJcmV0dXJuIGFjdGlvbnM7Cn0KCgoKCi8qLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgcmVhZExN
ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSov
CgoKdm9pZCBDcHVNYWluX3JlYWRMTWVtKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNzLAoJaW50NjRf
dCBwYXJhbV9uYnl0ZXMsCgl2b2lkICpvdXRzdHJlYW1fbG1lbV90b19jcHUpCnsKCSh2b2lkKSBw
dGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIENwdU1haW5fc3RhdGljX2luaXQp
OwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVMTCkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQll
bHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdhcyBub3QgbG9hZGVkLiIpOyByZXR1cm47IH0KCX0K
CW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9yZWFkTE1lbV9ub25ibG9jayhwYXJhbV9hZGRyZXNz
LCBwYXJhbV9uYnl0ZXMsIG91dHN0cmVhbV9sbWVtX3RvX2NwdSk7CglpZihydW4gPT0gTlVMTCkg
eyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0Vf
QUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBy
dW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAq
Q3B1TWFpbl9yZWFkTE1lbV9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fYWRkcmVzcywKCWludDY0
X3QgcGFyYW1fbmJ5dGVzLAoJdm9pZCAqb3V0c3RyZWFtX2xtZW1fdG9fY3B1KQp7CglDcHVNYWlu
X3JlYWRMTWVtX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25z
LnBhcmFtX2FkZHJlc3MgPSBwYXJhbV9hZGRyZXNzOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1f
bmJ5dGVzID0gcGFyYW1fbmJ5dGVzOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX2xtZW1f
dG9fY3B1ID0gb3V0c3RyZWFtX2xtZW1fdG9fY3B1OwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4
ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
Ik1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybiBOVUxMOyB9Cgl9CgltYXhfYWN0aW9u
c190ICphY3Rpb25zWzFdOwoJYWN0aW9uc1swXSA9IENwdU1haW5fcmVhZExNZW1fY29udmVydChz
dG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnNbMF0gPT0gTlVM
TCkgeyAKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRv
IGJ1aWxkIGFjdGlvbnMiKTtyZXR1cm4gTlVMTDsgfQoJfQoJbWF4X3ZhbGlkYXRlKGFjdGlvbnNb
MF0pOwoJaWYoIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19n
ZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9y
dCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25z
WzBdLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVu
X211bHRpX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIDEpOwoJaWYocnVuID09IE5V
TEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUg
dG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuIE5VTEw7IH0KCX0KCWlmKCFtYXhfb2soc3RvcmVkX2Vu
Z2luZS0+ZXJyb3JzKSAgfHwgIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4
X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJS
T1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2Uoc3RvcmVkX2VuZ2luZS0+ZXJyb3JzKSk7IHJldHVybiBOVUxMO30KCX0KCW1heF9hY3Rpb25z
X2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIENwdU1haW5fcmVhZExNZW1f
cnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX3JlYWRMTWVtX2FjdGlvbnNfdCAq
aW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9yZWFkTE1lbV9y
dW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkg
eyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0Vf
QUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBy
dW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAq
Q3B1TWFpbl9yZWFkTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNw
dU1haW5fcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJbWF4X2FjdGlv
bnNfdCAqYWN0aW9uc1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVNYWluX3JlYWRMTWVtX2NvbnZlcnQo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoIW1heF9vayhhY3Rpb25zWzBdLT5lcnJv
cnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZB
Q0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUo
bWF4X2Vycm9yc190cmFjZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJ
bWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX211bHRpX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucywg
MSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09O
RklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBz
ZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTsgcmV0dXJuIE5VTEw7IH0KCX0KCW1h
eF9hY3Rpb25zX2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmll
ZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdy
ZWFkTE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJh
bSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRo
ZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICov
CnZvaWQgQ3B1TWFpbl9yZWFkTE1lbV9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBDcHVN
YWluX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCS8qIE5vdCBzdHJp
Y3RseSBjb3JyZWN0LCBiZWNhdXNlIGV4cGxpY2l0bHkgbG9ja2luZyBhbiBlbmdpbmUgaGVyZS4g
Ki8KCW1heF9lbmdpbmVfdCAqZW5naW5lID0gbWF4X2xvY2tfYW55KGdyb3VwKTsKCWlmKGVuZ2lu
ZSA9PSBOVUxMKSByZXR1cm47CglDcHVNYWluX3JlYWRMTWVtX3J1bihlbmdpbmUsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCW1heF91bmxvY2soZW5naW5lKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ3JlYWRMTWVtJy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0
aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlh
dGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4
X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdp
dGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9n
cm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBc
cGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9h
Y3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRp
b24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwpt
YXhfcnVuX3QgKkNwdU1haW5fcmVhZExNZW1fcnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90
ICpncm91cCwgQ3B1TWFpbl9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7Cglt
YXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl9yZWFkTE1lbV9jb252ZXJ0KG1heGZpbGUs
IGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7Cglp
ZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFj
dGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBh
Y3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoq
CiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkg
b2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBU
aGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9u
cyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlv
bnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgQ3B1TWFpbl9y
ZWFkTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVNYWluX3JlYWRM
TWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBD
cHVNYWluX3JlYWRMTWVtX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJaWYocnVuID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFY
X0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNl
IHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuOyB9Cgl9CgltYXhf
d2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5v
bi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0nLgogKiAKICoK
ICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBl
bmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFj
ZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMg
b2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9u
b3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhh
dCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVu
Z2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJm
YWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFu
ZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNh
c2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fcmVhZExNZW1fcnVuX2FycmF5X25v
bmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgQ3B1TWFpbl9yZWFkTE1lbV9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5n
YXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5KTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFy
cl9hY3RhcnJheVsxXTsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9uc1sxXTsKCWFycl9hY3Rh
cnJheVswXSA9IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlm
KGFycl9hY3RhcnJheVswXSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWFycl9hY3Rpb25zWzBdID0g
bWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IoaT0w
OyBpIDwgYXJyX2FjdGFycmF5WzBdLT5zaXplOyBpKyspIHsKCQltYXhfYWN0aW9uc190ICphY3Rp
b25zID0gQ3B1TWFpbl9yZWFkTE1lbV9jb252ZXJ0KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25z
W2ldKTsKCQlpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zWzBd
W2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhcnJfYWN0YXJyYXlbMF0sIGksIGFjdGlv
bnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X211bHRpX25vbmJsb2NrKGVu
Z2FycmF5LCBhcnJfYWN0YXJyYXksIDEgKTsKCWZvciAoaT0wOyBpIDwgYXJyX2FjdGFycmF5WzBd
LT5zaXplOyBpKyspIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1swXVtpXSk7IH0KCW1h
eF9hY3RhcnJheV9mcmVlKGFycl9hY3RhcnJheVswXSk7CglmcmVlKGFycl9hY3Rpb25zWzBdKTsK
CXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFj
ZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0
cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlv
biB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICog
XHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAq
IFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGlu
IGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBDcHVNYWluX3JlYWRMTWVtX2NvbnZl
cnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgQ3B1TWFpbl9yZWFkTE1lbV9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zKQp7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gbWF4X2FjdGlvbnNfaW5p
dChtYXhmaWxlLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCB8fCAhbWF4X29rKG1heGZpbGUt
PmVycm9ycykpIHJldHVybiBOVUxMOwoKCWludDY0X3QgcGFyYW1fYWRkcmVzcyA9IGludGVyZmFj
ZV9hY3Rpb25zLT5wYXJhbV9hZGRyZXNzOwoJCglpbnQ2NF90IHBhcmFtX25ieXRlcyA9IGludGVy
ZmFjZV9hY3Rpb25zLT5wYXJhbV9uYnl0ZXM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJjcHVfbWFpbktlcm5lbCIsICJydW5fY3ljbGVfY291bnQiICk7CglpZighbWF4X29rKGFjdGlv
bnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
Y3B1X21haW5LZXJuZWwiLCAiY18wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVs
IiwgImNfMV8wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfMV8xIiAp
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9y
ZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfMV8yIiApOwoJaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0
aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfMV8zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5l
cnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9t
YWluS2VybmVsIiwgImNfMV80IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwg
ImNfMl8wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJ
bWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfMl8xIiApOwoJ
aWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfMl8yIiApOwoJaWYoIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9u
cywgImNwdV9tYWluS2VybmVsIiwgImNfMl8zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJv
cnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWlu
S2VybmVsIiwgImNfMl80IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4g
TlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNf
M18wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfM18xIiApOwoJaWYo
IW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2Fs
YXIoYWN0aW9ucywgImNwdV9tYWluS2VybmVsIiwgImNfM18yIiApOwoJaWYoIW1heF9vayhhY3Rp
b25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywg
ImNwdV9tYWluS2VybmVsIiwgImNfM18zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNwdV9tYWluS2Vy
bmVsIiwgImNfM180IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVM
TDsKCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImNwdV90b19sbWVtIiApOwoJaWYoIW1h
eF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zdHJlYW0o
YWN0aW9ucywgImR2dl92YWx1ZSIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBsbWVtX3RvX2NwdSAqLwoJc2l6ZV90IG91
dHN0cmVhbV9zaXplX2xtZW1fdG9fY3B1ID0gcGFyYW1fbmJ5dGVzOwoJaWYgKG91dHN0cmVhbV9z
aXplX2xtZW1fdG9fY3B1ID4gMCkgewoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgImxtZW1f
dG9fY3B1IiwgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9sbWVtX3RvX2NwdSxvdXRzdHJl
YW1fc2l6ZV9sbWVtX3RvX2NwdSk7CgkJaWYgKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIGxtZW1fdG9fY3B1ICovCgkK
CW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJwcF92YWx1ZSIgKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMs
ICJzb3VyY2VfY29udGFpbmVyX3ZhbHVlIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gInJlYWRf
bG1lbSIgKi8KCXNpemVfdCBsbWVtX2FkZHJlc3NfcmVhZF9sbWVtID0gcGFyYW1fYWRkcmVzczsK
CXNpemVfdCBsbWVtX2Fycl9zaXplX3JlYWRfbG1lbSA9IHBhcmFtX25ieXRlczsKCWludCBsbWVt
X2J1cnN0X3NpemVfcmVhZF9sbWVtID0gbWF4X2dldF9idXJzdF9zaXplKG1heGZpbGUsIE5VTEwp
OwoJaWYgKCAobG1lbV9hZGRyZXNzX3JlYWRfbG1lbSAlIGxtZW1fYnVyc3Rfc2l6ZV9yZWFkX2xt
ZW0pICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1l
bSByZWFkX2xtZW0gcGFyYW1ldGVyICdsbWVtX2FkZHJlc3NfcmVhZF9sbWVtJyBpcyBzZXQgdG8g
JXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9f
LCBfX0xJTkVfXywgbG1lbV9hZGRyZXNzX3JlYWRfbG1lbSwgbG1lbV9idXJzdF9zaXplX3JlYWRf
bG1lbSApOwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0gJSBsbWVtX2J1cnN0X3Np
emVfcmVhZF9sbWVtKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAl
czolZCA6IExNZW0gcmVhZF9sbWVtIHBhcmFtZXRlciAnbG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0n
IGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xu
IiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2Fycl9zaXplX3JlYWRfbG1lbSwgbG1lbV9idXJz
dF9zaXplX3JlYWRfbG1lbSApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVfcmVhZF9sbWVtID4gMCkg
ewoJCW1heF9sbWVtX2xpbmVhcihhY3Rpb25zLCAicmVhZF9sbWVtIiwgbG1lbV9hZGRyZXNzX3Jl
YWRfbG1lbSwgbG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0pOwoJfSBlbHNlIHsKCQltYXhfaWdub3Jl
X2xtZW0oYWN0aW9ucywgInJlYWRfbG1lbSIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykgKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0
cmVhbSAicmVhZF9sbWVtIiAqLwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgIndyaXRlX2xt
ZW0iICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInAiICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSApIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInBwIiApOwoJ
aWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJcmV0dXJuIGFj
dGlvbnM7Cn0KCgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKdm9pZCBDcHVNYWluKAoJaW50NjRfdCBwYXJh
bV9idXJzdCwKCWRvdWJsZSBwYXJhbV9jXzAsCglkb3VibGUgcGFyYW1fY18xXzAsCglkb3VibGUg
cGFyYW1fY18xXzEsCglkb3VibGUgcGFyYW1fY18xXzIsCglkb3VibGUgcGFyYW1fY18xXzMsCglk
b3VibGUgcGFyYW1fY18xXzQsCglkb3VibGUgcGFyYW1fY18yXzAsCglkb3VibGUgcGFyYW1fY18y
XzEsCglkb3VibGUgcGFyYW1fY18yXzIsCglkb3VibGUgcGFyYW1fY18yXzMsCglkb3VibGUgcGFy
YW1fY18yXzQsCglkb3VibGUgcGFyYW1fY18zXzAsCglkb3VibGUgcGFyYW1fY18zXzEsCglkb3Vi
bGUgcGFyYW1fY18zXzIsCglkb3VibGUgcGFyYW1fY18zXzMsCglkb3VibGUgcGFyYW1fY18zXzQs
CglpbnQ2NF90IHBhcmFtX24xLAoJaW50NjRfdCBwYXJhbV9uMiwKCWludDY0X3QgcGFyYW1fb2Zm
RiwKCWludDY0X3QgcGFyYW1fb2ZmTSwKCWludDY0X3QgcGFyYW1fb2ZmUywKCWludDY0X3QgcGFy
YW1feHpTaXplLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX2R2dl92YWx1ZSwKCWNvbnN0IGZsb2F0
ICppbnN0cmVhbV9wcF92YWx1ZSwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV9zb3VyY2VfY29udGFp
bmVyX3ZhbHVlKQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2Vk
LCBDcHVNYWluX3N0YXRpY19pbml0KTsKCWlmKHN0b3JlZF9tYXhmaWxlID09IE5VTEwpIHsKCQlp
ZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiTWF4ZmlsZSB3YXMgbm90IGxv
YWRlZC4iKTsgcmV0dXJuOyB9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5fbm9uYmxvY2so
cGFyYW1fYnVyc3QsIHBhcmFtX2NfMCwgcGFyYW1fY18xXzAsIHBhcmFtX2NfMV8xLCBwYXJhbV9j
XzFfMiwgcGFyYW1fY18xXzMsIHBhcmFtX2NfMV80LCBwYXJhbV9jXzJfMCwgcGFyYW1fY18yXzEs
IHBhcmFtX2NfMl8yLCBwYXJhbV9jXzJfMywgcGFyYW1fY18yXzQsIHBhcmFtX2NfM18wLCBwYXJh
bV9jXzNfMSwgcGFyYW1fY18zXzIsIHBhcmFtX2NfM18zLCBwYXJhbV9jXzNfNCwgcGFyYW1fbjEs
IHBhcmFtX24yLCBwYXJhbV9vZmZGLCBwYXJhbV9vZmZNLCBwYXJhbV9vZmZTLCBwYXJhbV94elNp
emUsIGluc3RyZWFtX2R2dl92YWx1ZSwgaW5zdHJlYW1fcHBfdmFsdWUsIGluc3RyZWFtX3NvdXJj
ZV9jb250YWluZXJfdmFsdWUpOwoJaWYocnVuID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdf
Z2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJv
cnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJu
OyB9Cgl9CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkNwdU1haW5fbm9uYmxvY2soCglp
bnQ2NF90IHBhcmFtX2J1cnN0LAoJZG91YmxlIHBhcmFtX2NfMCwKCWRvdWJsZSBwYXJhbV9jXzFf
MCwKCWRvdWJsZSBwYXJhbV9jXzFfMSwKCWRvdWJsZSBwYXJhbV9jXzFfMiwKCWRvdWJsZSBwYXJh
bV9jXzFfMywKCWRvdWJsZSBwYXJhbV9jXzFfNCwKCWRvdWJsZSBwYXJhbV9jXzJfMCwKCWRvdWJs
ZSBwYXJhbV9jXzJfMSwKCWRvdWJsZSBwYXJhbV9jXzJfMiwKCWRvdWJsZSBwYXJhbV9jXzJfMywK
CWRvdWJsZSBwYXJhbV9jXzJfNCwKCWRvdWJsZSBwYXJhbV9jXzNfMCwKCWRvdWJsZSBwYXJhbV9j
XzNfMSwKCWRvdWJsZSBwYXJhbV9jXzNfMiwKCWRvdWJsZSBwYXJhbV9jXzNfMywKCWRvdWJsZSBw
YXJhbV9jXzNfNCwKCWludDY0X3QgcGFyYW1fbjEsCglpbnQ2NF90IHBhcmFtX24yLAoJaW50NjRf
dCBwYXJhbV9vZmZGLAoJaW50NjRfdCBwYXJhbV9vZmZNLAoJaW50NjRfdCBwYXJhbV9vZmZTLAoJ
aW50NjRfdCBwYXJhbV94elNpemUsCgljb25zdCBmbG9hdCAqaW5zdHJlYW1fZHZ2X3ZhbHVlLAoJ
Y29uc3QgZmxvYXQgKmluc3RyZWFtX3BwX3ZhbHVlLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX3Nv
dXJjZV9jb250YWluZXJfdmFsdWUpCnsKCUNwdU1haW5fYWN0aW9uc190IGludGVyZmFjZV9hY3Rp
b25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fYnVyc3QgPSBwYXJhbV9idXJzdDsKCWludGVy
ZmFjZV9hY3Rpb25zLnBhcmFtX2NfMCA9IHBhcmFtX2NfMDsKCWludGVyZmFjZV9hY3Rpb25zLnBh
cmFtX2NfMV8wID0gcGFyYW1fY18xXzA7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzFfMSA9
IHBhcmFtX2NfMV8xOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18xXzIgPSBwYXJhbV9jXzFf
MjsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMV8zID0gcGFyYW1fY18xXzM7CglpbnRlcmZh
Y2VfYWN0aW9ucy5wYXJhbV9jXzFfNCA9IHBhcmFtX2NfMV80OwoJaW50ZXJmYWNlX2FjdGlvbnMu
cGFyYW1fY18yXzAgPSBwYXJhbV9jXzJfMDsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMl8x
ID0gcGFyYW1fY18yXzE7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzJfMiA9IHBhcmFtX2Nf
Ml8yOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18yXzMgPSBwYXJhbV9jXzJfMzsKCWludGVy
ZmFjZV9hY3Rpb25zLnBhcmFtX2NfMl80ID0gcGFyYW1fY18yXzQ7CglpbnRlcmZhY2VfYWN0aW9u
cy5wYXJhbV9jXzNfMCA9IHBhcmFtX2NfM18wOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18z
XzEgPSBwYXJhbV9jXzNfMTsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfM18yID0gcGFyYW1f
Y18zXzI7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzNfMyA9IHBhcmFtX2NfM18zOwoJaW50
ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18zXzQgPSBwYXJhbV9jXzNfNDsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX24xID0gcGFyYW1fbjE7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9uMiA9IHBh
cmFtX24yOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fb2ZmRiA9IHBhcmFtX29mZkY7CglpbnRl
cmZhY2VfYWN0aW9ucy5wYXJhbV9vZmZNID0gcGFyYW1fb2ZmTTsKCWludGVyZmFjZV9hY3Rpb25z
LnBhcmFtX29mZlMgPSBwYXJhbV9vZmZTOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1feHpTaXpl
ID0gcGFyYW1feHpTaXplOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fZHZ2X3ZhbHVlID0g
aW5zdHJlYW1fZHZ2X3ZhbHVlOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fcHBfdmFsdWUg
PSBpbnN0cmVhbV9wcF92YWx1ZTsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFtX3NvdXJjZV9j
b250YWluZXJfdmFsdWUgPSBpbnN0cmVhbV9zb3VyY2VfY29udGFpbmVyX3ZhbHVlOwoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5p
dCk7CglpZihzdG9yZWRfbWF4ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJ
CWVsc2UgeyBzZXRfZXJyb3IoIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybiBOVUxM
OyB9Cgl9CgltYXhfYWN0aW9uc190ICphY3Rpb25zWzFdOwoJYWN0aW9uc1swXSA9IENwdU1haW5f
Y29udmVydChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zKTsKCWlmKGFjdGlvbnNb
MF0gPT0gTlVMTCkgeyAKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElD
X0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigi
VW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiKTtyZXR1cm4gTlVMTDsgfQoJfQoJbWF4X3ZhbGlkYXRl
KGFjdGlvbnNbMF0pOwoJaWYoIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4
X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJS
T1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X3J1bl90ICpydW4g
PSBtYXhfcnVuX211bHRpX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIDEpOwoJaWYo
cnVuID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFU
SUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9y
KCJVbmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuIE5VTEw7IH0KCX0KCWlmKCFtYXhfb2so
c3RvcmVkX2VuZ2luZS0+ZXJyb3JzKSAgfHwgIW1heF9vayhhY3Rpb25zWzBdLT5lcnJvcnMpKSB7
CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJP
UlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9l
cnJvcnNfdHJhY2Uoc3RvcmVkX2VuZ2luZS0+ZXJyb3JzKSk7IHJldHVybiBOVUxMO30KCX0KCW1h
eF9hY3Rpb25zX2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIENwdU1haW5f
cnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX2FjdGlvbnNfdCAqaW50ZXJmYWNl
X2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gQ3B1TWFpbl9ydW5fbm9uYmxvY2soZW5naW5l
LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZp
Z19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBh
Ym9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1
cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqQ3B1TWFpbl9ydW5fbm9uYmxv
Y2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxl
KGVuZ2luZSk7IAoJbWF4X2FjdGlvbnNfdCAqYWN0aW9uc1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVN
YWluX2NvbnZlcnQobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoIW1heF9vayhhY3Rp
b25zWzBdLT5lcnJvcnMpKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJy
b3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zWzBdLT5lcnJvcnMpKTsgcmV0dXJu
IE5VTEw7fQoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX211bHRpX25vbmJsb2NrKGVuZ2lu
ZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgp
OwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTsgcmV0dXJuIE5V
TEw7IH0KCX0KCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9CgoK
LyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUg
aW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVz
ZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgog
KgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhl
IGdyb3VwLgogKi8Kdm9pZCBDcHVNYWluX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIENw
dU1haW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJLyogTm90IHN0cmljdGx5IGNv
cnJlY3QsIGJlY2F1c2UgZXhwbGljaXRseSBsb2NraW5nIGFuIGVuZ2luZSBoZXJlLiAqLwoJbWF4
X2VuZ2luZV90ICplbmdpbmUgPSBtYXhfbG9ja19hbnkoZ3JvdXApOwoJaWYoZW5naW5lID09IE5V
TEwpIHJldHVybjsKCUNwdU1haW5fcnVuKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJbWF4
X3VubG9jayhlbmdpbmUpOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3Rh
dGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAq
IAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBh
dmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0
dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0
aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBy
dW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9j
dW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAg
R3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRv
IHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUg
YWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpDcHVNYWlu
X3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIENwdU1haW5fYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9n
ZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IENwdU1haW5fY29u
dmVydChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihhY3Rpb25zID09IE5VTEwpIHJl
dHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1h
eF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25i
bG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJu
IHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlv
biBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJh
eSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZh
Y2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJy
YXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50
ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZv
aWQgQ3B1TWFpbl9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVNYWluX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBDcHVNYWlu
X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYocnVu
ID09IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNf
SU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJV
bmFibGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuOyB9Cgl9CgltYXhfd2FpdChydW4pOwp9CgoK
LyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5j
dGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0byBy
dW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1
cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBt
YXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBi
ZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0
aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVt
b3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5
IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUg
YXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1
dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICov
Cm1heF9ydW5fdCAqQ3B1TWFpbl9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVu
Z2FycmF5LCBDcHVNYWluX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2Zp
bGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXkpOwoJaW50
IGk7CgltYXhfYWN0YXJyYXlfdCAqYXJyX2FjdGFycmF5WzFdOwoJbWF4X2FjdGlvbnNfdCAqKmFy
cl9hY3Rpb25zWzFdOwoJYXJyX2FjdGFycmF5WzBdID0gbWF4X2FjdGFycmF5X2luaXQobWF4Zmls
ZSwgZW5nYXJyYXktPnNpemUpOwoJaWYoYXJyX2FjdGFycmF5WzBdID09IE5VTEwpIHJldHVybiBO
VUxMOwoJYXJyX2FjdGlvbnNbMF0gPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4
X2FjdGlvbnNfdCopKTsKCWZvcihpPTA7IGkgPCBhcnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykg
ewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBDcHVNYWluX2NvbnZlcnQobWF4ZmlsZSwgaW50
ZXJmYWNlX2FjdGlvbnNbaV0pOwoJCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJ
YXJyX2FjdGlvbnNbMF1baV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFycl9hY3RhcnJh
eVswXSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbXVs
dGlfbm9uYmxvY2soZW5nYXJyYXksIGFycl9hY3RhcnJheSwgMSApOwoJZm9yIChpPTA7IGkgPCBh
cnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rpb25z
WzBdW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYXJyX2FjdGFycmF5WzBdKTsKCWZyZWUoYXJy
X2FjdGlvbnNbMF0pOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBz
dGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1h
eF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1
dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50
ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICog
XHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rp
b25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBy
dW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3QqIENwdU1haW5f
Y29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBDcHVNYWluX2FjdGlvbnNfdCAqaW50ZXJmYWNl
X2FjdGlvbnMpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1h
eGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMIHx8ICFtYXhfb2sobWF4ZmlsZS0+ZXJy
b3JzKSkgcmV0dXJuIE5VTEw7CgoJaW50NjRfdCBwYXJhbV9idXJzdCA9IGludGVyZmFjZV9hY3Rp
b25zLT5wYXJhbV9idXJzdDsKCQoJZG91YmxlIHBhcmFtX2NfMCA9IGludGVyZmFjZV9hY3Rpb25z
LT5wYXJhbV9jXzA7CgkKCWRvdWJsZSBwYXJhbV9jXzFfMCA9IGludGVyZmFjZV9hY3Rpb25zLT5w
YXJhbV9jXzFfMDsKCQoJZG91YmxlIHBhcmFtX2NfMV8xID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBh
cmFtX2NfMV8xOwoJCglkb3VibGUgcGFyYW1fY18xXzIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFy
YW1fY18xXzI7CgkKCWRvdWJsZSBwYXJhbV9jXzFfMyA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJh
bV9jXzFfMzsKCQoJZG91YmxlIHBhcmFtX2NfMV80ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFt
X2NfMV80OwoJCglkb3VibGUgcGFyYW1fY18yXzAgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1f
Y18yXzA7CgkKCWRvdWJsZSBwYXJhbV9jXzJfMSA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9j
XzJfMTsKCQoJZG91YmxlIHBhcmFtX2NfMl8yID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2Nf
Ml8yOwoJCglkb3VibGUgcGFyYW1fY18yXzMgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18y
XzM7CgkKCWRvdWJsZSBwYXJhbV9jXzJfNCA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzJf
NDsKCQoJZG91YmxlIHBhcmFtX2NfM18wID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfM18w
OwoJCglkb3VibGUgcGFyYW1fY18zXzEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18zXzE7
CgkKCWRvdWJsZSBwYXJhbV9jXzNfMiA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzNfMjsK
CQoJZG91YmxlIHBhcmFtX2NfM18zID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfM18zOwoJ
Cglkb3VibGUgcGFyYW1fY18zXzQgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18zXzQ7CgkK
CWludDY0X3QgcGFyYW1fbjEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fbjE7CgkKCWludDY0
X3QgcGFyYW1fbjIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fbjI7CgkKCWludDY0X3QgcGFy
YW1fb2ZmRiA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9vZmZGOwoJCglpbnQ2NF90IHBhcmFt
X29mZk0gPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fb2ZmTTsKCQoJaW50NjRfdCBwYXJhbV9v
ZmZTID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX29mZlM7CgkKCWludDY0X3QgcGFyYW1feHpT
aXplID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX3h6U2l6ZTsKCQoKCS8qIHRlbXBvcmFyeSB2
YXJpYWJsZXMgKi8KCWludDY0X3QgdG1wXzAgPSAocGFyYW1fbjEgKiA4KTsKCWludDY0X3QgdG1w
XzEgPSAocGFyYW1fYnVyc3QgKiA4KTsKCgkvKiBjb2RlIGZvciBzY2FsYXIgY3B1X21haW5LZXJu
ZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19jcHVfbWFpbktlcm5lbCA9IDg7
CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsIDgpOwoJaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2Fs
YXIgY3B1X21haW5LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFy
IGNwdV9tYWluS2VybmVsLmNfMCAqLwoJZG91YmxlIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2Nf
MCA9IHBhcmFtX2NfMDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIs
ICJjXzAiLCBpbnNjYWxhcl9jcHVfbWFpbktlcm5lbF9jXzApOwoJaWYoIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgY3B1X21h
aW5LZXJuZWwuY18wKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8w
ICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18xXzAgPSBwYXJhbV9jXzFfMDsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzFfMCIsIGluc2Nh
bGFyX2NwdV9tYWluS2VybmVsX2NfMV8wKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
cmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNf
MV8wKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8xICovCglkb3Vi
bGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18xXzEgPSBwYXJhbV9jXzFfMTsKCW1heF9zZXRf
ZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzFfMSIsIGluc2NhbGFyX2NwdV9t
YWluS2VybmVsX2NfMV8xKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5V
TEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8xKi8KCQoJ
LyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8yICovCglkb3VibGUgaW5zY2Fs
YXJfY3B1X21haW5LZXJuZWxfY18xXzIgPSBwYXJhbV9jXzFfMjsKCW1heF9zZXRfZG91YmxlKGFj
dGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzFfMiIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVs
X2NfMV8yKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBl
bmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8yKi8KCQoJLyogY29kZSBm
b3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8zICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21h
aW5LZXJuZWxfY18xXzMgPSBwYXJhbV9jXzFfMzsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJj
cHVfbWFpbktlcm5lbCIsICJjXzFfMyIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfMV8zKTsK
CWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29k
ZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMV8zKi8KCQoJLyogY29kZSBmb3Igc2NhbGFy
IGNwdV9tYWluS2VybmVsLmNfMV80ICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxf
Y18xXzQgPSBwYXJhbV9jXzFfNDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktl
cm5lbCIsICJjXzFfNCIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfMV80KTsKCWlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2Nh
bGFyIGNwdV9tYWluS2VybmVsLmNfMV80Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWlu
S2VybmVsLmNfMl8wICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18yXzAgPSBw
YXJhbV9jXzJfMDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJj
XzJfMCIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfMl8wKTsKCWlmKCFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9t
YWluS2VybmVsLmNfMl8wKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNf
Ml8xICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18yXzEgPSBwYXJhbV9jXzJf
MTsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzJfMSIsIGlu
c2NhbGFyX2NwdV9tYWluS2VybmVsX2NfMl8xKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3Jz
KSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVs
LmNfMl8xKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl8yICovCglk
b3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18yXzIgPSBwYXJhbV9jXzJfMjsKCW1heF9z
ZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzJfMiIsIGluc2NhbGFyX2Nw
dV9tYWluS2VybmVsX2NfMl8yKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJu
IE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl8yKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl8zICovCglkb3VibGUgaW5z
Y2FsYXJfY3B1X21haW5LZXJuZWxfY18yXzMgPSBwYXJhbV9jXzJfMzsKCW1heF9zZXRfZG91Ymxl
KGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzJfMyIsIGluc2NhbGFyX2NwdV9tYWluS2Vy
bmVsX2NfMl8zKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7Cgkv
KiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl8zKi8KCQoJLyogY29k
ZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl80ICovCglkb3VibGUgaW5zY2FsYXJfY3B1
X21haW5LZXJuZWxfY18yXzQgPSBwYXJhbV9jXzJfNDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMs
ICJjcHVfbWFpbktlcm5lbCIsICJjXzJfNCIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfMl80
KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2Yg
Y29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfMl80Ki8KCQoJLyogY29kZSBmb3Igc2Nh
bGFyIGNwdV9tYWluS2VybmVsLmNfM18wICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJu
ZWxfY18zXzAgPSBwYXJhbV9jXzNfMDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFp
bktlcm5lbCIsICJjXzNfMCIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfM18wKTsKCWlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Ig
c2NhbGFyIGNwdV9tYWluS2VybmVsLmNfM18wKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9t
YWluS2VybmVsLmNfM18xICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18zXzEg
PSBwYXJhbV9jXzNfMTsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIs
ICJjXzNfMSIsIGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfM18xKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNw
dV9tYWluS2VybmVsLmNfM18xKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVs
LmNfM18yICovCglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18zXzIgPSBwYXJhbV9j
XzNfMjsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzNfMiIs
IGluc2NhbGFyX2NwdV9tYWluS2VybmVsX2NfM18yKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2Vy
bmVsLmNfM18yKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfM18zICov
Cglkb3VibGUgaW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18zXzMgPSBwYXJhbV9jXzNfMzsKCW1h
eF9zZXRfZG91YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzNfMyIsIGluc2NhbGFy
X2NwdV9tYWluS2VybmVsX2NfM18zKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfM18z
Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfM180ICovCglkb3VibGUg
aW5zY2FsYXJfY3B1X21haW5LZXJuZWxfY18zXzQgPSBwYXJhbV9jXzNfNDsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJjcHVfbWFpbktlcm5lbCIsICJjXzNfNCIsIGluc2NhbGFyX2NwdV9tYWlu
S2VybmVsX2NfM180KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7
CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGNwdV9tYWluS2VybmVsLmNfM180Ki8KCQoJbWF4
X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImNwdV90b19sbWVtIiApOwoJaWYoIW1heF9vayhhY3Rp
b25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGR2dl92YWx1
ZSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfZHZ2X3ZhbHVlID0gMzI7CglpZiAoaW5zdHJlYW1f
c2l6ZV9kdnZfdmFsdWUgPiAwKSB7CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJkdnZfdmFs
dWUiLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fZHZ2X3ZhbHVlLGluc3RyZWFtX3NpemVf
ZHZ2X3ZhbHVlKTsKCQlpZiAoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsK
CX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gZHZ2X3ZhbHVlICovCgkKCW1heF9pZ25vcmVf
c3RyZWFtKGFjdGlvbnMsICJsbWVtX3RvX2NwdSIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgcmV0dXJuIE5VTEw7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBwcF92YWx1ZSAqLwoJc2l6
ZV90IGluc3RyZWFtX3NpemVfcHBfdmFsdWUgPSAzMjsKCWlmIChpbnN0cmVhbV9zaXplX3BwX3Zh
bHVlID4gMCkgewoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAicHBfdmFsdWUiLCBpbnRlcmZh
Y2VfYWN0aW9ucy0+aW5zdHJlYW1fcHBfdmFsdWUsaW5zdHJlYW1fc2l6ZV9wcF92YWx1ZSk7CgkJ
aWYgKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7Cgl9CgkvKiBlbmQgb2Yg
Y29kZSBmb3Igc3RyZWFtIHBwX3ZhbHVlICovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBzb3VyY2Vf
Y29udGFpbmVyX3ZhbHVlICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9zb3VyY2VfY29udGFpbmVy
X3ZhbHVlID0gMzI7CglpZiAoaW5zdHJlYW1fc2l6ZV9zb3VyY2VfY29udGFpbmVyX3ZhbHVlID4g
MCkgewoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAic291cmNlX2NvbnRhaW5lcl92YWx1ZSIs
IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9zb3VyY2VfY29udGFpbmVyX3ZhbHVlLGluc3Ry
ZWFtX3NpemVfc291cmNlX2NvbnRhaW5lcl92YWx1ZSk7CgkJaWYgKCFtYXhfb2soYWN0aW9ucy0+
ZXJyb3JzKSkgcmV0dXJuIE5VTEw7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIHNvdXJj
ZV9jb250YWluZXJfdmFsdWUgKi8KCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJyZWFkX2xt
ZW0iICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX2xtZW0oYWN0aW9ucywgIndyaXRlX2xtZW0iICk7CglpZiAoICFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgkvKiBjb2RlIGZvciBibG9ja2VkIG1lbW9y
eS1zdHJlYW0gInAiICovCglzaXplX3QgbG1lbV9hZGRyZXNzX3AgPSAwOwoJc2l6ZV90IGxtZW1f
YXJyYXlfc2l6ZV9mYXN0X3AgPSB0bXBfMDsKCXNpemVfdCBsbWVtX2FycmF5X3NpemVfbWVkX3Ag
PSBwYXJhbV9uMjsKCXNpemVfdCBsbWVtX2FycmF5X3NpemVfc2xvd19wID0gcGFyYW1fbjI7Cglz
aXplX3QgbG1lbV9yd19zaXplX2Zhc3RfcCA9IHRtcF8xOwoJc2l6ZV90IGxtZW1fcndfc2l6ZV9t
ZWRfcCA9IHBhcmFtX3h6U2l6ZTsKCXNpemVfdCBsbWVtX3J3X3NpemVfc2xvd19wID0gcGFyYW1f
eHpTaXplOwoJc2l6ZV90IGxtZW1fb2Zmc2V0X2Zhc3RfcCA9IHBhcmFtX29mZkY7CglzaXplX3Qg
bG1lbV9vZmZzZXRfbWVkX3AgPSBwYXJhbV9vZmZNOwoJc2l6ZV90IGxtZW1fb2Zmc2V0X3Nsb3df
cCA9IHBhcmFtX29mZlM7CglpbnQgbG1lbV9idXJzdF9zaXplX3AgPSBtYXhfZ2V0X2J1cnN0X3Np
emUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChsbWVtX2FkZHJlc3NfcCAlIGxtZW1fYnVyc3Rfc2l6
ZV9wKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExN
ZW0gcCBwYXJhbWV0ZXIgJ2xtZW1fYWRkcmVzc19wJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBt
dXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1l
bV9hZGRyZXNzX3AsIGxtZW1fYnVyc3Rfc2l6ZV9wICk7Cgl9CglpZiAoIChsbWVtX2FycmF5X3Np
emVfZmFzdF9wICUgbG1lbV9idXJzdF9zaXplX3ApICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQs
ICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBwIHBhcmFtZXRlciAnbG1lbV9hcnJheV9zaXpl
X2Zhc3RfcCcgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVk
IGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYXJyYXlfc2l6ZV9mYXN0X3AsIGxt
ZW1fYnVyc3Rfc2l6ZV9wICk7Cgl9CglpZiAoIChsbWVtX3J3X3NpemVfZmFzdF9wICUgbG1lbV9i
dXJzdF9zaXplX3ApICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVz
OiVkIDogTE1lbSBwIHBhcmFtZXRlciAnbG1lbV9yd19zaXplX2Zhc3RfcCcgaXMgc2V0IHRvICV6
ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywg
X19MSU5FX18sIGxtZW1fcndfc2l6ZV9mYXN0X3AsIGxtZW1fYnVyc3Rfc2l6ZV9wICk7Cgl9Cglp
ZiAoIChsbWVtX29mZnNldF9mYXN0X3AgJSBsbWVtX2J1cnN0X3NpemVfcCkgIT0gMCApIHsKCQlm
cHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHAgcGFyYW1ldGVyICds
bWVtX29mZnNldF9mYXN0X3AnIGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0
aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX29mZnNldF9mYXN0
X3AsIGxtZW1fYnVyc3Rfc2l6ZV9wICk7Cgl9CglpZiAoIChsbWVtX3J3X3NpemVfZmFzdF9wID4g
MCkgJiYgKGxtZW1fcndfc2l6ZV9tZWRfcCA+IDApICYmIChsbWVtX3J3X3NpemVfc2xvd19wID4g
MCkgJiYgKGxtZW1fYXJyYXlfc2l6ZV9mYXN0X3AgPiAwKSAmJiAobG1lbV9hcnJheV9zaXplX21l
ZF9wID4gMCkgJiYgKGxtZW1fYXJyYXlfc2l6ZV9zbG93X3AgPiAwKSApIHsKCQltYXhfbG1lbV9i
bG9ja2VkKGFjdGlvbnMsICJwIiwgbG1lbV9hZGRyZXNzX3AsIGxtZW1fYXJyYXlfc2l6ZV9mYXN0
X3AsIGxtZW1fYXJyYXlfc2l6ZV9tZWRfcCwgbG1lbV9hcnJheV9zaXplX3Nsb3dfcCwgbG1lbV9y
d19zaXplX2Zhc3RfcCwgbG1lbV9yd19zaXplX21lZF9wLCBsbWVtX3J3X3NpemVfc2xvd19wLCBs
bWVtX29mZnNldF9mYXN0X3AsIGxtZW1fb2Zmc2V0X21lZF9wLCBsbWVtX29mZnNldF9zbG93X3Ap
OwoJfSBlbHNlIHsKCQltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInAiKTsKCX0KCWlmICggIW1h
eF9vayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Ig
YmxvY2tlZCBtZW1vcnktc3RyZWFtICJwIiAqLwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywg
InBwIiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJ
cmV0dXJuIGFjdGlvbnM7Cn0KCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_4)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_4)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_4)	
SLIC_STREAM(cpu_to_lmem, param_nbytes)	
SLIC_STREAM_DISABLED(dvv_value)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM_DISABLED(pp_value)	
SLIC_STREAM_DISABLED(source_container_value)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR(write_lmem, param_address, param_nbytes)	
SLIC_LMEM_BLOCKED_DISABLED(p)	
SLIC_LMEM_BLOCKED_DISABLED(pp)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_1_4)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_2_4)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_0)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_1)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_2)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_3)	
SLIC_SCALAR_DISABLED(cpu_mainKernel, c_3_4)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM_DISABLED(dvv_value)	
SLIC_STREAM(lmem_to_cpu, param_nbytes)	
SLIC_STREAM_DISABLED(pp_value)	
SLIC_STREAM_DISABLED(source_container_value)	
SLIC_LMEM_LINEAR(read_lmem, param_address, param_nbytes)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_LMEM_BLOCKED_DISABLED(p)	
SLIC_LMEM_BLOCKED_DISABLED(pp)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int64_t, burst, param_burst)	
SLIC_PARAMETER_DOUBLE(double, c_0, param_c_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_0, param_c_1_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_1, param_c_1_1)	
SLIC_PARAMETER_DOUBLE(double, c_1_2, param_c_1_2)	
SLIC_PARAMETER_DOUBLE(double, c_1_3, param_c_1_3)	
SLIC_PARAMETER_DOUBLE(double, c_1_4, param_c_1_4)	
SLIC_PARAMETER_DOUBLE(double, c_2_0, param_c_2_0)	
SLIC_PARAMETER_DOUBLE(double, c_2_1, param_c_2_1)	
SLIC_PARAMETER_DOUBLE(double, c_2_2, param_c_2_2)	
SLIC_PARAMETER_DOUBLE(double, c_2_3, param_c_2_3)	
SLIC_PARAMETER_DOUBLE(double, c_2_4, param_c_2_4)	
SLIC_PARAMETER_DOUBLE(double, c_3_0, param_c_3_0)	
SLIC_PARAMETER_DOUBLE(double, c_3_1, param_c_3_1)	
SLIC_PARAMETER_DOUBLE(double, c_3_2, param_c_3_2)	
SLIC_PARAMETER_DOUBLE(double, c_3_3, param_c_3_3)	
SLIC_PARAMETER_DOUBLE(double, c_3_4, param_c_3_4)	
SLIC_PARAMETER_UINT64(int64_t, n1, param_n1)	
SLIC_PARAMETER_UINT64(int64_t, n2, param_n2)	
SLIC_PARAMETER_UINT64(int64_t, offF, param_offF)	
SLIC_PARAMETER_UINT64(int64_t, offM, param_offM)	
SLIC_PARAMETER_UINT64(int64_t, offS, param_offS)	
SLIC_PARAMETER_UINT64(int64_t, xzSize, param_xzSize)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_n1 * 8);)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_burst * 8);)	
SLIC_SET_TICKS(cpu_mainKernel, 8)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_0, param_c_0)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_1_0, param_c_1_0)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_1_1, param_c_1_1)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_1_2, param_c_1_2)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_1_3, param_c_1_3)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_1_4, param_c_1_4)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_2_0, param_c_2_0)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_2_1, param_c_2_1)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_2_2, param_c_2_2)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_2_3, param_c_2_3)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_2_4, param_c_2_4)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_3_0, param_c_3_0)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_3_1, param_c_3_1)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_3_2, param_c_3_2)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_3_3, param_c_3_3)	
SLIC_SCALAR_DOUBLE(cpu_mainKernel, c_3_4, param_c_3_4)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM(dvv_value, 32)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM(pp_value, 32)	
SLIC_STREAM(source_container_value, 32)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_LMEM_BLOCKED(p, 0, tmp_0, param_n2, param_n2, tmp_1, param_xzSize, param_xzSize, param_offF, param_offM, param_offS )	
SLIC_LMEM_BLOCKED_DISABLED(pp)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkNwdU1haW4uaCIgbmFtZT0i
Q3B1TWFpbiI+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1
TWFpbl93cml0ZUxNZW0iIHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZh
Y2UgUGFyYW1ldGVyICZxdW90O2FkZHJlc3MmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1l
PSJwYXJhbV9hZGRyZXNzIiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2Ug
UGFyYW1ldGVyICZxdW90O25ieXRlcyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX25ieXRlcyIgdHlwZT0iaW50NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3Vs
ZCBiZSBvZiBzaXplIHBhcmFtX25ieXRlcyBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
Imluc3RyZWFtX2NwdV90b19sbWVtIiBzaXplPSJwYXJhbV9uYnl0ZXMiIHRyYW5zcG9zZT0idHJ1
ZSIgdHlwZT0idm9pZCIvPjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjxlbmdpbmVtb2RlIG5hbWU9
InJlYWRMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1TWFpbl9yZWFkTE1lbSIgcmV0dXJuLXZhbHVl
PSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7YWRkcmVzcyZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2FkZHJlc3MiIHR5cGU9ImludDY0
X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7bmJ5dGVzJnF1b3Q7
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fbmJ5dGVzIiB0eXBlPSJpbnQ2NF90Ii8+
PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgcGFyYW1fbmJ5dGVzIGJ5
dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9sbWVtX3RvX2NwdSIgc2l6
ZT0icGFyYW1fbmJ5dGVzIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InZvaWQiLz48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
Q3B1TWFpbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7YnVyc3QmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9i
dXJzdCIgdHlwZT0iaW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAm
cXVvdDtjXzAmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzAiIHR5cGU9
ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzFfMCZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMV8wIiB0eXBlPSJkb3VibGUi
Lz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18xXzEmcXVvdDsuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzFfMSIgdHlwZT0iZG91YmxlIi8+PHNjYWxh
ciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMV8yJnF1b3Q7LiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0icGFyYW1fY18xXzIiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0i
SW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzFfMyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQi
IG5hbWU9InBhcmFtX2NfMV8zIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7Y18xXzQmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJw
YXJhbV9jXzFfNCIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1l
dGVyICZxdW90O2NfMl8wJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18y
XzAiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVv
dDtjXzJfMSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMl8xIiB0eXBl
PSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18yXzIm
cXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzJfMiIgdHlwZT0iZG91Ymxl
Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMl8zJnF1b3Q7LiIg
ZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18yXzMiIHR5cGU9ImRvdWJsZSIvPjxzY2Fs
YXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzJfNCZxdW90Oy4iIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMl80IiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9
IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18zXzAmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0
IiBuYW1lPSJwYXJhbV9jXzNfMCIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZh
Y2UgUGFyYW1ldGVyICZxdW90O2NfM18xJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0i
cGFyYW1fY18zXzEiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFt
ZXRlciAmcXVvdDtjXzNfMiZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2Nf
M18yIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1
b3Q7Y18zXzMmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzNfMyIgdHlw
ZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfM180
JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18zXzQiIHR5cGU9ImRvdWJs
ZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtuMSZxdW90Oy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX24xIiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBk
ZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O24yJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1
dCIgbmFtZT0icGFyYW1fbjIiIHR5cGU9ImludDY0X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7b2ZmRiZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX29mZkYiIHR5cGU9ImludDY0X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7b2ZmTSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX29mZk0i
IHR5cGU9ImludDY0X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7
b2ZmUyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX29mZlMiIHR5cGU9Imlu
dDY0X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7eHpTaXplJnF1
b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1feHpTaXplIiB0eXBlPSJpbnQ2NF90
Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgMzIgYnl0ZXMuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9kdnZfdmFsdWUiIHNpemU9IjMyIiB0cmFu
c3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxm
dW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKDMyIC8g
NCkiPjxjb25zdGFudFZhbHVlIHZhbHVlPSIzMiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+
PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48
L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIDMyIGJ5dGVz
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fcHBfdmFsdWUiIHNpemU9IjMyIiB0
cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3Ro
PjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKDMy
IC8gNCkiPjxjb25zdGFudFZhbHVlIHZhbHVlPSIzMiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lv
bj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIDMyIGJ5
dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fc291cmNlX2NvbnRhaW5lcl92
YWx1ZSIgc2l6ZT0iMzIiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24g
aW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9Ii8iIHZhbHVlPSIoMzIgLyA0KSI+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjMyIi8+PGNvbnN0
YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwv
bGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhm
aWxlPg==
#endif /* SKIN_META_DATA */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 112, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 115, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 116, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 167, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 168, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 170, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 171, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 172, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 176, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 178, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 179, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 180, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 181, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 5, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 182, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 184, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 185, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 186, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 187, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 188, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 189, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 11, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 190, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(cpu_mainKernel, 123, "SquashFactor", 0.0)
#endif

