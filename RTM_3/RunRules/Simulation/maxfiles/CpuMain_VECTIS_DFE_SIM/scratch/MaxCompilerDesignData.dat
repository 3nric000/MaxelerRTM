#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2013
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          35689
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "CpuMain"
#define MAXFILE_BUILD_DIR  "/home/emanuele.delsozzo/repo/MaxelerRTM/RTM_3/RunRules/Simulation/maxfiles/CpuMain_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20130612
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(CONTAINS_PRINTF, 1)
PARAM(MemCtrlPro_TotalNumStreams, 8)
PARAM(MemCtrlPro_NumRdStreams, 7)
PARAM(MemCtrlPro_NumWrStreams, 1)
PARAM(MemCtrlPro_DDRType, 3)
PARAM(MemCtrlPro_BurstSizeInBytes, 384)
PARAM(MemCtrlPro_MIGBurstSize, 8)
PARAM(MemCtrlPro_Parity_Mode, 0)
PARAM(MemCtrlPro_ECC_Mode, 0)
PARAM(MemCtrlPro_ParityECC_Debug, 0)
PARAM(MemCtrlPro_ParityECC_EngineSize, 0)
PARAM(MemCtrlPro_DataBurstSizeInBytes, 384)
PARAM(MemCtrlPro_MainFIFODepth, 512)
PARAM(MemCtrlPro_BitMungeType, 2)
PARAM(MemCtrlPro_BitMungeSupports_2GB_SingleRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_2GB_DualRank, 0)
PARAM(MemCtrlPro_BitMungeSupports_4GB_DualRank, 1)
PARAM(MemCtrlPro_BitMungeSupports_8GB_DualRank, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 263)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif


#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "linearKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(linearKernel, Kernel)
MANAGER_NODE(cpu_to_lmem, PCIe_From_Host_fwd)
MANAGER_NODE(lmem_to_cpu, PCIe_To_Host_fwd)
MANAGER_NODE(addrgen_cmd_write_lmem, AddrGen)
MANAGER_NODE(cmd_write_lmem_0, Memory_Cmd)
MANAGER_NODE(write_lmem, To_Memory)
MANAGER_NODE(addrgen_cmd_read_lmem, AddrGen)
MANAGER_NODE(cmd_read_lmem_0, Memory_Cmd)
MANAGER_NODE(read_lmem, From_Memory)
MANAGER_NODE(controller, PCIe_From_Host_fwd)
MANAGER_NODE(addrgen_cmd_dvv, AddrGen)
MANAGER_NODE(cmd_dvv_0, Memory_Cmd)
MANAGER_NODE(dvv, From_Memory)
MANAGER_NODE(addrgen_cmd_p, AddrGen)
MANAGER_NODE(cmd_p_0, Memory_Cmd)
MANAGER_NODE(p, From_Memory)
MANAGER_NODE(addrgen_cmd_pp, AddrGen)
MANAGER_NODE(cmd_pp_0, Memory_Cmd)
MANAGER_NODE(pp, From_Memory)
MANAGER_NODE(addrgen_cmd_px, AddrGen)
MANAGER_NODE(cmd_px_0, Memory_Cmd)
MANAGER_NODE(px, From_Memory)
MANAGER_NODE(addrgen_cmd_py, AddrGen)
MANAGER_NODE(cmd_py_0, Memory_Cmd)
MANAGER_NODE(py, From_Memory)
MANAGER_NODE(addrgen_cmd_source_container, AddrGen)
MANAGER_NODE(cmd_source_container_0, Memory_Cmd)
MANAGER_NODE(source_container, From_Memory)
MANAGER_NODE(ppresult, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_10, DualAspectReg)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_17, DualAspectMux)
MANAGER_NODE(Stream_27, DualAspectMux)
MANAGER_NODE(Stream_34, DualAspectMux)
MANAGER_NODE(Stream_20, DualAspectMux)
MANAGER_NODE(Stream_55, DualAspectMux)
MANAGER_NODE(Stream_41, DualAspectMux)
MANAGER_NODE(Stream_48, DualAspectMux)
MANAGER_NODE(Stream_64, DualAspectReg)
MANAGER_NODE(Stream_68, StreamPullPushAdapter)
MANAGER_NODE(Stream_104, StreamPullPushAdapter)
MANAGER_NODE(Stream_76, Fifo)
MANAGER_NODE(Stream_80, Fifo)
MANAGER_NODE(Stream_84, Fifo)
MANAGER_NODE(Stream_88, Fifo)
MANAGER_NODE(Stream_92, Fifo)
MANAGER_NODE(Stream_96, Fifo)
MANAGER_NODE(Stream_100, Fifo)
MANAGER_NODE(Stream_102, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(linearKernel, controller, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, p, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, pp, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, dvv, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, source_container, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, px, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, py, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(linearKernel, ppresult, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(cpu_to_lmem, cpu_to_lmem, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(lmem_to_cpu, lmem_to_cpu, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_write_lmem_0, cmd_write_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(write_lmem, write_lmem, IN, STREAM, 1536, PUSH)
MANAGER_NODE_IO(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_read_lmem_0, cmd_read_lmem_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(read_lmem, read_lmem, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(controller, controller, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(addrgen_cmd_dvv, addrgen_cmd_dvv_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_dvv_0, cmd_dvv_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(dvv, dvv, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_p, addrgen_cmd_p_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_p_0, cmd_p_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(p, p, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_pp, addrgen_cmd_pp_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_pp_0, cmd_pp_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(pp, pp, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_px, addrgen_cmd_px_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_px_0, cmd_px_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(px, px, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_py, addrgen_cmd_py_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_py_0, cmd_py_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(py, py, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(addrgen_cmd_source_container, addrgen_cmd_source_container_0, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(cmd_source_container_0, cmd_source_container_0, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(source_container, source_container, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(ppresult, ppresult, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_17, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_17, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_27, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_27, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_34, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_34, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_20, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_20, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_55, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_55, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_41, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_41, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_48, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_48, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_64, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_64, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_68, input, IN, STREAM, 1536, PULL)
MANAGER_NODE_IO(Stream_68, output, OUT, STREAM, 1536, PUSH)
MANAGER_NODE_IO(Stream_104, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_104, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_76, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_76, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_80, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_80, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_84, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_84, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_88, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_88, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_92, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_92, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_96, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_96, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_100, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_100, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_102, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_102, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(cpu_to_lmem, cpu_to_lmem, Stream_10, input, 128)
MANAGER_STREAM(addrgen_cmd_write_lmem, addrgen_cmd_write_lmem_0, cmd_write_lmem_0, cmd_write_lmem_0, 64)
MANAGER_STREAM(addrgen_cmd_read_lmem, addrgen_cmd_read_lmem_0, cmd_read_lmem_0, cmd_read_lmem_0, 64)
MANAGER_STREAM(read_lmem, read_lmem, Stream_4, input, 1536)
MANAGER_STREAM(controller, controller, Stream_17, input, 128)
MANAGER_STREAM(addrgen_cmd_dvv, addrgen_cmd_dvv_0, cmd_dvv_0, cmd_dvv_0, 64)
MANAGER_STREAM(dvv, dvv, Stream_20, input, 1536)
MANAGER_STREAM(addrgen_cmd_p, addrgen_cmd_p_0, cmd_p_0, cmd_p_0, 64)
MANAGER_STREAM(p, p, Stream_27, input, 1536)
MANAGER_STREAM(addrgen_cmd_pp, addrgen_cmd_pp_0, cmd_pp_0, cmd_pp_0, 64)
MANAGER_STREAM(pp, pp, Stream_34, input, 1536)
MANAGER_STREAM(addrgen_cmd_px, addrgen_cmd_px_0, cmd_px_0, cmd_px_0, 64)
MANAGER_STREAM(px, px, Stream_41, input, 1536)
MANAGER_STREAM(addrgen_cmd_py, addrgen_cmd_py_0, cmd_py_0, cmd_py_0, 64)
MANAGER_STREAM(py, py, Stream_48, input, 1536)
MANAGER_STREAM(addrgen_cmd_source_container, addrgen_cmd_source_container_0, cmd_source_container_0, cmd_source_container_0, 64)
MANAGER_STREAM(source_container, source_container, Stream_55, input, 1536)
MANAGER_STREAM(linearKernel, ppresult, Stream_102, input, 32)
MANAGER_STREAM(Stream_10, output, Stream_68, input, 1536)
MANAGER_STREAM(Stream_4, output, lmem_to_cpu, lmem_to_cpu, 128)
MANAGER_STREAM(Stream_17, output, Stream_76, input, 32)
MANAGER_STREAM(Stream_27, output, Stream_80, input, 32)
MANAGER_STREAM(Stream_34, output, Stream_84, input, 32)
MANAGER_STREAM(Stream_20, output, Stream_88, input, 32)
MANAGER_STREAM(Stream_55, output, Stream_92, input, 32)
MANAGER_STREAM(Stream_41, output, Stream_96, input, 32)
MANAGER_STREAM(Stream_48, output, Stream_100, input, 32)
MANAGER_STREAM(Stream_64, output, Stream_104, input, 128)
MANAGER_STREAM(Stream_68, output, write_lmem, write_lmem, 1536)
MANAGER_STREAM(Stream_104, output, ppresult, ppresult, 128)
MANAGER_STREAM(Stream_76, output, linearKernel, controller, 32)
MANAGER_STREAM(Stream_80, output, linearKernel, p, 32)
MANAGER_STREAM(Stream_84, output, linearKernel, pp, 32)
MANAGER_STREAM(Stream_88, output, linearKernel, dvv, 32)
MANAGER_STREAM(Stream_92, output, linearKernel, source_container, 32)
MANAGER_STREAM(Stream_96, output, linearKernel, px, 32)
MANAGER_STREAM(Stream_100, output, linearKernel, py, 32)
MANAGER_STREAM(Stream_102, output, Stream_64, input, 32)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(linearKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(linearKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(linearKernel, linearKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(linearKernel, controller, 0)
DEBUG_INPUT_BITS(linearKernel, p, 1)
DEBUG_INPUT_BITS(linearKernel, pp, 2)
DEBUG_INPUT_BITS(linearKernel, dvv, 3)
DEBUG_INPUT_BITS(linearKernel, source_container, 4)
DEBUG_INPUT_BITS(linearKernel, px, 5)
DEBUG_INPUT_BITS(linearKernel, py, 6)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(linearKernel, ppresult, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cpu_to_lmem, PCIePullSourceSyncMax3, "cpu_to_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_write_lmem, AddressGeneratorSync, "addrgen_cmd_write_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_read_lmem, AddressGeneratorSync, "addrgen_cmd_read_lmem", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(controller, PCIePullSourceSyncMax3, "controller")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_dvv, AddressGeneratorSync, "addrgen_cmd_dvv", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_p, AddressGeneratorSync, "addrgen_cmd_p", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_pp, AddressGeneratorSync, "addrgen_cmd_pp", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_px, AddressGeneratorSync, "addrgen_cmd_px", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_py, AddressGeneratorSync, "addrgen_cmd_py", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(addrgen_cmd_source_container, AddressGeneratorSync, "addrgen_cmd_source_container", 1, MemoryControllerConfig::getMax3Config(8,0,0,0,31), LINEAR1D)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, DualAspectRegSync, "Stream_10", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 128, 12)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, DualAspectMuxSync, "Stream_17", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, DualAspectMuxSync, "Stream_20", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_27, DualAspectMuxSync, "Stream_27", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_34, DualAspectMuxSync, "Stream_34", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_41, DualAspectMuxSync, "Stream_41", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_48, DualAspectMuxSync, "Stream_48", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_55, DualAspectMuxSync, "Stream_55", 32, 48)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_68, PullToPushAdapterSync, "Stream_68")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(lmem_to_cpu, PCIePushSinkSyncMax3, "lmem_to_cpu")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_76, FifoPushToPullSync, "Stream_76", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_88, FifoPushToPullSync, "Stream_88", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_80, FifoPushToPullSync, "Stream_80", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_84, FifoPushToPullSync, "Stream_84", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_96, FifoPushToPullSync, "Stream_96", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_100, FifoPushToPullSync, "Stream_100", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_92, FifoPushToPullSync, "Stream_92", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(linearKernel, linearKernel, "linearKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_102, FifoPushToPullSync, "Stream_102", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_64, DualAspectRegSync, "Stream_64", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_104, PullToPushAdapterSync, "Stream_104")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ppresult, PCIePushSinkSyncMax3, "ppresult")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_write_lmem_0, MemoryProxyCommandSinkSync, "cmd_write_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(read_lmem, MemoryProxyPullSourceSync, "read_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_read_lmem_0, MemoryProxyCommandSinkSync, "cmd_read_lmem_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(dvv, MemoryProxyPullSourceSync, "dvv")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_dvv_0, MemoryProxyCommandSinkSync, "cmd_dvv_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(p, MemoryProxyPullSourceSync, "p")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_p_0, MemoryProxyCommandSinkSync, "cmd_p_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pp, MemoryProxyPullSourceSync, "pp")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_pp_0, MemoryProxyCommandSinkSync, "cmd_pp_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(px, MemoryProxyPullSourceSync, "px")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_px_0, MemoryProxyCommandSinkSync, "cmd_px_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(py, MemoryProxyPullSourceSync, "py")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_py_0, MemoryProxyCommandSinkSync, "cmd_py_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(source_container, MemoryProxyPullSourceSync, "source_container")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(cmd_source_container_0, MemoryProxyCommandSinkSync, "cmd_source_container_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(write_lmem, MemoryProxyPushSinkSync, "write_lmem")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MemoryControllerPro, MemoryControllerPro, "MemoryControllerPro", MemoryControllerConfig::getMax3Config(8,0,0,0,31), true)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 2, 0, 0, 0, 0, 0, 263)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "ffe8b321502a245e332eaec63c4d8055531f0adc8a3593d313af7aa3ea9c5d8c")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_done, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_empty, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_read, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 21, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_ctld_request, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_fill_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_flush_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_flush_start_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_full_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(linearKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_write_lmem_0, setup, "cmd_write_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(read_lmem, setup, "read_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_read_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_read_lmem_0, setup, "cmd_read_lmem_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(dvv, setup, "dvv", MemoryControllerPro::getDefaultMemoryController(), "cmd_dvv_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_dvv_0, setup, "cmd_dvv_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(p, setup, "p", MemoryControllerPro::getDefaultMemoryController(), "cmd_p_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_p_0, setup, "cmd_p_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pp, setup, "pp", MemoryControllerPro::getDefaultMemoryController(), "cmd_pp_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_pp_0, setup, "cmd_pp_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(px, setup, "px", MemoryControllerPro::getDefaultMemoryController(), "cmd_px_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_px_0, setup, "cmd_px_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(py, setup, "py", MemoryControllerPro::getDefaultMemoryController(), "cmd_py_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_py_0, setup, "cmd_py_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(source_container, setup, "source_container", MemoryControllerPro::getDefaultMemoryController(), "cmd_source_container_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(cmd_source_container_0, setup, "cmd_source_container_0", MemoryControllerPro::getDefaultMemoryController())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(write_lmem, setup, "write_lmem", MemoryControllerPro::getDefaultMemoryController(), "cmd_write_lmem_0", 1536)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MemoryControllerPro, streamsFinalise)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(cpu_to_lmem, STREAM_FROM_HOST, 0)
PCIE_STREAM(controller, STREAM_FROM_HOST, 1)
PCIE_STREAM(lmem_to_cpu, STREAM_TO_HOST, 0)
PCIE_STREAM(ppresult, STREAM_TO_HOST, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_write_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_read_lmem, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_dvv, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_p, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_pp, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_px, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_py, 1)
#endif

#ifdef MEMCTRLPRO_ADDRGEN_1DLIN
#define MEMCTRLPRO_ADDRGEN_1DLIN_PRESENT 1
MEMCTRLPRO_ADDRGEN_1DLIN(addrgen_cmd_source_container, 1)
#endif

#ifdef MEMCTRLPRO_STREAM
#define MEMCTRLPRO_STREAM_PRESENT 1
MEMCTRLPRO_STREAM(read_lmem, 0, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(dvv, 1, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(p, 2, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(pp, 3, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(px, 4, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(py, 5, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(source_container, 6, READ_FROM_MEMORY)
MEMCTRLPRO_STREAM(write_lmem, 7, WRITE_TO_MEMORY)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1))
REG(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8))
REG(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33))
REG(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32))
REG(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1))
REG(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8))
REG(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33))
REG(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32))
REG(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32))
REG(addrgen_cmd_dvv._Addr_En, 0x26, 1, hwBits(1))
REG(addrgen_cmd_dvv._CmdSize, 0x27, 1, hwBits(8))
REG(addrgen_cmd_dvv._BlockSize_X, 0x28, 5, hwBits(33))
REG(addrgen_cmd_dvv._Wrap_X, 0x2d, 4, hwBits(32))
REG(addrgen_cmd_dvv._Start_X_Addr, 0x31, 4, hwBits(32))
REG(addrgen_cmd_dvv._Offset_0, 0x35, 4, hwBits(32))
REG(addrgen_cmd_p._Addr_En, 0x39, 1, hwBits(1))
REG(addrgen_cmd_p._CmdSize, 0x3a, 1, hwBits(8))
REG(addrgen_cmd_p._BlockSize_X, 0x3b, 5, hwBits(33))
REG(addrgen_cmd_p._Wrap_X, 0x40, 4, hwBits(32))
REG(addrgen_cmd_p._Start_X_Addr, 0x44, 4, hwBits(32))
REG(addrgen_cmd_p._Offset_0, 0x48, 4, hwBits(32))
REG(addrgen_cmd_pp._Addr_En, 0x4c, 1, hwBits(1))
REG(addrgen_cmd_pp._CmdSize, 0x4d, 1, hwBits(8))
REG(addrgen_cmd_pp._BlockSize_X, 0x4e, 5, hwBits(33))
REG(addrgen_cmd_pp._Wrap_X, 0x53, 4, hwBits(32))
REG(addrgen_cmd_pp._Start_X_Addr, 0x57, 4, hwBits(32))
REG(addrgen_cmd_pp._Offset_0, 0x5b, 4, hwBits(32))
REG(addrgen_cmd_px._Addr_En, 0x5f, 1, hwBits(1))
REG(addrgen_cmd_px._CmdSize, 0x60, 1, hwBits(8))
REG(addrgen_cmd_px._BlockSize_X, 0x61, 5, hwBits(33))
REG(addrgen_cmd_px._Wrap_X, 0x66, 4, hwBits(32))
REG(addrgen_cmd_px._Start_X_Addr, 0x6a, 4, hwBits(32))
REG(addrgen_cmd_px._Offset_0, 0x6e, 4, hwBits(32))
REG(addrgen_cmd_py._Addr_En, 0x72, 1, hwBits(1))
REG(addrgen_cmd_py._CmdSize, 0x73, 1, hwBits(8))
REG(addrgen_cmd_py._BlockSize_X, 0x74, 5, hwBits(33))
REG(addrgen_cmd_py._Wrap_X, 0x79, 4, hwBits(32))
REG(addrgen_cmd_py._Start_X_Addr, 0x7d, 4, hwBits(32))
REG(addrgen_cmd_py._Offset_0, 0x81, 4, hwBits(32))
REG(addrgen_cmd_source_container._Addr_En, 0x85, 1, hwBits(1))
REG(addrgen_cmd_source_container._CmdSize, 0x86, 1, hwBits(8))
REG(addrgen_cmd_source_container._BlockSize_X, 0x87, 5, hwBits(33))
REG(addrgen_cmd_source_container._Wrap_X, 0x8c, 4, hwBits(32))
REG(addrgen_cmd_source_container._Start_X_Addr, 0x90, 4, hwBits(32))
REG(addrgen_cmd_source_container._Offset_0, 0x94, 4, hwBits(32))
REG(linearKernel.io_controller_force_disabled, 0x98, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_p_force_disabled, 0x99, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_pp_force_disabled, 0x9a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_dvv_force_disabled, 0x9b, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_source_container_force_disabled, 0x9c, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_px_force_disabled, 0x9d, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.io_py_force_disabled, 0x9e, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.c_0, 0x9f, 4, hwFloat(8, 24))
REG(linearKernel.c_1_0, 0xa3, 4, hwFloat(8, 24))
REG(linearKernel.c_1_1, 0xa7, 4, hwFloat(8, 24))
REG(linearKernel.c_1_2, 0xab, 4, hwFloat(8, 24))
REG(linearKernel.c_1_3, 0xaf, 4, hwFloat(8, 24))
REG(linearKernel.c_1_4, 0xb3, 4, hwFloat(8, 24))
REG(linearKernel.c_2_0, 0xb7, 4, hwFloat(8, 24))
REG(linearKernel.c_2_1, 0xbb, 4, hwFloat(8, 24))
REG(linearKernel.c_2_2, 0xbf, 4, hwFloat(8, 24))
REG(linearKernel.c_2_3, 0xc3, 4, hwFloat(8, 24))
REG(linearKernel.c_2_4, 0xc7, 4, hwFloat(8, 24))
REG(linearKernel.c_3_0, 0xcb, 4, hwFloat(8, 24))
REG(linearKernel.c_3_1, 0xcf, 4, hwFloat(8, 24))
REG(linearKernel.c_3_2, 0xd3, 4, hwFloat(8, 24))
REG(linearKernel.c_3_3, 0xd7, 4, hwFloat(8, 24))
REG(linearKernel.c_3_4, 0xdb, 4, hwFloat(8, 24))
REG(linearKernel.io_ppresult_force_disabled, 0xdf, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(linearKernel.run_cycle_count, 0xe0, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(linearKernel.current_run_cycle_count, 0xe6, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(linearKernel.dbg_ctld_almost_empty, 0xec, 1, hwBits(7))
REG(linearKernel.dbg_ctld_done, 0xed, 1, hwBits(7))
REG(linearKernel.dbg_ctld_empty, 0xee, 1, hwBits(7))
REG(linearKernel.dbg_ctld_read, 0xef, 1, hwBits(7))
REG(linearKernel.dbg_ctld_read_pipe_dbg, 0xf0, 3, hwBits(21))
REG(linearKernel.dbg_ctld_request, 0xf3, 1, hwBits(7))
REG(linearKernel.dbg_done_out, 0xf4, 1, hwBits(1))
REG(linearKernel.dbg_fill_level, 0xf5, 1, hwBits(8))
REG(linearKernel.dbg_flush_level, 0xf6, 1, hwBits(8))
REG(linearKernel.dbg_flush_start, 0xf7, 1, hwBits(1))
REG(linearKernel.dbg_flush_start_level, 0xf8, 1, hwBits(8))
REG(linearKernel.dbg_flushing, 0xf9, 1, hwBits(1))
REG(linearKernel.dbg_full_level, 0xfa, 1, hwBits(8))
REG(linearKernel.dbg_out_stall, 0xfb, 1, hwBits(1))
REG(linearKernel.dbg_out_valid, 0xfc, 1, hwBits(1))
REG(linearKernel.dbg_stall_vector, 0xfd, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xfe, 1, hwBits(8))
REG(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xff, 1, hwBits(8))
REG(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x100, 1, hwBits(1))
REG(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x101, 1, hwBits(8))
REG(ifpga.ifpga_ctrl, 0x102, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x103, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(addrgen_cmd_write_lmem._Addr_En, 0x0, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._CmdSize, 0x1, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._BlockSize_X, 0x2, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Wrap_X, 0x7, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Start_X_Addr, 0xb, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_write_lmem._Offset_0, 0xf, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Addr_En, 0x13, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._CmdSize, 0x14, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._BlockSize_X, 0x15, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Wrap_X, 0x1a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Start_X_Addr, 0x1e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_read_lmem._Offset_0, 0x22, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._Addr_En, 0x26, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._CmdSize, 0x27, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._BlockSize_X, 0x28, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._Wrap_X, 0x2d, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._Start_X_Addr, 0x31, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_dvv._Offset_0, 0x35, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Addr_En, 0x39, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._CmdSize, 0x3a, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._BlockSize_X, 0x3b, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Wrap_X, 0x40, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Start_X_Addr, 0x44, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_p._Offset_0, 0x48, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Addr_En, 0x4c, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._CmdSize, 0x4d, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._BlockSize_X, 0x4e, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Wrap_X, 0x53, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Start_X_Addr, 0x57, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_pp._Offset_0, 0x5b, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._Addr_En, 0x5f, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._CmdSize, 0x60, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._BlockSize_X, 0x61, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._Wrap_X, 0x66, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._Start_X_Addr, 0x6a, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_px._Offset_0, 0x6e, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._Addr_En, 0x72, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._CmdSize, 0x73, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._BlockSize_X, 0x74, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._Wrap_X, 0x79, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._Start_X_Addr, 0x7d, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_py._Offset_0, 0x81, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._Addr_En, 0x85, 1, hwBits(1), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._CmdSize, 0x86, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._BlockSize_X, 0x87, 5, hwBits(33), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._Wrap_X, 0x8c, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._Start_X_Addr, 0x90, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(addrgen_cmd_source_container._Offset_0, 0x94, 4, hwBits(32), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.io_controller_force_disabled, 0x98, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_p_force_disabled, 0x99, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_pp_force_disabled, 0x9a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_dvv_force_disabled, 0x9b, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_source_container_force_disabled, 0x9c, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_px_force_disabled, 0x9d, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.io_py_force_disabled, 0x9e, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.c_0, 0x9f, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_1_0, 0xa3, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_1_1, 0xa7, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_1_2, 0xab, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_1_3, 0xaf, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_1_4, 0xb3, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_2_0, 0xb7, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_2_1, 0xbb, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_2_2, 0xbf, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_2_3, 0xc3, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_2_4, 0xc7, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_3_0, 0xcb, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_3_1, 0xcf, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_3_2, 0xd3, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_3_3, 0xd7, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.c_3_4, 0xdb, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.io_ppresult_force_disabled, 0xdf, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(linearKernel.run_cycle_count, 0xe0, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(linearKernel.current_run_cycle_count, 0xe6, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_almost_empty, 0xec, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_done, 0xed, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_empty, 0xee, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_read, 0xef, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_read_pipe_dbg, 0xf0, 3, hwBits(21), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_ctld_request, 0xf3, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_done_out, 0xf4, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_fill_level, 0xf5, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_flush_level, 0xf6, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_flush_start, 0xf7, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_flush_start_level, 0xf8, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_flushing, 0xf9, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_full_level, 0xfa, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_out_stall, 0xfb, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_out_valid, 0xfc, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(linearKernel.dbg_stall_vector, 0xfd, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Enable_AND, 0xfe, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Int_Disable_OR, 0xff, 1, hwBits(8), HOST_WRITE_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_phy_init_done, 0x100, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MemoryControllerPro.MemoryControllerPro_Arb_Control, 0x101, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(ifpga.ifpga_ctrl, 0x102, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x103, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("ffe8b321502a245e332eaec63c4d8055531f0adc8a3593d313af7aa3ea9c5d8c")
#endif

#ifdef MANAGER_MEMCTL
#define MANAGER_MEMCTL_PRESENT 1
MANAGER_MEMCTL(max3_sodimms, MemoryControllerPro.MemoryControllerPro, 384)
#endif

#ifdef MANAGER_MEMCTL_CONTROL_GROUP
#define MANAGER_MEMCTL_CONTROL_GROUP_PRESENT 1
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_write_lmem, addrgen_cmd_write_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_read_lmem, addrgen_cmd_read_lmem., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_dvv, addrgen_cmd_dvv., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_p, addrgen_cmd_p., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_pp, addrgen_cmd_pp., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_px, addrgen_cmd_px., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_py, addrgen_cmd_py., LINEAR_1D)
MANAGER_MEMCTL_CONTROL_GROUP(max3_sodimms, cmd_source_container, addrgen_cmd_source_container., LINEAR_1D)
#endif

#ifdef MANAGER_MEMCTL_DATA_STREAM
#define MANAGER_MEMCTL_DATA_STREAM_PRESENT 1
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_read_lmem, read_lmem, 0, 0, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_dvv, dvv, 0, 1, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_p, p, 0, 2, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_pp, pp, 0, 3, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_px, px, 0, 4, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_py, py, 0, 5, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_source_container, source_container, 0, 6, READ_FROM_MEMORY)
MANAGER_MEMCTL_DATA_STREAM(max3_sodimms, cmd_write_lmem, write_lmem, 0, 7, WRITE_TO_MEMORY)
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME CpuMain
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_CpuMain_H
#define SLIC_DECLARATIONS_CpuMain_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'writeLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 */
void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Basic static non-blocking function for the interface 'writeLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [in] instream_cpu_to_lmem The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem);

/**
 * \brief Advanced static interface, structure for the engine interface 'writeLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	const void *instream_cpu_to_lmem; /**<  [in] The stream should be of size param_nbytes bytes. */
} CpuMain_writeLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'writeLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'readLMem'.
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 */
void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Basic static non-blocking function for the interface 'readLMem'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_address Interface Parameter "address".
 * \param [in] param_nbytes Interface Parameter "nbytes".
 * \param [out] outstream_lmem_to_cpu The stream should be of size param_nbytes bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu);

/**
 * \brief Advanced static interface, structure for the engine interface 'readLMem'
 * 
 */
typedef struct { 
	int64_t param_address; /**<  [in] Interface Parameter "address". */
	int64_t param_nbytes; /**<  [in] Interface Parameter "nbytes". */
	void *outstream_lmem_to_cpu; /**<  [out] The stream should be of size param_nbytes bytes. */
} CpuMain_readLMem_actions_t;

/**
 * \brief Advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'readLMem'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_stencilSize Interface Parameter "stencilSize".
 * \param [in] instream_controller The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 */
void CpuMain(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_size,
	int64_t param_stencilSize,
	const int32_t *instream_controller);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_c_0 Interface Parameter "c_0".
 * \param [in] param_c_1_0 Interface Parameter "c_1_0".
 * \param [in] param_c_1_1 Interface Parameter "c_1_1".
 * \param [in] param_c_1_2 Interface Parameter "c_1_2".
 * \param [in] param_c_1_3 Interface Parameter "c_1_3".
 * \param [in] param_c_1_4 Interface Parameter "c_1_4".
 * \param [in] param_c_2_0 Interface Parameter "c_2_0".
 * \param [in] param_c_2_1 Interface Parameter "c_2_1".
 * \param [in] param_c_2_2 Interface Parameter "c_2_2".
 * \param [in] param_c_2_3 Interface Parameter "c_2_3".
 * \param [in] param_c_2_4 Interface Parameter "c_2_4".
 * \param [in] param_c_3_0 Interface Parameter "c_3_0".
 * \param [in] param_c_3_1 Interface Parameter "c_3_1".
 * \param [in] param_c_3_2 Interface Parameter "c_3_2".
 * \param [in] param_c_3_3 Interface Parameter "c_3_3".
 * \param [in] param_c_3_4 Interface Parameter "c_3_4".
 * \param [in] param_size Interface Parameter "size".
 * \param [in] param_stencilSize Interface Parameter "stencilSize".
 * \param [in] instream_controller The stream should be of size ((param_size * param_stencilSize) * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *CpuMain_nonblock(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_size,
	int64_t param_stencilSize,
	const int32_t *instream_controller);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	double param_c_0; /**<  [in] Interface Parameter "c_0". */
	double param_c_1_0; /**<  [in] Interface Parameter "c_1_0". */
	double param_c_1_1; /**<  [in] Interface Parameter "c_1_1". */
	double param_c_1_2; /**<  [in] Interface Parameter "c_1_2". */
	double param_c_1_3; /**<  [in] Interface Parameter "c_1_3". */
	double param_c_1_4; /**<  [in] Interface Parameter "c_1_4". */
	double param_c_2_0; /**<  [in] Interface Parameter "c_2_0". */
	double param_c_2_1; /**<  [in] Interface Parameter "c_2_1". */
	double param_c_2_2; /**<  [in] Interface Parameter "c_2_2". */
	double param_c_2_3; /**<  [in] Interface Parameter "c_2_3". */
	double param_c_2_4; /**<  [in] Interface Parameter "c_2_4". */
	double param_c_3_0; /**<  [in] Interface Parameter "c_3_0". */
	double param_c_3_1; /**<  [in] Interface Parameter "c_3_1". */
	double param_c_3_2; /**<  [in] Interface Parameter "c_3_2". */
	double param_c_3_3; /**<  [in] Interface Parameter "c_3_3". */
	double param_c_3_4; /**<  [in] Interface Parameter "c_3_4". */
	int64_t param_size; /**<  [in] Interface Parameter "size". */
	int64_t param_stencilSize; /**<  [in] Interface Parameter "stencilSize". */
	const int32_t *instream_controller; /**<  [in] The stream should be of size ((param_size * param_stencilSize) * 4) bytes. */
} CpuMain_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* CpuMain_init(void);

/* Error handling functions */
int CpuMain_has_errors(void);
const char* CpuMain_get_errors(void);
void CpuMain_clear_errors(void);
/* Free statically allocated maxfile data */
void CpuMain_free(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_CpuMain_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(linearKernel, 140, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.Debug.printf(Debug.java:343)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:99)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 223, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:498)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:16)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 1, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:498)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:16)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 2, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:498)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:16)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 3, NodeInputMappedReg, "Scalar input (io_controller_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 4, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 5, NodeInput, "Input(controller)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:17)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 6, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 10, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 7, NodeInputMappedReg, "Scalar input (io_p_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 8, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 11, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 9, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 12, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 13, NodeInput, "Input(p)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:18)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 164, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 199, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 200, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 201, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 202, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 203, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 204, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 205, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 206, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 207, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 158, NodePO2FPMult, "PO2FPMult_N1", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:869)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 14, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 160, NodeFIFO, "FIFO(55)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 18, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 15, NodeInputMappedReg, "Scalar input (io_pp_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 16, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 19, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 17, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 20, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 21, NodeInput, "Input(pp)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:19)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 62, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:812)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 193, NodeFIFO, "FIFO(142)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 22, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 161, NodeFIFO, "FIFO(113)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 26, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 23, NodeInputMappedReg, "Scalar input (io_dvv_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 24, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 27, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 25, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 28, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 162, NodeFIFO, "FIFO(88)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 29, NodeInput, "Input(dvv)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:20)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 44, NodeInputMappedReg, "Scalar input (c_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:31)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 63, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 45, NodeInputMappedReg, "Scalar input (c_1_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:36)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 64, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:82)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 65, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:82)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 66, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:82)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 67, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:82)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 68, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 46, NodeInputMappedReg, "Scalar input (c_1_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:37)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 69, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:83)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 70, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:83)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 71, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:83)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 72, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:83)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 73, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 47, NodeInputMappedReg, "Scalar input (c_1_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:38)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 74, NodeStreamOffset, "stream offset: 3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:84)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 75, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:84)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 76, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:84)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 77, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:84)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 78, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 48, NodeInputMappedReg, "Scalar input (c_1_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:39)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 79, NodeStreamOffset, "stream offset: 4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 80, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 81, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 82, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:85)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 83, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 49, NodeInputMappedReg, "Scalar input (c_1_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:40)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 84, NodeStreamOffset, "stream offset: 5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:86)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 85, NodeStreamOffset, "stream offset: -5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:86)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 86, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:86)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 87, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:86)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 88, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 50, NodeInputMappedReg, "Scalar input (c_2_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:42)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 41, NodeInputMappedReg, "Scalar input (io_py_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 42, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 43, NodeInput, "Input(py)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:23)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 89, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:87)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 173, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 90, NodeStreamOffset, "stream offset: -5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:87)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 91, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:87)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 92, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:87)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 93, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 51, NodeInputMappedReg, "Scalar input (c_2_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:43)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 208, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 94, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:88)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 209, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 95, NodeStreamOffset, "stream offset: -6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:88)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 96, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:88)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 97, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:88)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 98, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 52, NodeInputMappedReg, "Scalar input (c_2_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:44)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 210, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 99, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:89)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 211, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 100, NodeStreamOffset, "stream offset: -7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:89)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 101, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:89)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 102, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:89)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 103, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 53, NodeInputMappedReg, "Scalar input (c_2_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:45)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 212, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 213, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 104, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:90)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 214, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 105, NodeStreamOffset, "stream offset: -8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:90)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 106, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:90)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 107, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:90)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 108, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 54, NodeInputMappedReg, "Scalar input (c_2_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:46)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 109, NodeStreamOffset, "stream offset: -9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:91)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 110, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:91)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 111, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:91)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 182, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 112, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 55, NodeInputMappedReg, "Scalar input (c_3_0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:48)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 38, NodeInputMappedReg, "Scalar input (io_px_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 39, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 40, NodeInput, "Input(px)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:569)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:22)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 113, NodeStreamOffset, "stream offset: -4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:92)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 183, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 114, NodeStreamOffset, "stream offset: -5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:92)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 115, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:92)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 116, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:92)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 117, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 56, NodeInputMappedReg, "Scalar input (c_3_1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:49)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 215, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 118, NodeStreamOffset, "stream offset: -3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:93)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 216, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 119, NodeStreamOffset, "stream offset: -6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:93)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 120, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:93)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 121, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:93)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 122, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 57, NodeInputMappedReg, "Scalar input (c_3_2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:50)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 217, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 123, NodeStreamOffset, "stream offset: -2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:94)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 218, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 124, NodeStreamOffset, "stream offset: -7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:94)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 125, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:94)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 126, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:94)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 127, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 58, NodeInputMappedReg, "Scalar input (c_3_3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:51)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 219, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 220, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 128, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:95)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 221, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 129, NodeStreamOffset, "stream offset: -8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:95)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 130, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:95)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 131, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:95)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 132, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:81)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 59, NodeInputMappedReg, "Scalar input (c_3_4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:980)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:52)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 133, NodeStreamOffset, "stream offset: -9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:235)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:96)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 134, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:96)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 135, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:96)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 192, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 136, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 137, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:849)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 138, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 30, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 194, NodeFIFO, "FIFO(113)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 34, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 31, NodeInputMappedReg, "Scalar input (io_source_container_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 32, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 35, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 33, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 195, NodeFIFO, "FIFO(108)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 36, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 37, NodeInput, "Input(source_container)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:502)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:21)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 139, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:775)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:80)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 141, NodePrintf, "NodePrintf", "com.maxeler.maxcompiler.v2.kernelcompiler.Debug.printf(Debug.java:343)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:99)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 142, NodeCast, "{HWOffsetFix:1, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:160)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 196, NodeFIFO, "FIFO(113)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 146, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 143, NodeInputMappedReg, "Scalar input (io_ppresult_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 144, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 147, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 145, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 148, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 197, NodeFIFO, "FIFO(125)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 149, NodeOutput, "Output(ppresult)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:633)\ncpuMain.CpuMainKernel.<init>(CpuMainKernel.maxj:101)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:43)\n")
PHOTON_NODE_DATA(linearKernel, 153, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 222, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 151, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 152, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 198, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 154, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 156, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 157, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
PHOTON_NODE_DATA(linearKernel, 155, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:314)\ncpuMain.CpuMainManager.main(CpuMainManager.maxj:61)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int CpuMain_has_errors(void)
{	return stored_has_error; }
const char* CpuMain_get_errors(void)
{	return stored_error; }
void CpuMain_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static void CpuMain_static_init(void) 
{
	stored_maxfile = CpuMain_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void CpuMain_free(void)
{
	if(stored_engine != NULL)
		max_unload(stored_engine);
	if(stored_maxfile != NULL)
		max_file_free(stored_maxfile);
	if(stored_error != NULL)
		free(stored_error);
}



/*----------------------------------------------------------------------------*/
/*--------------------------- Interface writeLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_writeLMem(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_writeLMem_nonblock(param_address, param_nbytes, instream_cpu_to_lmem);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	const void *instream_cpu_to_lmem)
{
	CpuMain_writeLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.instream_cpu_to_lmem = instream_cpu_to_lmem;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_writeLMem_run(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_writeLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_writeLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_writeLMem_run_group(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_writeLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_group_nonblock(max_group_t *group, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'writeLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_writeLMem_run_array(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_writeLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'writeLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_writeLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_writeLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_writeLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_writeLMem_convert(max_file_t *maxfile, CpuMain_writeLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "linearKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "controller" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream cpu_to_lmem */
	size_t instream_size_cpu_to_lmem = param_nbytes;
	if (instream_size_cpu_to_lmem > 0) {
		max_queue_input(actions, "cpu_to_lmem", interface_actions->instream_cpu_to_lmem,instream_size_cpu_to_lmem);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream cpu_to_lmem */
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "ppresult" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_lmem(actions, "dvv" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "p" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "pp" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "px" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "py" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "source_container" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "write_lmem" */
	size_t lmem_address_write_lmem = param_address;
	size_t lmem_arr_size_write_lmem = param_nbytes;
	int lmem_burst_size_write_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_address_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_write_lmem, lmem_burst_size_write_lmem );
	}
	if ( (lmem_arr_size_write_lmem % lmem_burst_size_write_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem write_lmem parameter 'lmem_arr_size_write_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_write_lmem, lmem_burst_size_write_lmem );
	}
	if (lmem_arr_size_write_lmem > 0) {
		max_lmem_linear(actions, "write_lmem", lmem_address_write_lmem, lmem_arr_size_write_lmem);
	} else {
		max_ignore_lmem(actions, "write_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "write_lmem" */
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface readLMem ----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain_readLMem(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_readLMem_nonblock(param_address, param_nbytes, outstream_lmem_to_cpu);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_nonblock(
	int64_t param_address,
	int64_t param_nbytes,
	void *outstream_lmem_to_cpu)
{
	CpuMain_readLMem_actions_t interface_actions;
	interface_actions.param_address = param_address;
	interface_actions.param_nbytes = param_nbytes;
	interface_actions.outstream_lmem_to_cpu = outstream_lmem_to_cpu;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_readLMem_run(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_readLMem_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_readLMem_run_nonblock(
	max_engine_t *engine,
	CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_readLMem_run_group(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_readLMem_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_group_nonblock(max_group_t *group, CpuMain_readLMem_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'readLMem'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_readLMem_run_array(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_readLMem_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'readLMem'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_readLMem_run_array_nonblock(max_engarray_t *engarray, CpuMain_readLMem_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_readLMem_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_readLMem_convert(max_file_t *maxfile, CpuMain_readLMem_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	int64_t param_address = interface_actions->param_address;
	
	int64_t param_nbytes = interface_actions->param_nbytes;
	
	max_ignore_scalar(actions, "linearKernel", "run_cycle_count" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_1_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_2_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_0" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_1" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_2" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_3" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_scalar(actions, "linearKernel", "c_3_4" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "controller" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for stream lmem_to_cpu */
	size_t outstream_size_lmem_to_cpu = param_nbytes;
	if (outstream_size_lmem_to_cpu > 0) {
		max_queue_output(actions, "lmem_to_cpu", interface_actions->outstream_lmem_to_cpu,outstream_size_lmem_to_cpu);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream lmem_to_cpu */
	
	max_ignore_stream(actions, "ppresult" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_lmem(actions, "dvv" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "p" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "pp" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "px" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "py" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "read_lmem" */
	size_t lmem_address_read_lmem = param_address;
	size_t lmem_arr_size_read_lmem = param_nbytes;
	int lmem_burst_size_read_lmem = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_address_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_read_lmem, lmem_burst_size_read_lmem );
	}
	if ( (lmem_arr_size_read_lmem % lmem_burst_size_read_lmem) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem read_lmem parameter 'lmem_arr_size_read_lmem' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_read_lmem, lmem_burst_size_read_lmem );
	}
	if (lmem_arr_size_read_lmem > 0) {
		max_lmem_linear(actions, "read_lmem", lmem_address_read_lmem, lmem_arr_size_read_lmem);
	} else {
		max_ignore_lmem(actions, "read_lmem");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "read_lmem" */
	
	max_ignore_lmem(actions, "source_container" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


void CpuMain(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_size,
	int64_t param_stencilSize,
	const int32_t *instream_controller)
{
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return; }
	}
	max_run_t *run = CpuMain_nonblock(param_c_0, param_c_1_0, param_c_1_1, param_c_1_2, param_c_1_3, param_c_1_4, param_c_2_0, param_c_2_1, param_c_2_2, param_c_2_3, param_c_2_4, param_c_3_0, param_c_3_1, param_c_3_2, param_c_3_3, param_c_3_4, param_size, param_stencilSize, instream_controller);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_nonblock(
	double param_c_0,
	double param_c_1_0,
	double param_c_1_1,
	double param_c_1_2,
	double param_c_1_3,
	double param_c_1_4,
	double param_c_2_0,
	double param_c_2_1,
	double param_c_2_2,
	double param_c_2_3,
	double param_c_2_4,
	double param_c_3_0,
	double param_c_3_1,
	double param_c_3_2,
	double param_c_3_3,
	double param_c_3_4,
	int64_t param_size,
	int64_t param_stencilSize,
	const int32_t *instream_controller)
{
	CpuMain_actions_t interface_actions;
	interface_actions.param_c_0 = param_c_0;
	interface_actions.param_c_1_0 = param_c_1_0;
	interface_actions.param_c_1_1 = param_c_1_1;
	interface_actions.param_c_1_2 = param_c_1_2;
	interface_actions.param_c_1_3 = param_c_1_3;
	interface_actions.param_c_1_4 = param_c_1_4;
	interface_actions.param_c_2_0 = param_c_2_0;
	interface_actions.param_c_2_1 = param_c_2_1;
	interface_actions.param_c_2_2 = param_c_2_2;
	interface_actions.param_c_2_3 = param_c_2_3;
	interface_actions.param_c_2_4 = param_c_2_4;
	interface_actions.param_c_3_0 = param_c_3_0;
	interface_actions.param_c_3_1 = param_c_3_1;
	interface_actions.param_c_3_2 = param_c_3_2;
	interface_actions.param_c_3_3 = param_c_3_3;
	interface_actions.param_c_3_4 = param_c_3_4;
	interface_actions.param_size = param_size;
	interface_actions.param_stencilSize = param_stencilSize;
	interface_actions.instream_controller = instream_controller;
	(void) pthread_once(&slic_bs_is_initialised, CpuMain_static_init);
	if(stored_maxfile == NULL) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Maxfile was not loaded."); return NULL; }
	}
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(stored_maxfile, &interface_actions);
	if(actions[0] == NULL) { 
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to build actions");return NULL; }
	}
	max_validate(actions[0]);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(stored_engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return NULL; }
	}
	if(!max_ok(stored_engine->errors)  || !max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); set_error_and_free(max_errors_trace(stored_engine->errors)); return NULL;}
	}
	max_actions_free(actions[0]);
	return run;
}

void CpuMain_run(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_run_t *run = CpuMain_run_nonblock(engine, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}

max_run_t *CpuMain_run_nonblock(
	max_engine_t *engine,
	CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	max_actions_t *actions[1];
	actions[0] = CpuMain_convert(maxfile, interface_actions);
	if(!max_ok(actions[0]->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error_and_free(max_errors_trace(actions[0]->errors)); return NULL;}
	}
	max_run_t *run = max_run_multi_nonblock(engine, actions, 1);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions."); return NULL; }
	}
	max_actions_free(actions[0]);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void CpuMain_run_group(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	/* Not strictly correct, because explicitly locking an engine here. */
	max_engine_t *engine = max_lock_any(group);
	if(engine == NULL) return;
	CpuMain_run(engine, interface_actions);
	max_unlock(engine);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_group_nonblock(max_group_t *group, CpuMain_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = CpuMain_convert(maxfile, interface_actions);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void CpuMain_run_array(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_run_t *run = CpuMain_run_array_nonblock(engarray, interface_actions);
	if(run == NULL) { 
		if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to run actions.");return; }
	}
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *CpuMain_run_array_nonblock(max_engarray_t *engarray, CpuMain_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray);
	int i;
	max_actarray_t *arr_actarray[1];
	max_actions_t **arr_actions[1];
	arr_actarray[0] = max_actarray_init(maxfile, engarray->size);
	if(arr_actarray[0] == NULL) return NULL;
	arr_actions[0] = malloc(engarray->size * sizeof(max_actions_t*));
	for(i=0; i < arr_actarray[0]->size; i++) {
		max_actions_t *actions = CpuMain_convert(maxfile, interface_actions[i]);
		if(actions == NULL) return NULL;
		arr_actions[0][i] = actions;
		max_set_action(arr_actarray[0], i, actions);
	}
	max_run_t *run = max_run_array_multi_nonblock(engarray, arr_actarray, 1 );
	for (i=0; i < arr_actarray[0]->size; i++) { max_actions_free(arr_actions[0][i]); }
	max_actarray_free(arr_actarray[0]);
	free(arr_actions[0]);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* CpuMain_convert(max_file_t *maxfile, CpuMain_actions_t *interface_actions)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL || !max_ok(maxfile->errors)) return NULL;

	double param_c_0 = interface_actions->param_c_0;
	
	double param_c_1_0 = interface_actions->param_c_1_0;
	
	double param_c_1_1 = interface_actions->param_c_1_1;
	
	double param_c_1_2 = interface_actions->param_c_1_2;
	
	double param_c_1_3 = interface_actions->param_c_1_3;
	
	double param_c_1_4 = interface_actions->param_c_1_4;
	
	double param_c_2_0 = interface_actions->param_c_2_0;
	
	double param_c_2_1 = interface_actions->param_c_2_1;
	
	double param_c_2_2 = interface_actions->param_c_2_2;
	
	double param_c_2_3 = interface_actions->param_c_2_3;
	
	double param_c_2_4 = interface_actions->param_c_2_4;
	
	double param_c_3_0 = interface_actions->param_c_3_0;
	
	double param_c_3_1 = interface_actions->param_c_3_1;
	
	double param_c_3_2 = interface_actions->param_c_3_2;
	
	double param_c_3_3 = interface_actions->param_c_3_3;
	
	double param_c_3_4 = interface_actions->param_c_3_4;
	
	int64_t param_size = interface_actions->param_size;
	
	int64_t param_stencilSize = interface_actions->param_stencilSize;
	

	/* temporary variables */
	int64_t tmp_0 = (param_size * param_stencilSize);
	int64_t tmp_1 = ((param_size * param_stencilSize) * 4);
	int64_t tmp_2 = (param_size * 4);
	int64_t tmp_3 = (param_size * 4);
	int64_t tmp_4 = (param_size * 4);
	int64_t tmp_5 = ((param_size * 4) * 2);
	int64_t tmp_6 = (param_size * 4);
	int64_t tmp_7 = ((param_size * 4) * 3);
	int64_t tmp_8 = (param_size * 4);
	int64_t tmp_9 = ((param_size * 4) * 4);
	int64_t tmp_10 = ((param_size * param_stencilSize) * 4);
	int64_t tmp_11 = (((param_size * 4) * 4) + ((param_size * param_stencilSize) * 4));
	int64_t tmp_12 = ((param_size * param_stencilSize) * 4);

	/* code for scalar linearKernel.run_cycle_count */
	uint64_t ticks_linearKernel = tmp_0;
	max_set_ticks(actions, "linearKernel", tmp_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.run_cycle_count*/
	
	/* code for scalar linearKernel.c_0 */
	double inscalar_linearKernel_c_0 = param_c_0;
	max_set_double(actions, "linearKernel", "c_0", inscalar_linearKernel_c_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_0*/
	
	/* code for scalar linearKernel.c_1_0 */
	double inscalar_linearKernel_c_1_0 = param_c_1_0;
	max_set_double(actions, "linearKernel", "c_1_0", inscalar_linearKernel_c_1_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_1_0*/
	
	/* code for scalar linearKernel.c_1_1 */
	double inscalar_linearKernel_c_1_1 = param_c_1_1;
	max_set_double(actions, "linearKernel", "c_1_1", inscalar_linearKernel_c_1_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_1_1*/
	
	/* code for scalar linearKernel.c_1_2 */
	double inscalar_linearKernel_c_1_2 = param_c_1_2;
	max_set_double(actions, "linearKernel", "c_1_2", inscalar_linearKernel_c_1_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_1_2*/
	
	/* code for scalar linearKernel.c_1_3 */
	double inscalar_linearKernel_c_1_3 = param_c_1_3;
	max_set_double(actions, "linearKernel", "c_1_3", inscalar_linearKernel_c_1_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_1_3*/
	
	/* code for scalar linearKernel.c_1_4 */
	double inscalar_linearKernel_c_1_4 = param_c_1_4;
	max_set_double(actions, "linearKernel", "c_1_4", inscalar_linearKernel_c_1_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_1_4*/
	
	/* code for scalar linearKernel.c_2_0 */
	double inscalar_linearKernel_c_2_0 = param_c_2_0;
	max_set_double(actions, "linearKernel", "c_2_0", inscalar_linearKernel_c_2_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_2_0*/
	
	/* code for scalar linearKernel.c_2_1 */
	double inscalar_linearKernel_c_2_1 = param_c_2_1;
	max_set_double(actions, "linearKernel", "c_2_1", inscalar_linearKernel_c_2_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_2_1*/
	
	/* code for scalar linearKernel.c_2_2 */
	double inscalar_linearKernel_c_2_2 = param_c_2_2;
	max_set_double(actions, "linearKernel", "c_2_2", inscalar_linearKernel_c_2_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_2_2*/
	
	/* code for scalar linearKernel.c_2_3 */
	double inscalar_linearKernel_c_2_3 = param_c_2_3;
	max_set_double(actions, "linearKernel", "c_2_3", inscalar_linearKernel_c_2_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_2_3*/
	
	/* code for scalar linearKernel.c_2_4 */
	double inscalar_linearKernel_c_2_4 = param_c_2_4;
	max_set_double(actions, "linearKernel", "c_2_4", inscalar_linearKernel_c_2_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_2_4*/
	
	/* code for scalar linearKernel.c_3_0 */
	double inscalar_linearKernel_c_3_0 = param_c_3_0;
	max_set_double(actions, "linearKernel", "c_3_0", inscalar_linearKernel_c_3_0);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_3_0*/
	
	/* code for scalar linearKernel.c_3_1 */
	double inscalar_linearKernel_c_3_1 = param_c_3_1;
	max_set_double(actions, "linearKernel", "c_3_1", inscalar_linearKernel_c_3_1);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_3_1*/
	
	/* code for scalar linearKernel.c_3_2 */
	double inscalar_linearKernel_c_3_2 = param_c_3_2;
	max_set_double(actions, "linearKernel", "c_3_2", inscalar_linearKernel_c_3_2);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_3_2*/
	
	/* code for scalar linearKernel.c_3_3 */
	double inscalar_linearKernel_c_3_3 = param_c_3_3;
	max_set_double(actions, "linearKernel", "c_3_3", inscalar_linearKernel_c_3_3);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_3_3*/
	
	/* code for scalar linearKernel.c_3_4 */
	double inscalar_linearKernel_c_3_4 = param_c_3_4;
	max_set_double(actions, "linearKernel", "c_3_4", inscalar_linearKernel_c_3_4);
	if(!max_ok(actions->errors)) return NULL;
	/* end of code for scalar linearKernel.c_3_4*/
	
	/* code for stream controller */
	size_t instream_size_controller = tmp_1;
	if (instream_size_controller > 0) {
		max_queue_input(actions, "controller", interface_actions->instream_controller,instream_size_controller);
		if (!max_ok(actions->errors)) return NULL;
	}
	/* end of code for stream controller */
	
	max_ignore_stream(actions, "cpu_to_lmem" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "lmem_to_cpu" );
	if(!max_ok(actions->errors)) return NULL;
	
	max_ignore_stream(actions, "ppresult" );
	if(!max_ok(actions->errors)) return NULL;
	
	/* code for linear memory-stream "dvv" */
	size_t lmem_address_dvv = tmp_5;
	size_t lmem_arr_size_dvv = tmp_6;
	int lmem_burst_size_dvv = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_dvv % lmem_burst_size_dvv) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem dvv parameter 'lmem_address_dvv' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_dvv, lmem_burst_size_dvv );
	}
	if ( (lmem_arr_size_dvv % lmem_burst_size_dvv) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem dvv parameter 'lmem_arr_size_dvv' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_dvv, lmem_burst_size_dvv );
	}
	if (lmem_arr_size_dvv > 0) {
		max_lmem_linear(actions, "dvv", lmem_address_dvv, lmem_arr_size_dvv);
	} else {
		max_ignore_lmem(actions, "dvv");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "dvv" */
	
	/* code for linear memory-stream "p" */
	size_t lmem_address_p = 0;
	size_t lmem_arr_size_p = tmp_2;
	int lmem_burst_size_p = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_address_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_p, lmem_burst_size_p );
	}
	if ( (lmem_arr_size_p % lmem_burst_size_p) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem p parameter 'lmem_arr_size_p' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_p, lmem_burst_size_p );
	}
	if (lmem_arr_size_p > 0) {
		max_lmem_linear(actions, "p", lmem_address_p, lmem_arr_size_p);
	} else {
		max_ignore_lmem(actions, "p");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "p" */
	
	/* code for linear memory-stream "pp" */
	size_t lmem_address_pp = tmp_3;
	size_t lmem_arr_size_pp = tmp_4;
	int lmem_burst_size_pp = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_pp % lmem_burst_size_pp) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem pp parameter 'lmem_address_pp' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_pp, lmem_burst_size_pp );
	}
	if ( (lmem_arr_size_pp % lmem_burst_size_pp) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem pp parameter 'lmem_arr_size_pp' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_pp, lmem_burst_size_pp );
	}
	if (lmem_arr_size_pp > 0) {
		max_lmem_linear(actions, "pp", lmem_address_pp, lmem_arr_size_pp);
	} else {
		max_ignore_lmem(actions, "pp");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "pp" */
	
	/* code for linear memory-stream "px" */
	size_t lmem_address_px = tmp_9;
	size_t lmem_arr_size_px = tmp_10;
	int lmem_burst_size_px = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_px % lmem_burst_size_px) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem px parameter 'lmem_address_px' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_px, lmem_burst_size_px );
	}
	if ( (lmem_arr_size_px % lmem_burst_size_px) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem px parameter 'lmem_arr_size_px' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_px, lmem_burst_size_px );
	}
	if (lmem_arr_size_px > 0) {
		max_lmem_linear(actions, "px", lmem_address_px, lmem_arr_size_px);
	} else {
		max_ignore_lmem(actions, "px");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "px" */
	
	/* code for linear memory-stream "py" */
	size_t lmem_address_py = tmp_11;
	size_t lmem_arr_size_py = tmp_12;
	int lmem_burst_size_py = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_py % lmem_burst_size_py) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem py parameter 'lmem_address_py' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_py, lmem_burst_size_py );
	}
	if ( (lmem_arr_size_py % lmem_burst_size_py) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem py parameter 'lmem_arr_size_py' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_py, lmem_burst_size_py );
	}
	if (lmem_arr_size_py > 0) {
		max_lmem_linear(actions, "py", lmem_address_py, lmem_arr_size_py);
	} else {
		max_ignore_lmem(actions, "py");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "py" */
	
	max_ignore_lmem(actions, "read_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	/* code for linear memory-stream "source_container" */
	size_t lmem_address_source_container = tmp_7;
	size_t lmem_arr_size_source_container = tmp_8;
	int lmem_burst_size_source_container = max_get_burst_size(maxfile, NULL);
	if ( (lmem_address_source_container % lmem_burst_size_source_container) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem source_container parameter 'lmem_address_source_container' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_address_source_container, lmem_burst_size_source_container );
	}
	if ( (lmem_arr_size_source_container % lmem_burst_size_source_container) != 0 ) {
		fprintf(stdout, "\nSLiC Error: %s:%d : LMem source_container parameter 'lmem_arr_size_source_container' is set to %zd bytes; it must be a multiple of %d bytes\n", __FILE__, __LINE__, lmem_arr_size_source_container, lmem_burst_size_source_container );
	}
	if (lmem_arr_size_source_container > 0) {
		max_lmem_linear(actions, "source_container", lmem_address_source_container, lmem_arr_size_source_container);
	} else {
		max_ignore_lmem(actions, "source_container");
	}
	if ( !max_ok(actions->errors) ) return NULL;
	/* end of code for linear memory-stream "source_container" */
	
	max_ignore_lmem(actions, "write_lmem" );
	if ( !max_ok(actions->errors) ) return NULL;
	
	return actions;
}



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4Kc3RhdGljIG1heF9maWxlX3QgKnN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKc3RhdGljIG1heF9lbmdpbmVfdCAqc3RvcmVkX2VuZ2luZSA9IE5VTEw7CnN0YXRpYyBj
aGFyICpzdG9yZWRfZXJyb3IgPSBOVUxMOwpzdGF0aWMgaW50IHN0b3JlZF9oYXNfZXJyb3IgPSAw
OwpzdGF0aWMgcHRocmVhZF9vbmNlX3Qgc2xpY19ic19pc19pbml0aWFsaXNlZCA9IFBUSFJFQURf
T05DRV9JTklUOwoKc3RhdGljIHZvaWQgc2V0X2Vycm9yKGNvbnN0IGNoYXIgKmVycm9yX3N0cikK
ewoJc3RvcmVkX2hhc19lcnJvciA9IDE7IAoJaWYoc3RvcmVkX2Vycm9yID09IE5VTEwpIHsKCQlz
dG9yZWRfZXJyb3IgPSBzdHJkdXAoZXJyb3Jfc3RyKTsKCX0gZWxzZSB7CgkJY2hhciAqbmVyciA9
IG1hbGxvYyhzdHJsZW4oc3RvcmVkX2Vycm9yKSArIHN0cmxlbihlcnJvcl9zdHIpICsgMik7CgkJ
c3ByaW50ZihuZXJyLCAiJXNcbiVzIiwgc3RvcmVkX2Vycm9yLCBlcnJvcl9zdHIpOwoJCWZyZWUo
c3RvcmVkX2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBuZXJyOwoJfQp9CnN0YXRpYyB2b2lkIHNl
dF9lcnJvcl9hbmRfZnJlZShjaGFyICplcnJvcl9zdHIpewoJc2V0X2Vycm9yKGVycm9yX3N0cik7
CglmcmVlKGVycm9yX3N0cik7Cn0KaW50IENwdU1haW5faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVy
biBzdG9yZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIENwdU1haW5fZ2V0X2Vycm9ycyh2b2lk
KQp7CXJldHVybiBzdG9yZWRfZXJyb3I7IH0Kdm9pZCBDcHVNYWluX2NsZWFyX2Vycm9ycyh2b2lk
KQp7CglmcmVlKHN0b3JlZF9lcnJvcik7CglzdG9yZWRfZXJyb3IgPSBOVUxMOwoJc3RvcmVkX2hh
c19lcnJvciA9IDA7Cn0KCnN0YXRpYyB2b2lkIENwdU1haW5fc3RhdGljX2luaXQodm9pZCkgCnsK
CXN0b3JlZF9tYXhmaWxlID0gQ3B1TWFpbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0g
TlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZp
bGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFi
bGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFs
X2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9n
bG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChN
QVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNf
bW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3Vz
ID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJc3RvcmVkX2VuZ2luZSA9
IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZp
bGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElD
X0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJs
ZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7
CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNf
dHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCglt
YXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lk
IENwdU1haW5fZnJlZSh2b2lkKQp7CglpZihzdG9yZWRfZW5naW5lICE9IE5VTEwpCgkJbWF4X3Vu
bG9hZChzdG9yZWRfZW5naW5lKTsKCWlmKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpCgkJbWF4X2Zp
bGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CglpZihzdG9yZWRfZXJyb3IgIT0gTlVMTCkKCQlmcmVl
KHN0b3JlZF9lcnJvcik7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIHdyaXRlTE1lbSAtLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgp2b2lkIENwdU1haW5fd3JpdGVM
TWVtKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNzLAoJaW50NjRfdCBwYXJhbV9uYnl0ZXMsCgljb25z
dCB2b2lkICppbnN0cmVhbV9jcHVfdG9fbG1lbSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4
ZmlsZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
Ik1heGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybjsgfQoJfQoJbWF4X3J1bl90ICpydW4g
PSBDcHVNYWluX3dyaXRlTE1lbV9ub25ibG9jayhwYXJhbV9hZGRyZXNzLCBwYXJhbV9uYnl0ZXMs
IGluc3RyZWFtX2NwdV90b19sbWVtKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3Jl
dHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1l
bV9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fYWRkcmVzcywKCWludDY0X3QgcGFyYW1fbmJ5dGVz
LAoJY29uc3Qgdm9pZCAqaW5zdHJlYW1fY3B1X3RvX2xtZW0pCnsKCUNwdU1haW5fd3JpdGVMTWVt
X2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2Fk
ZHJlc3MgPSBwYXJhbV9hZGRyZXNzOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbmJ5dGVzID0g
cGFyYW1fbmJ5dGVzOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fY3B1X3RvX2xtZW0gPSBp
bnN0cmVhbV9jcHVfdG9fbG1lbTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5p
dGlhbGlzZWQsIENwdU1haW5fc3RhdGljX2luaXQpOwoJaWYoc3RvcmVkX21heGZpbGUgPT0gTlVM
TCkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNF
X0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJNYXhmaWxlIHdh
cyBub3QgbG9hZGVkLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
c1sxXTsKCWFjdGlvbnNbMF0gPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMpOwoJaWYoYWN0aW9uc1swXSA9PSBOVUxMKSB7IAoJCWlm
KG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09O
X0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gYnVpbGQgYWN0
aW9ucyIpO3JldHVybiBOVUxMOyB9Cgl9CgltYXhfdmFsaWRhdGUoYWN0aW9uc1swXSk7CglpZigh
bWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxz
ZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9y
cykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9u
YmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlp
ZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRf
T05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0
aW9ucy4iKTtyZXR1cm4gTlVMTDsgfQoJfQoJaWYoIW1heF9vayhzdG9yZWRfZW5naW5lLT5lcnJv
cnMpICB8fCAhbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0
KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNb
MF0tPmVycm9ycykpOyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRf
ZW5naW5lLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zWzBdKTsKCXJldHVybiBydW47Cn0KCnZvaWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuKAoJbWF4
X2VuZ2luZV90ICplbmdpbmUsCglDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5fd3JpdGVMTWVtX3J1bl9ub25i
bG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlm
IChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rp
b25zLiIpO3JldHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWlu
X3dyaXRlTE1lbV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5f
d3JpdGVMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1h
eGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnNbMV07CglhY3Rpb25zWzBdID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykp
IHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhf
ZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhf
cnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zLCAxKTsK
CWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2Fj
dGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdy
b3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3dyaXRl
TE1lbScuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBh
Y3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZv
aWQgQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgQ3B1TWFp
bl93cml0ZUxNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJLyogTm90IHN0cmlj
dGx5IGNvcnJlY3QsIGJlY2F1c2UgZXhwbGljaXRseSBsb2NraW5nIGFuIGVuZ2luZSBoZXJlLiAq
LwoJbWF4X2VuZ2luZV90ICplbmdpbmUgPSBtYXhfbG9ja19hbnkoZ3JvdXApOwoJaWYoZW5naW5l
ID09IE5VTEwpIHJldHVybjsKCUNwdU1haW5fd3JpdGVMTWVtX3J1bihlbmdpbmUsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCW1heF91bmxvY2soZW5naW5lKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ3dyaXRlTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24g
dGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRp
YXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1h
eF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3
aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5f
Z3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICog
XHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2Vf
YWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpDcHVNYWluX3dyaXRlTE1lbV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3Vw
X3QgKmdyb3VwLCBDcHVNYWluX3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ3B1TWFpbl93cml0ZUxNZW1fY29udmVydChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxM
OwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0
ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91
cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoK
Ci8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnd3JpdGVMTWVtJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBh
cnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rp
b25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBh
Y3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2Vf
YWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBDcHVN
YWluX3dyaXRlTE1lbV9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDcHVNYWlu
X3dyaXRlTE1lbV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAq
cnVuID0gQ3B1TWFpbl93cml0ZUxNZW1fcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgp
OwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0K
CX0KCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICd3cml0ZUxNZW0n
LgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBh
cnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9m
IGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRo
ZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBv
ciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxl
ZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJh
bSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtp
bl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0
dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkNwdU1haW5fd3JpdGVMTWVtX3J1
bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fd3JpdGVM
TWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4Zmls
ZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXkpOwoJaW50IGk7CgltYXhfYWN0
YXJyYXlfdCAqYXJyX2FjdGFycmF5WzFdOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zWzFd
OwoJYXJyX2FjdGFycmF5WzBdID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXkt
PnNpemUpOwoJaWYoYXJyX2FjdGFycmF5WzBdID09IE5VTEwpIHJldHVybiBOVUxMOwoJYXJyX2Fj
dGlvbnNbMF0gPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCop
KTsKCWZvcihpPTA7IGkgPCBhcnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykgewoJCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBDcHVNYWluX3dyaXRlTE1lbV9jb252ZXJ0KG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zW2ldKTsKCQlpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFy
cl9hY3Rpb25zWzBdW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhcnJfYWN0YXJyYXlb
MF0sIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X211bHRp
X25vbmJsb2NrKGVuZ2FycmF5LCBhcnJfYWN0YXJyYXksIDEgKTsKCWZvciAoaT0wOyBpIDwgYXJy
X2FjdGFycmF5WzBdLT5zaXplOyBpKyspIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1sw
XVtpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFycl9hY3RhcnJheVswXSk7CglmcmVlKGFycl9h
Y3Rpb25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3Rh
dGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhf
YWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRp
bGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVy
ZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxw
YXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9u
cyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVu
LCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBDcHVNYWluX3dy
aXRlTE1lbV9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIENwdU1haW5fd3JpdGVMTWVtX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBt
YXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMIHx8ICFt
YXhfb2sobWF4ZmlsZS0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgoJaW50NjRfdCBwYXJhbV9hZGRy
ZXNzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2FkZHJlc3M7CgkKCWludDY0X3QgcGFyYW1f
bmJ5dGVzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX25ieXRlczsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJydW5fY3ljbGVfY291bnQiICk7CglpZigh
bWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxh
cihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfMCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+
ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5l
YXJLZXJuZWwiLCAiY18xXzAiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVy
biBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNf
MV8xIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzFfMiIgKTsKCWlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFy
KGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18xXzMiICk7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGlu
ZWFyS2VybmVsIiwgImNfMV80IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJj
XzJfMCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1h
eF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18yXzEiICk7CglpZigh
bWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxh
cihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfMl8yIiApOwoJaWYoIW1heF9vayhhY3Rpb25z
LT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxp
bmVhcktlcm5lbCIsICJjXzJfMyIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAi
Y18yXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCglt
YXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfM18wIiApOwoJaWYo
IW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2Fs
YXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzNfMSIgKTsKCWlmKCFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJs
aW5lYXJLZXJuZWwiLCAiY18zXzIiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJl
dHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwg
ImNfM18zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJ
bWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzNfNCIgKTsKCWlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc3Ry
ZWFtKGFjdGlvbnMsICJjb250cm9sbGVyIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGNwdV90b19sbWVtICovCglzaXpl
X3QgaW5zdHJlYW1fc2l6ZV9jcHVfdG9fbG1lbSA9IHBhcmFtX25ieXRlczsKCWlmIChpbnN0cmVh
bV9zaXplX2NwdV90b19sbWVtID4gMCkgewoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAiY3B1
X3RvX2xtZW0iLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fY3B1X3RvX2xtZW0saW5zdHJl
YW1fc2l6ZV9jcHVfdG9fbG1lbSk7CgkJaWYgKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIGNwdV90b19sbWVtICovCgkK
CW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJsbWVtX3RvX2NwdSIgKTsKCWlmKCFtYXhfb2so
YWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlv
bnMsICJwcHJlc3VsdCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5V
TEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAiZHZ2IiApOwoJaWYgKCAhbWF4X29rKGFj
dGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMs
ICJwIiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJ
bWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJwcCIgKTsKCWlmICggIW1heF9vayhhY3Rpb25zLT5l
cnJvcnMpICkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicHgiICk7
CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgltYXhfaWdu
b3JlX2xtZW0oYWN0aW9ucywgInB5IiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykg
KSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJyZWFkX2xtZW0iICk7
CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgltYXhfaWdu
b3JlX2xtZW0oYWN0aW9ucywgInNvdXJjZV9jb250YWluZXIiICk7CglpZiAoICFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgkvKiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5
LXN0cmVhbSAid3JpdGVfbG1lbSIgKi8KCXNpemVfdCBsbWVtX2FkZHJlc3Nfd3JpdGVfbG1lbSA9
IHBhcmFtX2FkZHJlc3M7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtID0gcGFyYW1f
bmJ5dGVzOwoJaW50IGxtZW1fYnVyc3Rfc2l6ZV93cml0ZV9sbWVtID0gbWF4X2dldF9idXJzdF9z
aXplKG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1lbV9hZGRyZXNzX3dyaXRlX2xtZW0gJSBsbWVt
X2J1cnN0X3NpemVfd3JpdGVfbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xp
QyBFcnJvcjogJXM6JWQgOiBMTWVtIHdyaXRlX2xtZW0gcGFyYW1ldGVyICdsbWVtX2FkZHJlc3Nf
d3JpdGVfbG1lbScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9m
ICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc193cml0ZV9sbWVt
LCBsbWVtX2J1cnN0X3NpemVfd3JpdGVfbG1lbSApOwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV93
cml0ZV9sbWVtICUgbG1lbV9idXJzdF9zaXplX3dyaXRlX2xtZW0pICE9IDAgKSB7CgkJZnByaW50
ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSB3cml0ZV9sbWVtIHBhcmFtZXRl
ciAnbG1lbV9hcnJfc2l6ZV93cml0ZV9sbWVtJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0
IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9h
cnJfc2l6ZV93cml0ZV9sbWVtLCBsbWVtX2J1cnN0X3NpemVfd3JpdGVfbG1lbSApOwoJfQoJaWYg
KGxtZW1fYXJyX3NpemVfd3JpdGVfbG1lbSA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9u
cywgIndyaXRlX2xtZW0iLCBsbWVtX2FkZHJlc3Nfd3JpdGVfbG1lbSwgbG1lbV9hcnJfc2l6ZV93
cml0ZV9sbWVtKTsKCX0gZWxzZSB7CgkJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJ3cml0ZV9s
bWVtIik7Cgl9CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJ
LyogZW5kIG9mIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJ3cml0ZV9sbWVtIiAqLwoJ
CglyZXR1cm4gYWN0aW9uczsKfQoKCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSByZWFkTE1lbSAtLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgp2b2lkIENwdU1haW5fcmVh
ZExNZW0oCglpbnQ2NF90IHBhcmFtX2FkZHJlc3MsCglpbnQ2NF90IHBhcmFtX25ieXRlcywKCXZv
aWQgKm91dHN0cmVhbV9sbWVtX3RvX2NwdSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19i
c19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4Zmls
ZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIk1h
eGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybjsgfQoJfQoJbWF4X3J1bl90ICpydW4gPSBD
cHVNYWluX3JlYWRMTWVtX25vbmJsb2NrKHBhcmFtX2FkZHJlc3MsIHBhcmFtX25ieXRlcywgb3V0
c3RyZWFtX2xtZW1fdG9fY3B1KTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFi
b3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3JldHVy
bjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3JlYWRMTWVtX25v
bmJsb2NrKAoJaW50NjRfdCBwYXJhbV9hZGRyZXNzLAoJaW50NjRfdCBwYXJhbV9uYnl0ZXMsCgl2
b2lkICpvdXRzdHJlYW1fbG1lbV90b19jcHUpCnsKCUNwdU1haW5fcmVhZExNZW1fYWN0aW9uc190
IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fYWRkcmVzcyA9IHBh
cmFtX2FkZHJlc3M7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9uYnl0ZXMgPSBwYXJhbV9uYnl0
ZXM7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fbG1lbV90b19jcHUgPSBvdXRzdHJlYW1f
bG1lbV90b19jcHU7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2Vk
LCBDcHVNYWluX3N0YXRpY19pbml0KTsKCWlmKHN0b3JlZF9tYXhmaWxlID09IE5VTEwpIHsKCQlp
ZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiTWF4ZmlsZSB3YXMgbm90IGxv
YWRlZC4iKTsgcmV0dXJuIE5VTEw7IH0KCX0KCW1heF9hY3Rpb25zX3QgKmFjdGlvbnNbMV07Cglh
Y3Rpb25zWzBdID0gQ3B1TWFpbl9yZWFkTE1lbV9jb252ZXJ0KHN0b3JlZF9tYXhmaWxlLCAmaW50
ZXJmYWNlX2FjdGlvbnMpOwoJaWYoYWN0aW9uc1swXSA9PSBOVUxMKSB7IAoJCWlmKG1heF9jb25m
aWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkg
YWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIpO3Jl
dHVybiBOVUxMOyB9Cgl9CgltYXhfdmFsaWRhdGUoYWN0aW9uc1swXSk7CglpZighbWF4X29rKGFj
dGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1
cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soc3Rv
cmVkX2VuZ2luZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTty
ZXR1cm4gTlVMTDsgfQoJfQoJaWYoIW1heF9vayhzdG9yZWRfZW5naW5lLT5lcnJvcnMpICB8fCAh
bWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxz
ZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9y
cykpOyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRfZW5naW5lLT5l
cnJvcnMpKTsgcmV0dXJuIE5VTEw7fQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zWzBdKTsK
CXJldHVybiBydW47Cn0KCnZvaWQgQ3B1TWFpbl9yZWFkTE1lbV9ydW4oCgltYXhfZW5naW5lX3Qg
KmVuZ2luZSwKCUNwdU1haW5fcmVhZExNZW1fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykK
ewoJbWF4X3J1bl90ICpydW4gPSBDcHVNYWluX3JlYWRMTWVtX3J1bl9ub25ibG9jayhlbmdpbmUs
IGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJCWlmIChtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFi
b3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBhY3Rpb25zLiIpO3JldHVy
bjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDcHVNYWluX3JlYWRMTWVtX3J1
bl9ub25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJQ3B1TWFpbl9yZWFkTE1lbV9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2Vu
Z2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgltYXhfYWN0aW9uc190ICphY3Rpb25zWzFdOwoJ
YWN0aW9uc1swXSA9IENwdU1haW5fcmVhZExNZW1fY29udmVydChtYXhmaWxlLCBpbnRlcmZhY2Vf
YWN0aW9ucyk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFj
dGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1h
eF9ydW5fbXVsdGlfbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zLCAxKTsKCWlmKHJ1biA9PSBOVUxM
KSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRv
IHJ1biBhY3Rpb25zLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zWzBdKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNl
ZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3JlYWRMTWVtJy4KICogCiAqIFxw
YXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFj
ZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZp
cnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBDcHVNYWluX3JlYWRM
TWVtX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIENwdU1haW5fcmVhZExNZW1fYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJLyogTm90IHN0cmljdGx5IGNvcnJlY3QsIGJlY2F1
c2UgZXhwbGljaXRseSBsb2NraW5nIGFuIGVuZ2luZSBoZXJlLiAqLwoJbWF4X2VuZ2luZV90ICpl
bmdpbmUgPSBtYXhfbG9ja19hbnkoZ3JvdXApOwoJaWYoZW5naW5lID09IE5VTEwpIHJldHVybjsK
CUNwdU1haW5fcmVhZExNZW1fcnVuKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJbWF4X3Vu
bG9jayhlbmdpbmUpOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGlj
IG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAncmVhZExNZW0nLgogKiAK
ICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZh
aWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVz
IG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhh
dCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVu
bmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3Vt
ZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdy
b3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBy
dW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFj
dGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqQ3B1TWFpbl9y
ZWFkTE1lbV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBDcHVNYWluX3Jl
YWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZp
bGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlv
bnMgPSBDcHVNYWluX3JlYWRMTWVtX2NvbnZlcnQobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMp
OwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+
ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3Qg
KnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlv
bnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1
biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3JlYWRMTWVtJy4K
ICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4K
ICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25z
IHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBl
bmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRo
ZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBDcHVNYWluX3JlYWRMTWVtX3J1bl9hcnJheSht
YXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fcmVhZExNZW1fYWN0aW9uc190ICppbnRl
cmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IENwdU1haW5fcmVhZExNZW1fcnVu
X2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglpZihydW4gPT0g
TlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRF
UkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJs
ZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0KCW1heF93YWl0KHJ1bik7Cn0KCgovKioK
ICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9u
IGZvciB0aGUgaW50ZXJmYWNlICdyZWFkTE1lbScuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4g
dGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4g
aW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRj
aCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBj
aGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0
IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5
IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9m
IGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJy
YXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlv
biBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1h
eF9ydW5fdCAqQ3B1TWFpbl9yZWFkTE1lbV9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5
X3QgKmVuZ2FycmF5LCBDcHVNYWluX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUo
ZW5nYXJyYXkpOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAqYXJyX2FjdGFycmF5WzFdOwoJbWF4
X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zWzFdOwoJYXJyX2FjdGFycmF5WzBdID0gbWF4X2FjdGFy
cmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYoYXJyX2FjdGFycmF5WzBdID09
IE5VTEwpIHJldHVybiBOVUxMOwoJYXJyX2FjdGlvbnNbMF0gPSBtYWxsb2MoZW5nYXJyYXktPnNp
emUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsKCWZvcihpPTA7IGkgPCBhcnJfYWN0YXJyYXlb
MF0tPnNpemU7IGkrKykgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBDcHVNYWluX3JlYWRM
TWVtX2NvbnZlcnQobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0pOwoJCWlmKGFjdGlvbnMg
PT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbMF1baV0gPSBhY3Rpb25zOwoJCW1h
eF9zZXRfYWN0aW9uKGFycl9hY3RhcnJheVswXSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3Qg
KnJ1biA9IG1heF9ydW5fYXJyYXlfbXVsdGlfbm9uYmxvY2soZW5nYXJyYXksIGFycl9hY3RhcnJh
eSwgMSApOwoJZm9yIChpPTA7IGkgPCBhcnJfYWN0YXJyYXlbMF0tPnNpemU7IGkrKykgeyBtYXhf
YWN0aW9uc19mcmVlKGFycl9hY3Rpb25zWzBdW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYXJy
X2FjdGFycmF5WzBdKTsKCWZyZWUoYXJyX2FjdGlvbnNbMF0pOwoJcmV0dXJuIHJ1bjsKfQoKCi8q
KgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50
byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRo
YXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVu
Y3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxl
IFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhl
IGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1p
Yy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICov
Cm1heF9hY3Rpb25zX3QqIENwdU1haW5fcmVhZExNZW1fY29udmVydChtYXhfZmlsZV90ICptYXhm
aWxlLCBDcHVNYWluX3JlYWRMTWVtX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJ
aWYoYWN0aW9ucyA9PSBOVUxMIHx8ICFtYXhfb2sobWF4ZmlsZS0+ZXJyb3JzKSkgcmV0dXJuIE5V
TEw7CgoJaW50NjRfdCBwYXJhbV9hZGRyZXNzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2Fk
ZHJlc3M7CgkKCWludDY0X3QgcGFyYW1fbmJ5dGVzID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFt
X25ieXRlczsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJy
dW5fY3ljbGVfY291bnQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBO
VUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfMCIg
KTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25v
cmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18xXzAiICk7CglpZighbWF4X29r
KGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAibGluZWFyS2VybmVsIiwgImNfMV8xIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJv
cnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktl
cm5lbCIsICJjXzFfMiIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5V
TEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18xXzMi
ICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdu
b3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfMV80IiApOwoJaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzJfMCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJL
ZXJuZWwiLCAiY18yXzEiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBO
VUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfMl8y
IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2ln
bm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzJfMyIgKTsKCWlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18yXzQiICk7CglpZighbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAibGluZWFy
S2VybmVsIiwgImNfM18wIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4g
TlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzNf
MSIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkKCW1heF9p
Z25vcmVfc2NhbGFyKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18zXzIiICk7CglpZighbWF4
X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAibGluZWFyS2VybmVsIiwgImNfM18zIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5l
cnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImxpbmVh
cktlcm5lbCIsICJjXzNfNCIgKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJu
IE5VTEw7CgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMsICJjb250cm9sbGVyIiApOwoJaWYo
IW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zdHJl
YW0oYWN0aW9ucywgImNwdV90b19sbWVtIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGxtZW1fdG9fY3B1ICovCglzaXpl
X3Qgb3V0c3RyZWFtX3NpemVfbG1lbV90b19jcHUgPSBwYXJhbV9uYnl0ZXM7CglpZiAob3V0c3Ry
ZWFtX3NpemVfbG1lbV90b19jcHUgPiAwKSB7CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAi
bG1lbV90b19jcHUiLCBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX2xtZW1fdG9fY3B1LG91
dHN0cmVhbV9zaXplX2xtZW1fdG9fY3B1KTsKCQlpZiAoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gbG1lbV90b19jcHUg
Ki8KCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgInBwcmVzdWx0IiApOwoJaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlv
bnMsICJkdnYiICk7CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxM
OwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInAiICk7CglpZiAoICFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInBw
IiApOwoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJbWF4
X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJweCIgKTsKCWlmICggIW1heF9vayhhY3Rpb25zLT5lcnJv
cnMpICkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicHkiICk7Cglp
ZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJCgkvKiBjb2RlIGZv
ciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAicmVhZF9sbWVtIiAqLwoJc2l6ZV90IGxtZW1fYWRkcmVz
c19yZWFkX2xtZW0gPSBwYXJhbV9hZGRyZXNzOwoJc2l6ZV90IGxtZW1fYXJyX3NpemVfcmVhZF9s
bWVtID0gcGFyYW1fbmJ5dGVzOwoJaW50IGxtZW1fYnVyc3Rfc2l6ZV9yZWFkX2xtZW0gPSBtYXhf
Z2V0X2J1cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChsbWVtX2FkZHJlc3NfcmVhZF9s
bWVtICUgbG1lbV9idXJzdF9zaXplX3JlYWRfbG1lbSkgIT0gMCApIHsKCQlmcHJpbnRmKHN0ZG91
dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHJlYWRfbG1lbSBwYXJhbWV0ZXIgJ2xtZW1f
YWRkcmVzc19yZWFkX2xtZW0nIGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0
aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2FkZHJlc3NfcmVh
ZF9sbWVtLCBsbWVtX2J1cnN0X3NpemVfcmVhZF9sbWVtICk7Cgl9CglpZiAoIChsbWVtX2Fycl9z
aXplX3JlYWRfbG1lbSAlIGxtZW1fYnVyc3Rfc2l6ZV9yZWFkX2xtZW0pICE9IDAgKSB7CgkJZnBy
aW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSByZWFkX2xtZW0gcGFyYW1l
dGVyICdsbWVtX2Fycl9zaXplX3JlYWRfbG1lbScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVz
dCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1f
YXJyX3NpemVfcmVhZF9sbWVtLCBsbWVtX2J1cnN0X3NpemVfcmVhZF9sbWVtICk7Cgl9CglpZiAo
bG1lbV9hcnJfc2l6ZV9yZWFkX2xtZW0gPiAwKSB7CgkJbWF4X2xtZW1fbGluZWFyKGFjdGlvbnMs
ICJyZWFkX2xtZW0iLCBsbWVtX2FkZHJlc3NfcmVhZF9sbWVtLCBsbWVtX2Fycl9zaXplX3JlYWRf
bG1lbSk7Cgl9IGVsc2UgewoJCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicmVhZF9sbWVtIik7
Cgl9CglpZiAoICFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSApIHJldHVybiBOVUxMOwoJLyogZW5k
IG9mIGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJyZWFkX2xtZW0iICovCgkKCW1heF9p
Z25vcmVfbG1lbShhY3Rpb25zLCAic291cmNlX2NvbnRhaW5lciIgKTsKCWlmICggIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25z
LCAid3JpdGVfbG1lbSIgKTsKCWlmICggIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0dXJu
IE5VTEw7CgkKCXJldHVybiBhY3Rpb25zOwp9CgoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCnZvaWQgQ3B1
TWFpbigKCWRvdWJsZSBwYXJhbV9jXzAsCglkb3VibGUgcGFyYW1fY18xXzAsCglkb3VibGUgcGFy
YW1fY18xXzEsCglkb3VibGUgcGFyYW1fY18xXzIsCglkb3VibGUgcGFyYW1fY18xXzMsCglkb3Vi
bGUgcGFyYW1fY18xXzQsCglkb3VibGUgcGFyYW1fY18yXzAsCglkb3VibGUgcGFyYW1fY18yXzEs
Cglkb3VibGUgcGFyYW1fY18yXzIsCglkb3VibGUgcGFyYW1fY18yXzMsCglkb3VibGUgcGFyYW1f
Y18yXzQsCglkb3VibGUgcGFyYW1fY18zXzAsCglkb3VibGUgcGFyYW1fY18zXzEsCglkb3VibGUg
cGFyYW1fY18zXzIsCglkb3VibGUgcGFyYW1fY18zXzMsCglkb3VibGUgcGFyYW1fY18zXzQsCglp
bnQ2NF90IHBhcmFtX3NpemUsCglpbnQ2NF90IHBhcmFtX3N0ZW5jaWxTaXplLAoJY29uc3QgaW50
MzJfdCAqaW5zdHJlYW1fY29udHJvbGxlcikKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19i
c19pc19pbml0aWFsaXNlZCwgQ3B1TWFpbl9zdGF0aWNfaW5pdCk7CglpZihzdG9yZWRfbWF4Zmls
ZSA9PSBOVUxMKSB7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIk1h
eGZpbGUgd2FzIG5vdCBsb2FkZWQuIik7IHJldHVybjsgfQoJfQoJbWF4X3J1bl90ICpydW4gPSBD
cHVNYWluX25vbmJsb2NrKHBhcmFtX2NfMCwgcGFyYW1fY18xXzAsIHBhcmFtX2NfMV8xLCBwYXJh
bV9jXzFfMiwgcGFyYW1fY18xXzMsIHBhcmFtX2NfMV80LCBwYXJhbV9jXzJfMCwgcGFyYW1fY18y
XzEsIHBhcmFtX2NfMl8yLCBwYXJhbV9jXzJfMywgcGFyYW1fY18yXzQsIHBhcmFtX2NfM18wLCBw
YXJhbV9jXzNfMSwgcGFyYW1fY18zXzIsIHBhcmFtX2NfM18zLCBwYXJhbV9jXzNfNCwgcGFyYW1f
c2l6ZSwgcGFyYW1fc3RlbmNpbFNpemUsIGluc3RyZWFtX2NvbnRyb2xsZXIpOwoJaWYocnVuID09
IE5VTEwpIHsgCgkJaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFi
bGUgdG8gcnVuIGFjdGlvbnMuIik7cmV0dXJuOyB9Cgl9CgltYXhfd2FpdChydW4pOwp9CgptYXhf
cnVuX3QgKkNwdU1haW5fbm9uYmxvY2soCglkb3VibGUgcGFyYW1fY18wLAoJZG91YmxlIHBhcmFt
X2NfMV8wLAoJZG91YmxlIHBhcmFtX2NfMV8xLAoJZG91YmxlIHBhcmFtX2NfMV8yLAoJZG91Ymxl
IHBhcmFtX2NfMV8zLAoJZG91YmxlIHBhcmFtX2NfMV80LAoJZG91YmxlIHBhcmFtX2NfMl8wLAoJ
ZG91YmxlIHBhcmFtX2NfMl8xLAoJZG91YmxlIHBhcmFtX2NfMl8yLAoJZG91YmxlIHBhcmFtX2Nf
Ml8zLAoJZG91YmxlIHBhcmFtX2NfMl80LAoJZG91YmxlIHBhcmFtX2NfM18wLAoJZG91YmxlIHBh
cmFtX2NfM18xLAoJZG91YmxlIHBhcmFtX2NfM18yLAoJZG91YmxlIHBhcmFtX2NfM18zLAoJZG91
YmxlIHBhcmFtX2NfM180LAoJaW50NjRfdCBwYXJhbV9zaXplLAoJaW50NjRfdCBwYXJhbV9zdGVu
Y2lsU2l6ZSwKCWNvbnN0IGludDMyX3QgKmluc3RyZWFtX2NvbnRyb2xsZXIpCnsKCUNwdU1haW5f
YWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18w
ID0gcGFyYW1fY18wOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18xXzAgPSBwYXJhbV9jXzFf
MDsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMV8xID0gcGFyYW1fY18xXzE7CglpbnRlcmZh
Y2VfYWN0aW9ucy5wYXJhbV9jXzFfMiA9IHBhcmFtX2NfMV8yOwoJaW50ZXJmYWNlX2FjdGlvbnMu
cGFyYW1fY18xXzMgPSBwYXJhbV9jXzFfMzsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfMV80
ID0gcGFyYW1fY18xXzQ7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzJfMCA9IHBhcmFtX2Nf
Ml8wOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18yXzEgPSBwYXJhbV9jXzJfMTsKCWludGVy
ZmFjZV9hY3Rpb25zLnBhcmFtX2NfMl8yID0gcGFyYW1fY18yXzI7CglpbnRlcmZhY2VfYWN0aW9u
cy5wYXJhbV9jXzJfMyA9IHBhcmFtX2NfMl8zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18y
XzQgPSBwYXJhbV9jXzJfNDsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX2NfM18wID0gcGFyYW1f
Y18zXzA7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9jXzNfMSA9IHBhcmFtX2NfM18xOwoJaW50
ZXJmYWNlX2FjdGlvbnMucGFyYW1fY18zXzIgPSBwYXJhbV9jXzNfMjsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX2NfM18zID0gcGFyYW1fY18zXzM7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9j
XzNfNCA9IHBhcmFtX2NfM180OwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fc2l6ZSA9IHBhcmFt
X3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9zdGVuY2lsU2l6ZSA9IHBhcmFtX3N0ZW5j
aWxTaXplOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fY29udHJvbGxlciA9IGluc3RyZWFt
X2NvbnRyb2xsZXI7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2Vk
LCBDcHVNYWluX3N0YXRpY19pbml0KTsKCWlmKHN0b3JlZF9tYXhmaWxlID09IE5VTEwpIHsKCQlp
ZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiTWF4ZmlsZSB3YXMgbm90IGxv
YWRlZC4iKTsgcmV0dXJuIE5VTEw7IH0KCX0KCW1heF9hY3Rpb25zX3QgKmFjdGlvbnNbMV07Cglh
Y3Rpb25zWzBdID0gQ3B1TWFpbl9jb252ZXJ0KHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJaWYoYWN0aW9uc1swXSA9PSBOVUxMKSB7IAoJCWlmKG1heF9jb25maWdfZ2V0X2Jv
b2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsK
CQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIpO3JldHVybiBOVUxM
OyB9Cgl9CgltYXhfdmFsaWRhdGUoYWN0aW9uc1swXSk7CglpZighbWF4X29rKGFjdGlvbnNbMF0t
PmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lO
VEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRf
ZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9
Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fbXVsdGlfbm9uYmxvY2soc3RvcmVkX2VuZ2lu
ZSwgYWN0aW9ucywgMSk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgp
OwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm4gTlVM
TDsgfQoJfQoJaWYoIW1heF9vayhzdG9yZWRfZW5naW5lLT5lcnJvcnMpICB8fCAhbWF4X29rKGFj
dGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNbMF0tPmVycm9ycykpOyBzZXRf
ZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRfZW5naW5lLT5lcnJvcnMpKTsg
cmV0dXJuIE5VTEw7fQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zWzBdKTsKCXJldHVybiBy
dW47Cn0KCnZvaWQgQ3B1TWFpbl9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCUNwdU1haW5f
YWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBDcHVNYWlu
X3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlmKHJ1biA9PSBOVUxM
KSB7IAoJCWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRv
IHJ1biBhY3Rpb25zLiIpO3JldHVybjsgfQoJfQoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90
ICpDcHVNYWluX3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJQ3B1TWFpbl9h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4
X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgltYXhfYWN0aW9uc190ICphY3Rpb25zWzFd
OwoJYWN0aW9uc1swXSA9IENwdU1haW5fY29udmVydChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9u
cyk7CglpZighbWF4X29rKGFjdGlvbnNbMF0tPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0
KCk7CgkJZWxzZSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnNb
MF0tPmVycm9ycykpOyByZXR1cm4gTlVMTDt9Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5f
bXVsdGlfbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zLCAxKTsKCWlmKHJ1biA9PSBOVUxMKSB7IAoJ
CWlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJvcigiVW5hYmxlIHRvIHJ1biBh
Y3Rpb25zLiIpOyByZXR1cm4gTlVMTDsgfQoJfQoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zWzBd
KTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0
aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtp
bl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlv
bnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2
aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2b2lkIENwdU1haW5fcnVuX2dyb3VwKG1h
eF9ncm91cF90ICpncm91cCwgQ3B1TWFpbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgkvKiBOb3Qgc3RyaWN0bHkgY29ycmVjdCwgYmVjYXVzZSBleHBsaWNpdGx5IGxvY2tpbmcgYW4g
ZW5naW5lIGhlcmUuICovCgltYXhfZW5naW5lX3QgKmVuZ2luZSA9IG1heF9sb2NrX2FueShncm91
cCk7CglpZihlbmdpbmUgPT0gTlVMTCkgcmV0dXJuOwoJQ3B1TWFpbl9ydW4oZW5naW5lLCBpbnRl
cmZhY2VfYWN0aW9ucyk7CgltYXhfdW5sb2NrKGVuZ2luZSk7Cn0KCgovKioKICogXGJyaWVmIEdy
b3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBv
biB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1l
ZGlhdGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6
bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVk
IHdpdGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1
bl9ncm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgog
KiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFj
ZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVj
dXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAq
LwptYXhfcnVuX3QgKkNwdU1haW5fcnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91
cCwgQ3B1TWFpbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICpt
YXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICph
Y3Rpb25zID0gQ3B1TWFpbl9jb252ZXJ0KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zKTsKCWlm
KGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9y
cykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4g
PSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2Zy
ZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2
YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAq
IFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBh
cmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1
bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVz
LiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXpl
IG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBDcHVNYWluX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAq
ZW5nYXJyYXksIENwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhf
cnVuX3QgKnJ1biA9IENwdU1haW5fcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZh
Y2VfYWN0aW9ucyk7CglpZihydW4gPT0gTlVMTCkgeyAKCQlpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJ
CWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBydW4gYWN0aW9ucy4iKTtyZXR1cm47IH0KCX0K
CW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0
aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICog
CiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkg
b2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRl
cmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3Rh
dHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjpt
YXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNv
IHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2lu
XSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBB
IGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBp
biBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpDcHVNYWluX3J1bl9hcnJheV9ub25ibG9j
ayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIENwdU1haW5fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhf
ZmlsZShlbmdhcnJheSk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphcnJfYWN0YXJyYXlbMV07
CgltYXhfYWN0aW9uc190ICoqYXJyX2FjdGlvbnNbMV07CglhcnJfYWN0YXJyYXlbMF0gPSBtYXhf
YWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7CglpZihhcnJfYWN0YXJyYXlb
MF0gPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglhcnJfYWN0aW9uc1swXSA9IG1hbGxvYyhlbmdhcnJh
eS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yKGk9MDsgaSA8IGFycl9hY3Rh
cnJheVswXS0+c2l6ZTsgaSsrKSB7CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IENwdU1haW5f
Y29udmVydChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSk7CgkJaWYoYWN0aW9ucyA9PSBO
VUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1swXVtpXSA9IGFjdGlvbnM7CgkJbWF4X3Nl
dF9hY3Rpb24oYXJyX2FjdGFycmF5WzBdLCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVu
ID0gbWF4X3J1bl9hcnJheV9tdWx0aV9ub25ibG9jayhlbmdhcnJheSwgYXJyX2FjdGFycmF5LCAx
ICk7Cglmb3IgKGk9MDsgaSA8IGFycl9hY3RhcnJheVswXS0+c2l6ZTsgaSsrKSB7IG1heF9hY3Rp
b25zX2ZyZWUoYXJyX2FjdGlvbnNbMF1baV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhcnJfYWN0
YXJyYXlbMF0pOwoJZnJlZShhcnJfYWN0aW9uc1swXSk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAq
IFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEg
ZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0
aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlv
bnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhl
IG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50
ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWlu
dGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4
X2FjdGlvbnNfdCogQ3B1TWFpbl9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIENwdU1haW5f
YWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9
IG1heF9hY3Rpb25zX2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwgfHwg
IW1heF9vayhtYXhmaWxlLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCglkb3VibGUgcGFyYW1fY18w
ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfMDsKCQoJZG91YmxlIHBhcmFtX2NfMV8wID0g
aW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfMV8wOwoJCglkb3VibGUgcGFyYW1fY18xXzEgPSBp
bnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fY18xXzE7CgkKCWRvdWJsZSBwYXJhbV9jXzFfMiA9IGlu
dGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzFfMjsKCQoJZG91YmxlIHBhcmFtX2NfMV8zID0gaW50
ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2NfMV8zOwoJCglkb3VibGUgcGFyYW1fY18xXzQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+cGFyYW1fY18xXzQ7CgkKCWRvdWJsZSBwYXJhbV9jXzJfMCA9IGludGVy
ZmFjZV9hY3Rpb25zLT5wYXJhbV9jXzJfMDsKCQoJZG91YmxlIHBhcmFtX2NfMl8xID0gaW50ZXJm
YWNlX2FjdGlvbnMtPnBhcmFtX2NfMl8xOwoJCglkb3VibGUgcGFyYW1fY18yXzIgPSBpbnRlcmZh
Y2VfYWN0aW9ucy0+cGFyYW1fY18yXzI7CgkKCWRvdWJsZSBwYXJhbV9jXzJfMyA9IGludGVyZmFj
ZV9hY3Rpb25zLT5wYXJhbV9jXzJfMzsKCQoJZG91YmxlIHBhcmFtX2NfMl80ID0gaW50ZXJmYWNl
X2FjdGlvbnMtPnBhcmFtX2NfMl80OwoJCglkb3VibGUgcGFyYW1fY18zXzAgPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+cGFyYW1fY18zXzA7CgkKCWRvdWJsZSBwYXJhbV9jXzNfMSA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9jXzNfMTsKCQoJZG91YmxlIHBhcmFtX2NfM18yID0gaW50ZXJmYWNlX2Fj
dGlvbnMtPnBhcmFtX2NfM18yOwoJCglkb3VibGUgcGFyYW1fY18zXzMgPSBpbnRlcmZhY2VfYWN0
aW9ucy0+cGFyYW1fY18zXzM7CgkKCWRvdWJsZSBwYXJhbV9jXzNfNCA9IGludGVyZmFjZV9hY3Rp
b25zLT5wYXJhbV9jXzNfNDsKCQoJaW50NjRfdCBwYXJhbV9zaXplID0gaW50ZXJmYWNlX2FjdGlv
bnMtPnBhcmFtX3NpemU7CgkKCWludDY0X3QgcGFyYW1fc3RlbmNpbFNpemUgPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+cGFyYW1fc3RlbmNpbFNpemU7CgkKCgkvKiB0ZW1wb3JhcnkgdmFyaWFibGVzICov
CglpbnQ2NF90IHRtcF8wID0gKHBhcmFtX3NpemUgKiBwYXJhbV9zdGVuY2lsU2l6ZSk7CglpbnQ2
NF90IHRtcF8xID0gKChwYXJhbV9zaXplICogcGFyYW1fc3RlbmNpbFNpemUpICogNCk7CglpbnQ2
NF90IHRtcF8yID0gKHBhcmFtX3NpemUgKiA0KTsKCWludDY0X3QgdG1wXzMgPSAocGFyYW1fc2l6
ZSAqIDQpOwoJaW50NjRfdCB0bXBfNCA9IChwYXJhbV9zaXplICogNCk7CglpbnQ2NF90IHRtcF81
ID0gKChwYXJhbV9zaXplICogNCkgKiAyKTsKCWludDY0X3QgdG1wXzYgPSAocGFyYW1fc2l6ZSAq
IDQpOwoJaW50NjRfdCB0bXBfNyA9ICgocGFyYW1fc2l6ZSAqIDQpICogMyk7CglpbnQ2NF90IHRt
cF84ID0gKHBhcmFtX3NpemUgKiA0KTsKCWludDY0X3QgdG1wXzkgPSAoKHBhcmFtX3NpemUgKiA0
KSAqIDQpOwoJaW50NjRfdCB0bXBfMTAgPSAoKHBhcmFtX3NpemUgKiBwYXJhbV9zdGVuY2lsU2l6
ZSkgKiA0KTsKCWludDY0X3QgdG1wXzExID0gKCgocGFyYW1fc2l6ZSAqIDQpICogNCkgKyAoKHBh
cmFtX3NpemUgKiBwYXJhbV9zdGVuY2lsU2l6ZSkgKiA0KSk7CglpbnQ2NF90IHRtcF8xMiA9ICgo
cGFyYW1fc2l6ZSAqIHBhcmFtX3N0ZW5jaWxTaXplKSAqIDQpOwoKCS8qIGNvZGUgZm9yIHNjYWxh
ciBsaW5lYXJLZXJuZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19saW5lYXJL
ZXJuZWwgPSB0bXBfMDsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgImxpbmVhcktlcm5lbCIsIHRt
cF8wKTsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQg
b2YgY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCgkvKiBj
b2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfMCAqLwoJZG91YmxlIGluc2NhbGFyX2xpbmVh
cktlcm5lbF9jXzAgPSBwYXJhbV9jXzA7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFy
S2VybmVsIiwgImNfMCIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzApOwoJaWYoIW1heF9vayhh
Y3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
bGluZWFyS2VybmVsLmNfMCovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18x
XzAgKi8KCWRvdWJsZSBpbnNjYWxhcl9saW5lYXJLZXJuZWxfY18xXzAgPSBwYXJhbV9jXzFfMDsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18xXzAiLCBpbnNjYWxh
cl9saW5lYXJLZXJuZWxfY18xXzApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfMV8wKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5jXzFfMSAqLwoJZG91YmxlIGluc2Nh
bGFyX2xpbmVhcktlcm5lbF9jXzFfMSA9IHBhcmFtX2NfMV8xOwoJbWF4X3NldF9kb3VibGUoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzFfMSIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzFf
MSk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18xXzEqLwoJCgkvKiBjb2RlIGZvciBzY2Fs
YXIgbGluZWFyS2VybmVsLmNfMV8yICovCglkb3VibGUgaW5zY2FsYXJfbGluZWFyS2VybmVsX2Nf
MV8yID0gcGFyYW1fY18xXzI7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFyS2VybmVs
IiwgImNfMV8yIiwgaW5zY2FsYXJfbGluZWFyS2VybmVsX2NfMV8yKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGxp
bmVhcktlcm5lbC5jXzFfMiovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18x
XzMgKi8KCWRvdWJsZSBpbnNjYWxhcl9saW5lYXJLZXJuZWxfY18xXzMgPSBwYXJhbV9jXzFfMzsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18xXzMiLCBpbnNjYWxh
cl9saW5lYXJLZXJuZWxfY18xXzMpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfMV8zKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5jXzFfNCAqLwoJZG91YmxlIGluc2Nh
bGFyX2xpbmVhcktlcm5lbF9jXzFfNCA9IHBhcmFtX2NfMV80OwoJbWF4X3NldF9kb3VibGUoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzFfNCIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzFf
NCk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18xXzQqLwoJCgkvKiBjb2RlIGZvciBzY2Fs
YXIgbGluZWFyS2VybmVsLmNfMl8wICovCglkb3VibGUgaW5zY2FsYXJfbGluZWFyS2VybmVsX2Nf
Ml8wID0gcGFyYW1fY18yXzA7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFyS2VybmVs
IiwgImNfMl8wIiwgaW5zY2FsYXJfbGluZWFyS2VybmVsX2NfMl8wKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGxp
bmVhcktlcm5lbC5jXzJfMCovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18y
XzEgKi8KCWRvdWJsZSBpbnNjYWxhcl9saW5lYXJLZXJuZWxfY18yXzEgPSBwYXJhbV9jXzJfMTsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18yXzEiLCBpbnNjYWxh
cl9saW5lYXJLZXJuZWxfY18yXzEpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfMl8xKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5jXzJfMiAqLwoJZG91YmxlIGluc2Nh
bGFyX2xpbmVhcktlcm5lbF9jXzJfMiA9IHBhcmFtX2NfMl8yOwoJbWF4X3NldF9kb3VibGUoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzJfMiIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzJf
Mik7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18yXzIqLwoJCgkvKiBjb2RlIGZvciBzY2Fs
YXIgbGluZWFyS2VybmVsLmNfMl8zICovCglkb3VibGUgaW5zY2FsYXJfbGluZWFyS2VybmVsX2Nf
Ml8zID0gcGFyYW1fY18yXzM7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFyS2VybmVs
IiwgImNfMl8zIiwgaW5zY2FsYXJfbGluZWFyS2VybmVsX2NfMl8zKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGxp
bmVhcktlcm5lbC5jXzJfMyovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18y
XzQgKi8KCWRvdWJsZSBpbnNjYWxhcl9saW5lYXJLZXJuZWxfY18yXzQgPSBwYXJhbV9jXzJfNDsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18yXzQiLCBpbnNjYWxh
cl9saW5lYXJLZXJuZWxfY18yXzQpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfMl80Ki8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5jXzNfMCAqLwoJZG91YmxlIGluc2Nh
bGFyX2xpbmVhcktlcm5lbF9jXzNfMCA9IHBhcmFtX2NfM18wOwoJbWF4X3NldF9kb3VibGUoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzNfMCIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzNf
MCk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18zXzAqLwoJCgkvKiBjb2RlIGZvciBzY2Fs
YXIgbGluZWFyS2VybmVsLmNfM18xICovCglkb3VibGUgaW5zY2FsYXJfbGluZWFyS2VybmVsX2Nf
M18xID0gcGFyYW1fY18zXzE7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFyS2VybmVs
IiwgImNfM18xIiwgaW5zY2FsYXJfbGluZWFyS2VybmVsX2NfM18xKTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGxp
bmVhcktlcm5lbC5jXzNfMSovCgkKCS8qIGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18z
XzIgKi8KCWRvdWJsZSBpbnNjYWxhcl9saW5lYXJLZXJuZWxfY18zXzIgPSBwYXJhbV9jXzNfMjsK
CW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJsaW5lYXJLZXJuZWwiLCAiY18zXzIiLCBpbnNjYWxh
cl9saW5lYXJLZXJuZWxfY18zXzIpOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1
cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbGluZWFyS2VybmVsLmNfM18yKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIGxpbmVhcktlcm5lbC5jXzNfMyAqLwoJZG91YmxlIGluc2Nh
bGFyX2xpbmVhcktlcm5lbF9jXzNfMyA9IHBhcmFtX2NfM18zOwoJbWF4X3NldF9kb3VibGUoYWN0
aW9ucywgImxpbmVhcktlcm5lbCIsICJjXzNfMyIsIGluc2NhbGFyX2xpbmVhcktlcm5lbF9jXzNf
Myk7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJLyogZW5kIG9m
IGNvZGUgZm9yIHNjYWxhciBsaW5lYXJLZXJuZWwuY18zXzMqLwoJCgkvKiBjb2RlIGZvciBzY2Fs
YXIgbGluZWFyS2VybmVsLmNfM180ICovCglkb3VibGUgaW5zY2FsYXJfbGluZWFyS2VybmVsX2Nf
M180ID0gcGFyYW1fY18zXzQ7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAibGluZWFyS2VybmVs
IiwgImNfM180IiwgaW5zY2FsYXJfbGluZWFyS2VybmVsX2NfM180KTsKCWlmKCFtYXhfb2soYWN0
aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIGxp
bmVhcktlcm5lbC5jXzNfNCovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBjb250cm9sbGVyICovCglz
aXplX3QgaW5zdHJlYW1fc2l6ZV9jb250cm9sbGVyID0gdG1wXzE7CglpZiAoaW5zdHJlYW1fc2l6
ZV9jb250cm9sbGVyID4gMCkgewoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAiY29udHJvbGxl
ciIsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9jb250cm9sbGVyLGluc3RyZWFtX3NpemVf
Y29udHJvbGxlcik7CgkJaWYgKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7
Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIGNvbnRyb2xsZXIgKi8KCQoJbWF4X2lnbm9y
ZV9zdHJlYW0oYWN0aW9ucywgImNwdV90b19sbWVtIiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5l
cnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJbWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgImxtZW1f
dG9fY3B1IiApOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJ
bWF4X2lnbm9yZV9zdHJlYW0oYWN0aW9ucywgInBwcmVzdWx0IiApOwoJaWYoIW1heF9vayhhY3Rp
b25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3IgbGluZWFyIG1lbW9yeS1z
dHJlYW0gImR2diIgKi8KCXNpemVfdCBsbWVtX2FkZHJlc3NfZHZ2ID0gdG1wXzU7CglzaXplX3Qg
bG1lbV9hcnJfc2l6ZV9kdnYgPSB0bXBfNjsKCWludCBsbWVtX2J1cnN0X3NpemVfZHZ2ID0gbWF4
X2dldF9idXJzdF9zaXplKG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1lbV9hZGRyZXNzX2R2diAl
IGxtZW1fYnVyc3Rfc2l6ZV9kdnYpICE9IDAgKSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMg
RXJyb3I6ICVzOiVkIDogTE1lbSBkdnYgcGFyYW1ldGVyICdsbWVtX2FkZHJlc3NfZHZ2JyBpcyBz
ZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9f
RklMRV9fLCBfX0xJTkVfXywgbG1lbV9hZGRyZXNzX2R2diwgbG1lbV9idXJzdF9zaXplX2R2diAp
OwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV9kdnYgJSBsbWVtX2J1cnN0X3NpemVfZHZ2KSAhPSAw
ICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gZHZ2IHBh
cmFtZXRlciAnbG1lbV9hcnJfc2l6ZV9kdnYnIGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3Qg
YmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2Fy
cl9zaXplX2R2diwgbG1lbV9idXJzdF9zaXplX2R2diApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVf
ZHZ2ID4gMCkgewoJCW1heF9sbWVtX2xpbmVhcihhY3Rpb25zLCAiZHZ2IiwgbG1lbV9hZGRyZXNz
X2R2diwgbG1lbV9hcnJfc2l6ZV9kdnYpOwoJfSBlbHNlIHsKCQltYXhfaWdub3JlX2xtZW0oYWN0
aW9ucywgImR2diIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4g
TlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAiZHZ2IiAqLwoJ
CgkvKiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAicCIgKi8KCXNpemVfdCBsbWVtX2Fk
ZHJlc3NfcCA9IDA7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV9wID0gdG1wXzI7CglpbnQgbG1lbV9i
dXJzdF9zaXplX3AgPSBtYXhfZ2V0X2J1cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChs
bWVtX2FkZHJlc3NfcCAlIGxtZW1fYnVyc3Rfc2l6ZV9wKSAhPSAwICkgewoJCWZwcmludGYoc3Rk
b3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gcCBwYXJhbWV0ZXIgJ2xtZW1fYWRkcmVz
c19wJyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0
ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1lbV9hZGRyZXNzX3AsIGxtZW1fYnVyc3Rfc2l6
ZV9wICk7Cgl9CglpZiAoIChsbWVtX2Fycl9zaXplX3AgJSBsbWVtX2J1cnN0X3NpemVfcCkgIT0g
MCApIHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHAgcGFy
YW1ldGVyICdsbWVtX2Fycl9zaXplX3AnIGlzIHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUg
YSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19GSUxFX18sIF9fTElORV9fLCBsbWVtX2Fycl9z
aXplX3AsIGxtZW1fYnVyc3Rfc2l6ZV9wICk7Cgl9CglpZiAobG1lbV9hcnJfc2l6ZV9wID4gMCkg
ewoJCW1heF9sbWVtX2xpbmVhcihhY3Rpb25zLCAicCIsIGxtZW1fYWRkcmVzc19wLCBsbWVtX2Fy
cl9zaXplX3ApOwoJfSBlbHNlIHsKCQltYXhfaWdub3JlX2xtZW0oYWN0aW9ucywgInAiKTsKCX0K
CWlmICggIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkvKiBlbmQgb2Yg
Y29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gInAiICovCgkKCS8qIGNvZGUgZm9yIGxpbmVh
ciBtZW1vcnktc3RyZWFtICJwcCIgKi8KCXNpemVfdCBsbWVtX2FkZHJlc3NfcHAgPSB0bXBfMzsK
CXNpemVfdCBsbWVtX2Fycl9zaXplX3BwID0gdG1wXzQ7CglpbnQgbG1lbV9idXJzdF9zaXplX3Bw
ID0gbWF4X2dldF9idXJzdF9zaXplKG1heGZpbGUsIE5VTEwpOwoJaWYgKCAobG1lbV9hZGRyZXNz
X3BwICUgbG1lbV9idXJzdF9zaXplX3BwKSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5T
TGlDIEVycm9yOiAlczolZCA6IExNZW0gcHAgcGFyYW1ldGVyICdsbWVtX2FkZHJlc3NfcHAnIGlz
IHNldCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwg
X19GSUxFX18sIF9fTElORV9fLCBsbWVtX2FkZHJlc3NfcHAsIGxtZW1fYnVyc3Rfc2l6ZV9wcCAp
OwoJfQoJaWYgKCAobG1lbV9hcnJfc2l6ZV9wcCAlIGxtZW1fYnVyc3Rfc2l6ZV9wcCkgIT0gMCAp
IHsKCQlmcHJpbnRmKHN0ZG91dCwgIlxuU0xpQyBFcnJvcjogJXM6JWQgOiBMTWVtIHBwIHBhcmFt
ZXRlciAnbG1lbV9hcnJfc2l6ZV9wcCcgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBh
IG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYXJyX3Np
emVfcHAsIGxtZW1fYnVyc3Rfc2l6ZV9wcCApOwoJfQoJaWYgKGxtZW1fYXJyX3NpemVfcHAgPiAw
KSB7CgkJbWF4X2xtZW1fbGluZWFyKGFjdGlvbnMsICJwcCIsIGxtZW1fYWRkcmVzc19wcCwgbG1l
bV9hcnJfc2l6ZV9wcCk7Cgl9IGVsc2UgewoJCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicHAi
KTsKCX0KCWlmICggIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpICkgcmV0dXJuIE5VTEw7CgkvKiBl
bmQgb2YgY29kZSBmb3IgbGluZWFyIG1lbW9yeS1zdHJlYW0gInBwIiAqLwoJCgkvKiBjb2RlIGZv
ciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAicHgiICovCglzaXplX3QgbG1lbV9hZGRyZXNzX3B4ID0g
dG1wXzk7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV9weCA9IHRtcF8xMDsKCWludCBsbWVtX2J1cnN0
X3NpemVfcHggPSBtYXhfZ2V0X2J1cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7CglpZiAoIChsbWVt
X2FkZHJlc3NfcHggJSBsbWVtX2J1cnN0X3NpemVfcHgpICE9IDAgKSB7CgkJZnByaW50ZihzdGRv
dXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBweCBwYXJhbWV0ZXIgJ2xtZW1fYWRkcmVz
c19weCcgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5
dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc19weCwgbG1lbV9idXJzdF9z
aXplX3B4ICk7Cgl9CglpZiAoIChsbWVtX2Fycl9zaXplX3B4ICUgbG1lbV9idXJzdF9zaXplX3B4
KSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0g
cHggcGFyYW1ldGVyICdsbWVtX2Fycl9zaXplX3B4JyBpcyBzZXQgdG8gJXpkIGJ5dGVzOyBpdCBt
dXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJTkVfXywgbG1l
bV9hcnJfc2l6ZV9weCwgbG1lbV9idXJzdF9zaXplX3B4ICk7Cgl9CglpZiAobG1lbV9hcnJfc2l6
ZV9weCA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgInB4IiwgbG1lbV9hZGRyZXNz
X3B4LCBsbWVtX2Fycl9zaXplX3B4KTsKCX0gZWxzZSB7CgkJbWF4X2lnbm9yZV9sbWVtKGFjdGlv
bnMsICJweCIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVM
TDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAicHgiICovCgkKCS8q
IGNvZGUgZm9yIGxpbmVhciBtZW1vcnktc3RyZWFtICJweSIgKi8KCXNpemVfdCBsbWVtX2FkZHJl
c3NfcHkgPSB0bXBfMTE7CglzaXplX3QgbG1lbV9hcnJfc2l6ZV9weSA9IHRtcF8xMjsKCWludCBs
bWVtX2J1cnN0X3NpemVfcHkgPSBtYXhfZ2V0X2J1cnN0X3NpemUobWF4ZmlsZSwgTlVMTCk7Cglp
ZiAoIChsbWVtX2FkZHJlc3NfcHkgJSBsbWVtX2J1cnN0X3NpemVfcHkpICE9IDAgKSB7CgkJZnBy
aW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBweSBwYXJhbWV0ZXIgJ2xt
ZW1fYWRkcmVzc19weScgaXMgc2V0IHRvICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxl
IG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVfXywgX19MSU5FX18sIGxtZW1fYWRkcmVzc19weSwgbG1l
bV9idXJzdF9zaXplX3B5ICk7Cgl9CglpZiAoIChsbWVtX2Fycl9zaXplX3B5ICUgbG1lbV9idXJz
dF9zaXplX3B5KSAhPSAwICkgewoJCWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczol
ZCA6IExNZW0gcHkgcGFyYW1ldGVyICdsbWVtX2Fycl9zaXplX3B5JyBpcyBzZXQgdG8gJXpkIGJ5
dGVzOyBpdCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJWQgYnl0ZXNcbiIsIF9fRklMRV9fLCBfX0xJ
TkVfXywgbG1lbV9hcnJfc2l6ZV9weSwgbG1lbV9idXJzdF9zaXplX3B5ICk7Cgl9CglpZiAobG1l
bV9hcnJfc2l6ZV9weSA+IDApIHsKCQltYXhfbG1lbV9saW5lYXIoYWN0aW9ucywgInB5IiwgbG1l
bV9hZGRyZXNzX3B5LCBsbWVtX2Fycl9zaXplX3B5KTsKCX0gZWxzZSB7CgkJbWF4X2lnbm9yZV9s
bWVtKGFjdGlvbnMsICJweSIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSBy
ZXR1cm4gTlVMTDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAicHki
ICovCgkKCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAicmVhZF9sbWVtIiApOwoJaWYgKCAhbWF4
X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJLyogY29kZSBmb3IgbGluZWFy
IG1lbW9yeS1zdHJlYW0gInNvdXJjZV9jb250YWluZXIiICovCglzaXplX3QgbG1lbV9hZGRyZXNz
X3NvdXJjZV9jb250YWluZXIgPSB0bXBfNzsKCXNpemVfdCBsbWVtX2Fycl9zaXplX3NvdXJjZV9j
b250YWluZXIgPSB0bXBfODsKCWludCBsbWVtX2J1cnN0X3NpemVfc291cmNlX2NvbnRhaW5lciA9
IG1heF9nZXRfYnVyc3Rfc2l6ZShtYXhmaWxlLCBOVUxMKTsKCWlmICggKGxtZW1fYWRkcmVzc19z
b3VyY2VfY29udGFpbmVyICUgbG1lbV9idXJzdF9zaXplX3NvdXJjZV9jb250YWluZXIpICE9IDAg
KSB7CgkJZnByaW50ZihzdGRvdXQsICJcblNMaUMgRXJyb3I6ICVzOiVkIDogTE1lbSBzb3VyY2Vf
Y29udGFpbmVyIHBhcmFtZXRlciAnbG1lbV9hZGRyZXNzX3NvdXJjZV9jb250YWluZXInIGlzIHNl
dCB0byAlemQgYnl0ZXM7IGl0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiAlZCBieXRlc1xuIiwgX19G
SUxFX18sIF9fTElORV9fLCBsbWVtX2FkZHJlc3Nfc291cmNlX2NvbnRhaW5lciwgbG1lbV9idXJz
dF9zaXplX3NvdXJjZV9jb250YWluZXIgKTsKCX0KCWlmICggKGxtZW1fYXJyX3NpemVfc291cmNl
X2NvbnRhaW5lciAlIGxtZW1fYnVyc3Rfc2l6ZV9zb3VyY2VfY29udGFpbmVyKSAhPSAwICkgewoJ
CWZwcmludGYoc3Rkb3V0LCAiXG5TTGlDIEVycm9yOiAlczolZCA6IExNZW0gc291cmNlX2NvbnRh
aW5lciBwYXJhbWV0ZXIgJ2xtZW1fYXJyX3NpemVfc291cmNlX2NvbnRhaW5lcicgaXMgc2V0IHRv
ICV6ZCBieXRlczsgaXQgbXVzdCBiZSBhIG11bHRpcGxlIG9mICVkIGJ5dGVzXG4iLCBfX0ZJTEVf
XywgX19MSU5FX18sIGxtZW1fYXJyX3NpemVfc291cmNlX2NvbnRhaW5lciwgbG1lbV9idXJzdF9z
aXplX3NvdXJjZV9jb250YWluZXIgKTsKCX0KCWlmIChsbWVtX2Fycl9zaXplX3NvdXJjZV9jb250
YWluZXIgPiAwKSB7CgkJbWF4X2xtZW1fbGluZWFyKGFjdGlvbnMsICJzb3VyY2VfY29udGFpbmVy
IiwgbG1lbV9hZGRyZXNzX3NvdXJjZV9jb250YWluZXIsIGxtZW1fYXJyX3NpemVfc291cmNlX2Nv
bnRhaW5lcik7Cgl9IGVsc2UgewoJCW1heF9pZ25vcmVfbG1lbShhY3Rpb25zLCAic291cmNlX2Nv
bnRhaW5lciIpOwoJfQoJaWYgKCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVM
TDsKCS8qIGVuZCBvZiBjb2RlIGZvciBsaW5lYXIgbWVtb3J5LXN0cmVhbSAic291cmNlX2NvbnRh
aW5lciIgKi8KCQoJbWF4X2lnbm9yZV9sbWVtKGFjdGlvbnMsICJ3cml0ZV9sbWVtIiApOwoJaWYg
KCAhbWF4X29rKGFjdGlvbnMtPmVycm9ycykgKSByZXR1cm4gTlVMTDsKCQoJcmV0dXJuIGFjdGlv
bnM7Cn0KCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(writeLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(linearKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(linearKernel, c_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_4)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_4)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_4)	
SLIC_STREAM_DISABLED(controller)	
SLIC_STREAM(cpu_to_lmem, param_nbytes)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM_DISABLED(ppresult)	
SLIC_LMEM_LINEAR_DISABLED(dvv)	
SLIC_LMEM_LINEAR_DISABLED(p)	
SLIC_LMEM_LINEAR_DISABLED(pp)	
SLIC_LMEM_LINEAR_DISABLED(px)	
SLIC_LMEM_LINEAR_DISABLED(py)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR_DISABLED(source_container)	
SLIC_LMEM_LINEAR(write_lmem, param_address, param_nbytes)	
SLIC_MODE_END(writeLMem)
SLIC_MODE_START(readLMem)	
SLIC_PARAMETER_UINT64(int64_t, address, param_address)	
SLIC_PARAMETER_UINT64(int64_t, nbytes, param_nbytes)	
SLIC_SCALAR_DISABLED(linearKernel, run_cycle_count)	
SLIC_SCALAR_DISABLED(linearKernel, c_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_1_4)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_2_4)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_0)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_1)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_2)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_3)	
SLIC_SCALAR_DISABLED(linearKernel, c_3_4)	
SLIC_STREAM_DISABLED(controller)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM(lmem_to_cpu, param_nbytes)	
SLIC_STREAM_DISABLED(ppresult)	
SLIC_LMEM_LINEAR_DISABLED(dvv)	
SLIC_LMEM_LINEAR_DISABLED(p)	
SLIC_LMEM_LINEAR_DISABLED(pp)	
SLIC_LMEM_LINEAR_DISABLED(px)	
SLIC_LMEM_LINEAR_DISABLED(py)	
SLIC_LMEM_LINEAR(read_lmem, param_address, param_nbytes)	
SLIC_LMEM_LINEAR_DISABLED(source_container)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_MODE_END(readLMem)
SLIC_MODE_START(default)	
SLIC_PARAMETER_DOUBLE(double, c_0, param_c_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_0, param_c_1_0)	
SLIC_PARAMETER_DOUBLE(double, c_1_1, param_c_1_1)	
SLIC_PARAMETER_DOUBLE(double, c_1_2, param_c_1_2)	
SLIC_PARAMETER_DOUBLE(double, c_1_3, param_c_1_3)	
SLIC_PARAMETER_DOUBLE(double, c_1_4, param_c_1_4)	
SLIC_PARAMETER_DOUBLE(double, c_2_0, param_c_2_0)	
SLIC_PARAMETER_DOUBLE(double, c_2_1, param_c_2_1)	
SLIC_PARAMETER_DOUBLE(double, c_2_2, param_c_2_2)	
SLIC_PARAMETER_DOUBLE(double, c_2_3, param_c_2_3)	
SLIC_PARAMETER_DOUBLE(double, c_2_4, param_c_2_4)	
SLIC_PARAMETER_DOUBLE(double, c_3_0, param_c_3_0)	
SLIC_PARAMETER_DOUBLE(double, c_3_1, param_c_3_1)	
SLIC_PARAMETER_DOUBLE(double, c_3_2, param_c_3_2)	
SLIC_PARAMETER_DOUBLE(double, c_3_3, param_c_3_3)	
SLIC_PARAMETER_DOUBLE(double, c_3_4, param_c_3_4)	
SLIC_PARAMETER_UINT64(int64_t, size, param_size)	
SLIC_PARAMETER_UINT64(int64_t, stencilSize, param_stencilSize)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_size * param_stencilSize);)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_size * param_stencilSize) * 4);)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_3 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_4 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_5 = ((param_size * 4) * 2);)	
SLIC_TEMP_VAR(int64_t tmp_6 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_7 = ((param_size * 4) * 3);)	
SLIC_TEMP_VAR(int64_t tmp_8 = (param_size * 4);)	
SLIC_TEMP_VAR(int64_t tmp_9 = ((param_size * 4) * 4);)	
SLIC_TEMP_VAR(int64_t tmp_10 = ((param_size * param_stencilSize) * 4);)	
SLIC_TEMP_VAR(int64_t tmp_11 = (((param_size * 4) * 4) + ((param_size * param_stencilSize) * 4));)	
SLIC_TEMP_VAR(int64_t tmp_12 = ((param_size * param_stencilSize) * 4);)	
SLIC_SET_TICKS(linearKernel, tmp_0)	
SLIC_SCALAR_DOUBLE(linearKernel, c_0, param_c_0)	
SLIC_SCALAR_DOUBLE(linearKernel, c_1_0, param_c_1_0)	
SLIC_SCALAR_DOUBLE(linearKernel, c_1_1, param_c_1_1)	
SLIC_SCALAR_DOUBLE(linearKernel, c_1_2, param_c_1_2)	
SLIC_SCALAR_DOUBLE(linearKernel, c_1_3, param_c_1_3)	
SLIC_SCALAR_DOUBLE(linearKernel, c_1_4, param_c_1_4)	
SLIC_SCALAR_DOUBLE(linearKernel, c_2_0, param_c_2_0)	
SLIC_SCALAR_DOUBLE(linearKernel, c_2_1, param_c_2_1)	
SLIC_SCALAR_DOUBLE(linearKernel, c_2_2, param_c_2_2)	
SLIC_SCALAR_DOUBLE(linearKernel, c_2_3, param_c_2_3)	
SLIC_SCALAR_DOUBLE(linearKernel, c_2_4, param_c_2_4)	
SLIC_SCALAR_DOUBLE(linearKernel, c_3_0, param_c_3_0)	
SLIC_SCALAR_DOUBLE(linearKernel, c_3_1, param_c_3_1)	
SLIC_SCALAR_DOUBLE(linearKernel, c_3_2, param_c_3_2)	
SLIC_SCALAR_DOUBLE(linearKernel, c_3_3, param_c_3_3)	
SLIC_SCALAR_DOUBLE(linearKernel, c_3_4, param_c_3_4)	
SLIC_STREAM(controller, tmp_1)	
SLIC_STREAM_DISABLED(cpu_to_lmem)	
SLIC_STREAM_DISABLED(lmem_to_cpu)	
SLIC_STREAM_DISABLED(ppresult)	
SLIC_LMEM_LINEAR(dvv, tmp_5, tmp_6)	
SLIC_LMEM_LINEAR(p, 0, tmp_2)	
SLIC_LMEM_LINEAR(pp, tmp_3, tmp_4)	
SLIC_LMEM_LINEAR(px, tmp_9, tmp_10)	
SLIC_LMEM_LINEAR(py, tmp_11, tmp_12)	
SLIC_LMEM_LINEAR_DISABLED(read_lmem)	
SLIC_LMEM_LINEAR(source_container, tmp_7, tmp_8)	
SLIC_LMEM_LINEAR_DISABLED(write_lmem)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkNwdU1haW4uaCIgbmFtZT0i
Q3B1TWFpbiI+PGVuZ2luZW1vZGUgbmFtZT0id3JpdGVMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1
TWFpbl93cml0ZUxNZW0iIHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxhciBkZXNjPSJJbnRlcmZh
Y2UgUGFyYW1ldGVyICZxdW90O2FkZHJlc3MmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1l
PSJwYXJhbV9hZGRyZXNzIiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2Ug
UGFyYW1ldGVyICZxdW90O25ieXRlcyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX25ieXRlcyIgdHlwZT0iaW50NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3Vs
ZCBiZSBvZiBzaXplIHBhcmFtX25ieXRlcyBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
Imluc3RyZWFtX2NwdV90b19sbWVtIiBzaXplPSJwYXJhbV9uYnl0ZXMiIHRyYW5zcG9zZT0idHJ1
ZSIgdHlwZT0idm9pZCIvPjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjxlbmdpbmVtb2RlIG5hbWU9
InJlYWRMTWVtIj48ZnVuY3Rpb24gbmFtZT0iQ3B1TWFpbl9yZWFkTE1lbSIgcmV0dXJuLXZhbHVl
PSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7YWRkcmVzcyZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2FkZHJlc3MiIHR5cGU9ImludDY0
X3QiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7bmJ5dGVzJnF1b3Q7
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fbmJ5dGVzIiB0eXBlPSJpbnQ2NF90Ii8+
PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgcGFyYW1fbmJ5dGVzIGJ5
dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9sbWVtX3RvX2NwdSIgc2l6
ZT0icGFyYW1fbmJ5dGVzIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9InZvaWQiLz48L2Z1bmN0aW9u
PjwvZW5naW5lbW9kZT48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
Q3B1TWFpbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJh
bWV0ZXIgJnF1b3Q7Y18wJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18w
IiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7
Y18xXzAmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzFfMCIgdHlwZT0i
ZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMV8xJnF1
b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18xXzEiIHR5cGU9ImRvdWJsZSIv
PjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzFfMiZxdW90Oy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMV8yIiB0eXBlPSJkb3VibGUiLz48c2NhbGFy
IGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18xXzMmcXVvdDsuIiBkaXJlY3Rpb249
IklucHV0IiBuYW1lPSJwYXJhbV9jXzFfMyIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJ
bnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfMV80JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0icGFyYW1fY18xXzQiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNl
IFBhcmFtZXRlciAmcXVvdDtjXzJfMCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBh
cmFtX2NfMl8wIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7Y18yXzEmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzJf
MSIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90
O2NfMl8yJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18yXzIiIHR5cGU9
ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzJfMyZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfMl8zIiB0eXBlPSJkb3VibGUi
Lz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7Y18yXzQmcXVvdDsuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9jXzJfNCIgdHlwZT0iZG91YmxlIi8+PHNjYWxh
ciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O2NfM18wJnF1b3Q7LiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0icGFyYW1fY18zXzAiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0i
SW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtjXzNfMSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQi
IG5hbWU9InBhcmFtX2NfM18xIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7Y18zXzImcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJw
YXJhbV9jXzNfMiIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1l
dGVyICZxdW90O2NfM18zJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fY18z
XzMiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVv
dDtjXzNfNCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX2NfM180IiB0eXBl
PSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7c2l6ZSZx
dW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3NpemUiIHR5cGU9ImludDY0X3Qi
Lz48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7c3RlbmNpbFNpemUmcXVv
dDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9zdGVuY2lsU2l6ZSIgdHlwZT0iaW50
NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplICgocGFyYW1f
c2l6ZSAqIHBhcmFtX3N0ZW5jaWxTaXplKSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0iaW5zdHJlYW1fY29udHJvbGxlciIgc2l6ZT0iKChwYXJhbV9zaXplICogcGFyYW1fc3Rl
bmNpbFNpemUpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iaW50MzJfdCI+PGRpbWVuc2lv
biBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVy
YXRvcj0iLyIgdmFsdWU9IigoKHBhcmFtX3NpemUgKiBwYXJhbV9zdGVuY2lsU2l6ZSkgKiA0KSAv
IDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9
IigocGFyYW1fc2l6ZSAqIHBhcmFtX3N0ZW5jaWxTaXplKSAqIDQpIj48ZnVuY3Rpb25DYWxsPjxu
dW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9zaXplICogcGFyYW1f
c3RlbmNpbFNpemUpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9zaXplIi8+PHVzZXJQYXJhbSB2
YWx1ZT0icGFyYW1fc3RlbmNpbFNpemUiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25D
YWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0
aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9m
dW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9uPjwvZW5n
aW5lbW9kZT48L21heGZpbGU+
#endif /* SKIN_META_DATA */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(linearKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 4, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 11, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 12, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 201, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 203, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 205, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 206, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 207, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 160, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 18, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 19, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 17, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 161, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 26, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 24, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 27, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 25, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 28, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 42, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 208, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 209, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 210, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 211, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 212, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 213, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 214, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 182, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 39, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 183, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 215, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 216, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 217, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 218, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 219, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 220, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 221, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 194, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 34, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 32, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 35, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 33, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 195, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 36, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 196, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 146, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 144, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 147, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 145, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 148, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(linearKernel, 197, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 153, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 222, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 198, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(linearKernel, 155, "SquashFactor", 0.0)
#endif

