/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 *        Kernel that doubles values in a vector.
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);

		// Input
		DFEVector<DFEVar> inVector = io.input("inVector", vectorType);

		// Explicitly double each vector element
		DFEVector<DFEVar> doubledVector =
			vectorType.newInstance(this);

		for (int i = 0; i < vectorSize; i++)
			doubledVector[i] <== inVector[i] * 2;

		// Double vector by multiplying with another
		// (constant) vector [2, 2].
		DFEVector<DFEVar> quadroupledVector =
			doubledVector * constant.vect(2, 2);

		// Double vector by multiplying all elements by a single value
		DFEVector<DFEVar> octupledVector =
			quadroupledVector * 2;

		//Output
		io.output("outVector", octupledVector, vectorType);
	}

}
